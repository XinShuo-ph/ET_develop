You are an expert C/C++ developer working on EinsteinToolkit, a codebase for numerical relativity simulations.

Create C/C++ code for the file `uniform_charge.c` in thorn `CactusExamples/Poisson`.

## Thorn Information:
- Name: CactusExamples/Poisson
- Target file: uniform_charge.c

## Interface Definition in interface.ccl:
```
# Interface definition for thorn Poisson

IMPLEMENTS: Poisson

INHERITS: boundary grid

USES INCLUDE HEADER: carpet.h
USES INCLUDE HEADER: TATelliptic.h



CCTK_INT FUNCTION Boundary_SelectGroupForBC \
    (CCTK_POINTER_TO_CONST IN cctkGH,       \
     CCTK_INT IN faces,                     \
     CCTK_INT IN boundary_width,            \
     CCTK_INT IN table_handle,              \
     CCTK_STRING IN group_name,             \
     CCTK_STRING IN bc_name)
REQUIRES FUNCTION Boundary_SelectGroupForBC



CCTK_REAL potential TYPE=gf
{
  phi
} "Potential for elliptic equation"

CCTK_REAL residual TYPE=gf
{
  res
} "Residual for elliptic equation"

```

## Schedule Definition in schedule.ccl:
```
# Schedule definitions for thorn Poisson

STORAGE: potential residual

SCHEDULE Poisson_prepare AT initial
{
  LANG: C
} "Set up initial guess for initial data"

SCHEDULE Poisson_solve AT postinitial
{
  LANG: C
  # OPTIONS: global
} "Calculate uniform charge initial data"

SCHEDULE GROUP Poisson_boundaries
{
} "Apply boundary conditions to initial data"

SCHEDULE Poisson_boundaries_select IN Poisson_boundaries
{
  LANG: C
  OPTIONS: level
  SYNC: potential
} "Select boundary conditions for initial data"

SCHEDULE GROUP ApplyBCs AS Poisson_boundaries_apply IN Poisson_boundaries AFTER Poisson_boundaries_select
{
} "Apply boundary conditions to initial data"

```

## Parameters Definition in param.ccl:
```
# Parameter definitions for thorn Poisson

STRING solver "Name of TATelliptic solver that should be used"
{
  .* :: "must be an activated TATelliptic solver"
} "TATJacobi"

STRING options "Options for the solver"
{
  .* :: "no restriction"
} ""



REAL radius "Radius of uniformly charged sphere"
{
  0:* :: ""
} 1.0

REAL charge "Charge of uniformly charged sphere"
{
  *:* :: ""
} 1.0

```

## Configuration Definition in configuration.ccl:
```
# Configuration definition for thorn Poisson

REQUIRES Boundary Carpet CartGrid3D TATelliptic

```

## Documentation Context:
## README (README):
```
Cactus Code Thorn Poisson
Author(s)    : Erik Schnetter <schnetter@gmail.com>
Maintainer(s): Erik Schnetter <schnetter@gmail.com>
Licence      : GPL
--------------------------------------------------------------------------

1. Purpose

Solve the Poisson equation with the TATelliptic framework.

```

## Documentation (.tex files):
Files: documentation.tex

```tex
=== documentation.tex ===
% *======================================================================*
%  Cactus Thorn template for ThornGuide documentation
%  Author: Ian Kelley
%  Date: Sun Jun 02, 2002
%  $Header$
%
%  Thorn documentation in the latex file doc/documentation.tex
%  will be included in ThornGuides built with the Cactus make system.
%  The scripts employed by the make system automatically include
%  pages about variables, parameters and scheduling parsed from the
%  relevant thorn CCL files.
%
%  This template contains guidelines which help to assure that your
%  documentation will be correctly added to ThornGuides. More
%  information is available in the Cactus UsersGuide.
%
%  Guidelines:
%   - Do not change anything before the line
%       % START CACTUS THORNGUIDE",
%     except for filling in the title, author, date, etc. fields.
%        - Each of these fields should only be on ONE line.
%        - Author names should be separated with a \\ or a comma.
%   - You can define your own macros, but they must appear after
%     the START CACTUS THORNGUIDE line, and must not redefine standard
%     latex commands.
%   - To avoid name clashes with other thorns, 'labels', 'citations',
%     'references', and 'image' names should conform to the following
%     convention:
%       ARRANGEMENT_THORN_LABEL
%     For example, an image wave.eps in the arrangement CactusWave and
%     thorn WaveToyC should be renamed to CactusWave_WaveToyC_wave.eps
%   - Graphics should only be included using the graphicx package.
%     More specifically, with the "\includegraphics" command.  Do
%     not specify any graphic file extensions in your .tex file. This
%     will allow us to create a PDF version of the ThornGuide
%     via pdflatex.
%   - References should be included with the latex "\bibitem" command.
%   - Use \begin{abstract}...\end{abstract} instead of \abstract{...}
%   - Do not use \appendix, instead include any appendices you need as
%     standard sections.
%   - For the benefit of our Perl scripts, and for future extensions,
%     please use simple latex.
%
% *======================================================================*
%
% Example of including a graphic image:
%    \begin{figure}[ht]
% 	\begin{center}
%    	   \includegraphics[width=6cm]{MyArrangement_MyThorn_MyFigure}
% 	\end{center}
% 	\caption{Illustration of this and that}
% 	\label{MyArrangement_MyThorn_MyLabel}
%    \end{figure}
%
% Example of using a label:
%   \label{MyArrangement_MyThorn_MyLabel}
%
% Example of a citation:
%    \cite{MyArrangement_MyThorn_Author99}
%
% Example of including a reference
%   \bibitem{MyArrangement_MyThorn_Author99}
%   {J. Author, {\em The Title of the Book, Journal, or periodical}, 1 (1999),
%   1--16. {\tt http://www.nowhere.com/}}
%
% *======================================================================*

% If you are using CVS use this line to give version information
% $Header$

\documentclass{article}

% Use the Cactus ThornGuide style file
% (Automatically used from Cactus distribution, if you have a
%  thorn without the Cactus Flesh download this from the Cactus
%  homepage at www.cactuscode.org)
\usepackage{../../../../doc/latex/cactus}

\begin{document}

% The author of the documentation
\author{Erik Schnetter \textless schnetter@gmail.com\textgreater}

% The title of the document (not necessarily the name of the Thorn)
\title{Poisson}

% the date your document was last changed, if your document is in CVS,
% please use:
%    \date{$ $Date$ $}
\date{November 25, 2014}

\maketitle

% Do not delete next line
% START CACTUS THORNGUIDE

% Add all definitions used in this documentation here
%   \def\mydef etc

% Add an abstract for this thorn's documentation
\begin{abstract}
  This is an example thorn describing how to use the TATPETSc
  interface to PETSc. It solves the Poisson equation for a spherical
  charge distribution on a uniform grid.
\end{abstract}

% The following sections are suggestive only.
% Remove them or add your own.

\section{Introduction}

PETSc is a well-known library for solving elliptic equations. TATPETSc
is a Cactus thorn that provides a wrapper for calling PETSc to solve
elliptic equations on uniform grids. (TATPETSc currently supports
neither mesh refinement nor multi-block systems.) TATPETSc can solve
both linear and non-linear systems.

\section{Physical System}

Here we solve the Poisson equation
\begin{eqnarray}
  \Delta\Phi(x) &=& \rho(x)
\end{eqnarray}
where the right hand side $\rho$ is given by
\begin{eqnarray}
  \rho(r) & = & \left\{
  \begin{array}{ll}
    Q/V & r\le R \\
    0 & r>R
  \end{array}
  \right.
\end{eqnarray}
for the charge $Q$ and the radius $R$, with $V=4\pi R^3/3$. We use
Dirichlet boundary conditions $\Phi(x)=0$.

\section{Numerical Implementation}

PETSc supports a large number of options to choose solvers. Here we
use PETSc's default settings.

\section{Using This Thorn}

In the example parameter file, we set the parameter
\texttt{TATPETSc::options} to select the following PETSc options:
\begin{itemize}
\item \verb+-snes_atol 1e-8+: set absolute tolerance for residual
\item \verb+-snes_stol 1e-8+: set relative tolerance for residual
\item \verb+-snes_monitor+: output progress information at each
  iteration of the non-linear solver
\item \verb+-ksp_monitor+: output progress information at each
  iteration of the linear (Krylov subspace) solver
\end{itemize}

\subsection{Examples}

The solution (the potential $\Phi(x)$) is stored in the grid function
\texttt{potential}, the residual (a measure for the error) in the grid
function \texttt{residual}.

% Do not delete next line
% END CACTUS THORNGUIDE

\end{document}

```



## Related Code Context:
```
make.code.defn:
```
# Main make.code.defn file for thorn Poisson

# Source files in this directory
SRCS = uniform_charge.c

# Subdirectories containing source files
SUBDIRS = 


```


```

## Instructions:
Generate only the complete C/C++ source code for `uniform_charge.c`. Include necessary headers, functions, and follow EinsteinToolkit conventions. 

Key EinsteinToolkit patterns to follow:
- Use DECLARE_CCTK_ARGUMENTS and DECLARE_CCTK_PARAMETERS macros
- Access grid variables through existing framework variables (avoid redeclaring existing grid vars like 'r')
- Follow proper CCTK function signatures and conventions
- Use CCTK_GFINDEX3D for array indexing
- Include appropriate error handling with CCTK_WARN

IMPORTANT: Return ONLY the raw C/C++ source code. Do NOT use markdown code blocks (```c or ```). Do NOT include any explanations, comments outside the code, or formatting. Just return the plain C/C++ source code that can be directly saved to a .c file.

Code: