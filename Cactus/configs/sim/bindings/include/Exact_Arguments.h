/*@@
   @header  Exact_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn Exact
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_EXACT_PRIVATE_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,slicet,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp1t,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp1x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp1y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp1z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp2t,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp2x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp2y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicetmp2z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicex,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicey,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,slicez,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define EXACT_PRIVATE_FARGUMENTS \
slicet,slicetmp1t,slicetmp1x,slicetmp1y,slicetmp1z,slicetmp2t,slicetmp2x,slicetmp2y,slicetmp2z,slicex,slicey,slicez

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_EXACT_PRIVATE_CARGUMENTS \
static int cctki_vi_slicet = -100; \
if (cctki_vi_slicet == -100) cctki_vi_slicet = CCTK_VarIndex("Exact::slicet"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicet, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicet)); \
static int cctki_vi_slicetmp1t = -100; \
if (cctki_vi_slicetmp1t == -100) cctki_vi_slicetmp1t = CCTK_VarIndex("Exact::slicetmp1t"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp1t, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp1t)); \
static int cctki_vi_slicetmp1x = -100; \
if (cctki_vi_slicetmp1x == -100) cctki_vi_slicetmp1x = CCTK_VarIndex("Exact::slicetmp1x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp1x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp1x)); \
static int cctki_vi_slicetmp1y = -100; \
if (cctki_vi_slicetmp1y == -100) cctki_vi_slicetmp1y = CCTK_VarIndex("Exact::slicetmp1y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp1y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp1y)); \
static int cctki_vi_slicetmp1z = -100; \
if (cctki_vi_slicetmp1z == -100) cctki_vi_slicetmp1z = CCTK_VarIndex("Exact::slicetmp1z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp1z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp1z)); \
static int cctki_vi_slicetmp2t = -100; \
if (cctki_vi_slicetmp2t == -100) cctki_vi_slicetmp2t = CCTK_VarIndex("Exact::slicetmp2t"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp2t, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp2t)); \
static int cctki_vi_slicetmp2x = -100; \
if (cctki_vi_slicetmp2x == -100) cctki_vi_slicetmp2x = CCTK_VarIndex("Exact::slicetmp2x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp2x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp2x)); \
static int cctki_vi_slicetmp2y = -100; \
if (cctki_vi_slicetmp2y == -100) cctki_vi_slicetmp2y = CCTK_VarIndex("Exact::slicetmp2y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp2y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp2y)); \
static int cctki_vi_slicetmp2z = -100; \
if (cctki_vi_slicetmp2z == -100) cctki_vi_slicetmp2z = CCTK_VarIndex("Exact::slicetmp2z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicetmp2z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicetmp2z)); \
static int cctki_vi_slicex = -100; \
if (cctki_vi_slicex == -100) cctki_vi_slicex = CCTK_VarIndex("Exact::slicex"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicex, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicex)); \
static int cctki_vi_slicey = -100; \
if (cctki_vi_slicey == -100) cctki_vi_slicey = CCTK_VarIndex("Exact::slicey"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicey, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicey)); \
static int cctki_vi_slicez = -100; \
if (cctki_vi_slicez == -100) cctki_vi_slicez = CCTK_VarIndex("Exact::slicez"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, slicez, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_slicez));

#define DECLARE_EXACT_PRIVATE_C2F \
static int CCTKARGNUM_slicet = -1; \
static int CCTKGROUPNUM_Exact_slice = -1; \
static int CCTKARGNUM_slicetmp1t = -1; \
static int CCTKGROUPNUM_Exact_slicetemp1 = -1; \
static int CCTKARGNUM_slicetmp1x = -1; \
static int CCTKARGNUM_slicetmp1y = -1; \
static int CCTKARGNUM_slicetmp1z = -1; \
static int CCTKARGNUM_slicetmp2t = -1; \
static int CCTKGROUPNUM_Exact_slicetemp2 = -1; \
static int CCTKARGNUM_slicetmp2x = -1; \
static int CCTKARGNUM_slicetmp2y = -1; \
static int CCTKARGNUM_slicetmp2z = -1; \
static int CCTKARGNUM_slicex = -1; \
static int CCTKARGNUM_slicey = -1; \
static int CCTKARGNUM_slicez = -1;

#define INITIALISE_EXACT_PRIVATE_C2F \
if(CCTKARGNUM_slicet == -1) CCTKARGNUM_slicet = CCTK_VarIndex("Exact::slicet"); \
if(CCTKGROUPNUM_Exact_slice == -1) CCTKGROUPNUM_Exact_slice = CCTK_GroupIndex("Exact::Exact_slice"); \
if(CCTKARGNUM_slicetmp1t == -1) CCTKARGNUM_slicetmp1t = CCTK_VarIndex("Exact::slicetmp1t"); \
if(CCTKGROUPNUM_Exact_slicetemp1 == -1) CCTKGROUPNUM_Exact_slicetemp1 = CCTK_GroupIndex("Exact::Exact_slicetemp1"); \
if(CCTKARGNUM_slicetmp1x == -1) CCTKARGNUM_slicetmp1x = CCTK_VarIndex("Exact::slicetmp1x"); \
if(CCTKARGNUM_slicetmp1y == -1) CCTKARGNUM_slicetmp1y = CCTK_VarIndex("Exact::slicetmp1y"); \
if(CCTKARGNUM_slicetmp1z == -1) CCTKARGNUM_slicetmp1z = CCTK_VarIndex("Exact::slicetmp1z"); \
if(CCTKARGNUM_slicetmp2t == -1) CCTKARGNUM_slicetmp2t = CCTK_VarIndex("Exact::slicetmp2t"); \
if(CCTKGROUPNUM_Exact_slicetemp2 == -1) CCTKGROUPNUM_Exact_slicetemp2 = CCTK_GroupIndex("Exact::Exact_slicetemp2"); \
if(CCTKARGNUM_slicetmp2x == -1) CCTKARGNUM_slicetmp2x = CCTK_VarIndex("Exact::slicetmp2x"); \
if(CCTKARGNUM_slicetmp2y == -1) CCTKARGNUM_slicetmp2y = CCTK_VarIndex("Exact::slicetmp2y"); \
if(CCTKARGNUM_slicetmp2z == -1) CCTKARGNUM_slicetmp2z = CCTK_VarIndex("Exact::slicetmp2z"); \
if(CCTKARGNUM_slicex == -1) CCTKARGNUM_slicex = CCTK_VarIndex("Exact::slicex"); \
if(CCTKARGNUM_slicey == -1) CCTKARGNUM_slicey = CCTK_VarIndex("Exact::slicey"); \
if(CCTKARGNUM_slicez == -1) CCTKARGNUM_slicez = CCTK_VarIndex("Exact::slicez");

#define EXACT_PRIVATE_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_EXACT_PRIVATE_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(slicet, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp1t, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp1x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp1y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp1z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp2t, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp2x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp2y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicetmp2z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicex, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicey, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(slicez, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_EXACT_PROTECTED_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,Bertotti___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_generalized___p1,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_generalized___p2,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_like___q,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___R0,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___epsilon0,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___kappa,)&&\
CCTK_DECLARE(CCTK_REAL,Schwarzschild_Lemaitre___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Schwarzschild_Lemaitre___mass,)&&\
CCTK_DECLARE(CCTK_REAL,anti_de_Sitter_Lambda___scale,)&&\
CCTK_DECLARE(CCTK_REAL,constant_density_star___mass,)&&\
CCTK_DECLARE(CCTK_REAL,constant_density_star___radius,)&&\
CCTK_DECLARE(CCTK_REAL,de_Sitter_Lambda___scale,)&&\
CCTK_DECLARE(CCTK_REAL,de_Sitter___scale,)&&\
CCTK_DECLARE(CCTK_INT,decoded_exact_model,)&&\
CCTK_DECLARE(CCTK_REAL,eT2tt,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2tx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2ty,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2tz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2yy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2yz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2zz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,stress_energy_2_state,)&&\


#define EXACT_PROTECTED_FARGUMENTS \
Bertotti___Lambda,Kasner_generalized___p1,Kasner_generalized___p2,Kasner_like___q,Lemaitre___Lambda,Lemaitre___R0,Lemaitre___epsilon0,Lemaitre___kappa,Schwarzschild_Lemaitre___Lambda,Schwarzschild_Lemaitre___mass,anti_de_Sitter_Lambda___scale,constant_density_star___mass,constant_density_star___radius,de_Sitter_Lambda___scale,de_Sitter___scale,decoded_exact_model,eT2tt,eT2tx,eT2ty,eT2tz,eT2xx,eT2xy,eT2xz,eT2yy,eT2yz,eT2zz,stress_energy_2_state

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_EXACT_PROTECTED_CARGUMENTS \
static int cctki_vi_Bertotti___Lambda = -100; \
if (cctki_vi_Bertotti___Lambda == -100) cctki_vi_Bertotti___Lambda = CCTK_VarIndex("exact::Bertotti___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Bertotti___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Bertotti___Lambda)); \
static int cctki_vi_Kasner_generalized___p1 = -100; \
if (cctki_vi_Kasner_generalized___p1 == -100) cctki_vi_Kasner_generalized___p1 = CCTK_VarIndex("exact::Kasner_generalized___p1"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_generalized___p1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_generalized___p1)); \
static int cctki_vi_Kasner_generalized___p2 = -100; \
if (cctki_vi_Kasner_generalized___p2 == -100) cctki_vi_Kasner_generalized___p2 = CCTK_VarIndex("exact::Kasner_generalized___p2"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_generalized___p2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_generalized___p2)); \
static int cctki_vi_Kasner_like___q = -100; \
if (cctki_vi_Kasner_like___q == -100) cctki_vi_Kasner_like___q = CCTK_VarIndex("exact::Kasner_like___q"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_like___q, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_like___q)); \
static int cctki_vi_Lemaitre___Lambda = -100; \
if (cctki_vi_Lemaitre___Lambda == -100) cctki_vi_Lemaitre___Lambda = CCTK_VarIndex("exact::Lemaitre___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___Lambda)); \
static int cctki_vi_Lemaitre___R0 = -100; \
if (cctki_vi_Lemaitre___R0 == -100) cctki_vi_Lemaitre___R0 = CCTK_VarIndex("exact::Lemaitre___R0"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___R0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___R0)); \
static int cctki_vi_Lemaitre___epsilon0 = -100; \
if (cctki_vi_Lemaitre___epsilon0 == -100) cctki_vi_Lemaitre___epsilon0 = CCTK_VarIndex("exact::Lemaitre___epsilon0"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___epsilon0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___epsilon0)); \
static int cctki_vi_Lemaitre___kappa = -100; \
if (cctki_vi_Lemaitre___kappa == -100) cctki_vi_Lemaitre___kappa = CCTK_VarIndex("exact::Lemaitre___kappa"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___kappa, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___kappa)); \
static int cctki_vi_Schwarzschild_Lemaitre___Lambda = -100; \
if (cctki_vi_Schwarzschild_Lemaitre___Lambda == -100) cctki_vi_Schwarzschild_Lemaitre___Lambda = CCTK_VarIndex("exact::Schwarzschild_Lemaitre___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Schwarzschild_Lemaitre___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Schwarzschild_Lemaitre___Lambda)); \
static int cctki_vi_Schwarzschild_Lemaitre___mass = -100; \
if (cctki_vi_Schwarzschild_Lemaitre___mass == -100) cctki_vi_Schwarzschild_Lemaitre___mass = CCTK_VarIndex("exact::Schwarzschild_Lemaitre___mass"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Schwarzschild_Lemaitre___mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Schwarzschild_Lemaitre___mass)); \
static int cctki_vi_anti_de_Sitter_Lambda___scale = -100; \
if (cctki_vi_anti_de_Sitter_Lambda___scale == -100) cctki_vi_anti_de_Sitter_Lambda___scale = CCTK_VarIndex("exact::anti_de_Sitter_Lambda___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, anti_de_Sitter_Lambda___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_anti_de_Sitter_Lambda___scale)); \
static int cctki_vi_constant_density_star___mass = -100; \
if (cctki_vi_constant_density_star___mass == -100) cctki_vi_constant_density_star___mass = CCTK_VarIndex("exact::constant_density_star___mass"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constant_density_star___mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constant_density_star___mass)); \
static int cctki_vi_constant_density_star___radius = -100; \
if (cctki_vi_constant_density_star___radius == -100) cctki_vi_constant_density_star___radius = CCTK_VarIndex("exact::constant_density_star___radius"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constant_density_star___radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constant_density_star___radius)); \
static int cctki_vi_de_Sitter_Lambda___scale = -100; \
if (cctki_vi_de_Sitter_Lambda___scale == -100) cctki_vi_de_Sitter_Lambda___scale = CCTK_VarIndex("exact::de_Sitter_Lambda___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, de_Sitter_Lambda___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_de_Sitter_Lambda___scale)); \
static int cctki_vi_de_Sitter___scale = -100; \
if (cctki_vi_de_Sitter___scale == -100) cctki_vi_de_Sitter___scale = CCTK_VarIndex("exact::de_Sitter___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, de_Sitter___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_de_Sitter___scale)); \
static int cctki_vi_decoded_exact_model = -100; \
if (cctki_vi_decoded_exact_model == -100) cctki_vi_decoded_exact_model = CCTK_VarIndex("exact::decoded_exact_model"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, decoded_exact_model, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_decoded_exact_model)); \
static int cctki_vi_eT2tt = -100; \
if (cctki_vi_eT2tt == -100) cctki_vi_eT2tt = CCTK_VarIndex("TMUNUBASE::eT2tt"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tt, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tt)); \
static int cctki_vi_eT2tx = -100; \
if (cctki_vi_eT2tx == -100) cctki_vi_eT2tx = CCTK_VarIndex("TMUNUBASE::eT2tx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tx)); \
static int cctki_vi_eT2ty = -100; \
if (cctki_vi_eT2ty == -100) cctki_vi_eT2ty = CCTK_VarIndex("TMUNUBASE::eT2ty"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2ty, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2ty)); \
static int cctki_vi_eT2tz = -100; \
if (cctki_vi_eT2tz == -100) cctki_vi_eT2tz = CCTK_VarIndex("TMUNUBASE::eT2tz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tz)); \
static int cctki_vi_eT2xx = -100; \
if (cctki_vi_eT2xx == -100) cctki_vi_eT2xx = CCTK_VarIndex("TMUNUBASE::eT2xx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xx)); \
static int cctki_vi_eT2xy = -100; \
if (cctki_vi_eT2xy == -100) cctki_vi_eT2xy = CCTK_VarIndex("TMUNUBASE::eT2xy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xy)); \
static int cctki_vi_eT2xz = -100; \
if (cctki_vi_eT2xz == -100) cctki_vi_eT2xz = CCTK_VarIndex("TMUNUBASE::eT2xz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xz)); \
static int cctki_vi_eT2yy = -100; \
if (cctki_vi_eT2yy == -100) cctki_vi_eT2yy = CCTK_VarIndex("TMUNUBASE::eT2yy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2yy)); \
static int cctki_vi_eT2yz = -100; \
if (cctki_vi_eT2yz == -100) cctki_vi_eT2yz = CCTK_VarIndex("TMUNUBASE::eT2yz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2yz)); \
static int cctki_vi_eT2zz = -100; \
if (cctki_vi_eT2zz == -100) cctki_vi_eT2zz = CCTK_VarIndex("TMUNUBASE::eT2zz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2zz)); \
static int cctki_vi_stress_energy_2_state = -100; \
if (cctki_vi_stress_energy_2_state == -100) cctki_vi_stress_energy_2_state = CCTK_VarIndex("TMUNUBASE::stress_energy_2_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, stress_energy_2_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_stress_energy_2_state));

#define DECLARE_EXACT_PROTECTED_C2F \
static int CCTKARGNUM_Bertotti___Lambda = -1; \
static int CCTKGROUPNUM_Exact_pars_real = -1; \
static int CCTKARGNUM_Kasner_generalized___p1 = -1; \
static int CCTKARGNUM_Kasner_generalized___p2 = -1; \
static int CCTKARGNUM_Kasner_like___q = -1; \
static int CCTKARGNUM_Lemaitre___Lambda = -1; \
static int CCTKARGNUM_Lemaitre___R0 = -1; \
static int CCTKARGNUM_Lemaitre___epsilon0 = -1; \
static int CCTKARGNUM_Lemaitre___kappa = -1; \
static int CCTKARGNUM_Schwarzschild_Lemaitre___Lambda = -1; \
static int CCTKARGNUM_Schwarzschild_Lemaitre___mass = -1; \
static int CCTKARGNUM_anti_de_Sitter_Lambda___scale = -1; \
static int CCTKARGNUM_constant_density_star___mass = -1; \
static int CCTKARGNUM_constant_density_star___radius = -1; \
static int CCTKARGNUM_de_Sitter_Lambda___scale = -1; \
static int CCTKARGNUM_de_Sitter___scale = -1; \
static int CCTKARGNUM_decoded_exact_model = -1; \
static int CCTKGROUPNUM_Exact_pars_int = -1; \
static int CCTKARGNUM_eT2tt = -1; \
static int CCTKGROUPNUM_stress_energy_2_scalar = -1; \
static int CCTKARGNUM_eT2tx = -1; \
static int CCTKGROUPNUM_stress_energy_2_vector = -1; \
static int CCTKARGNUM_eT2ty = -1; \
static int CCTKARGNUM_eT2tz = -1; \
static int CCTKARGNUM_eT2xx = -1; \
static int CCTKGROUPNUM_stress_energy_2_tensor = -1; \
static int CCTKARGNUM_eT2xy = -1; \
static int CCTKARGNUM_eT2xz = -1; \
static int CCTKARGNUM_eT2yy = -1; \
static int CCTKARGNUM_eT2yz = -1; \
static int CCTKARGNUM_eT2zz = -1; \
static int CCTKARGNUM_stress_energy_2_state = -1; \
static int CCTKGROUPNUM_stress_energy_2_state = -1;

#define INITIALISE_EXACT_PROTECTED_C2F \
if(CCTKARGNUM_Bertotti___Lambda == -1) CCTKARGNUM_Bertotti___Lambda = CCTK_VarIndex("exact::Bertotti___Lambda"); \
if(CCTKGROUPNUM_Exact_pars_real == -1) CCTKGROUPNUM_Exact_pars_real = CCTK_GroupIndex("exact::Exact_pars_real"); \
if(CCTKARGNUM_Kasner_generalized___p1 == -1) CCTKARGNUM_Kasner_generalized___p1 = CCTK_VarIndex("exact::Kasner_generalized___p1"); \
if(CCTKARGNUM_Kasner_generalized___p2 == -1) CCTKARGNUM_Kasner_generalized___p2 = CCTK_VarIndex("exact::Kasner_generalized___p2"); \
if(CCTKARGNUM_Kasner_like___q == -1) CCTKARGNUM_Kasner_like___q = CCTK_VarIndex("exact::Kasner_like___q"); \
if(CCTKARGNUM_Lemaitre___Lambda == -1) CCTKARGNUM_Lemaitre___Lambda = CCTK_VarIndex("exact::Lemaitre___Lambda"); \
if(CCTKARGNUM_Lemaitre___R0 == -1) CCTKARGNUM_Lemaitre___R0 = CCTK_VarIndex("exact::Lemaitre___R0"); \
if(CCTKARGNUM_Lemaitre___epsilon0 == -1) CCTKARGNUM_Lemaitre___epsilon0 = CCTK_VarIndex("exact::Lemaitre___epsilon0"); \
if(CCTKARGNUM_Lemaitre___kappa == -1) CCTKARGNUM_Lemaitre___kappa = CCTK_VarIndex("exact::Lemaitre___kappa"); \
if(CCTKARGNUM_Schwarzschild_Lemaitre___Lambda == -1) CCTKARGNUM_Schwarzschild_Lemaitre___Lambda = CCTK_VarIndex("exact::Schwarzschild_Lemaitre___Lambda"); \
if(CCTKARGNUM_Schwarzschild_Lemaitre___mass == -1) CCTKARGNUM_Schwarzschild_Lemaitre___mass = CCTK_VarIndex("exact::Schwarzschild_Lemaitre___mass"); \
if(CCTKARGNUM_anti_de_Sitter_Lambda___scale == -1) CCTKARGNUM_anti_de_Sitter_Lambda___scale = CCTK_VarIndex("exact::anti_de_Sitter_Lambda___scale"); \
if(CCTKARGNUM_constant_density_star___mass == -1) CCTKARGNUM_constant_density_star___mass = CCTK_VarIndex("exact::constant_density_star___mass"); \
if(CCTKARGNUM_constant_density_star___radius == -1) CCTKARGNUM_constant_density_star___radius = CCTK_VarIndex("exact::constant_density_star___radius"); \
if(CCTKARGNUM_de_Sitter_Lambda___scale == -1) CCTKARGNUM_de_Sitter_Lambda___scale = CCTK_VarIndex("exact::de_Sitter_Lambda___scale"); \
if(CCTKARGNUM_de_Sitter___scale == -1) CCTKARGNUM_de_Sitter___scale = CCTK_VarIndex("exact::de_Sitter___scale"); \
if(CCTKARGNUM_decoded_exact_model == -1) CCTKARGNUM_decoded_exact_model = CCTK_VarIndex("exact::decoded_exact_model"); \
if(CCTKGROUPNUM_Exact_pars_int == -1) CCTKGROUPNUM_Exact_pars_int = CCTK_GroupIndex("exact::Exact_pars_int"); \
if(CCTKARGNUM_eT2tt == -1) CCTKARGNUM_eT2tt = CCTK_VarIndex("TMUNUBASE::eT2tt"); \
if(CCTKGROUPNUM_stress_energy_2_scalar == -1) CCTKGROUPNUM_stress_energy_2_scalar = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_scalar"); \
if(CCTKARGNUM_eT2tx == -1) CCTKARGNUM_eT2tx = CCTK_VarIndex("TMUNUBASE::eT2tx"); \
if(CCTKGROUPNUM_stress_energy_2_vector == -1) CCTKGROUPNUM_stress_energy_2_vector = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_vector"); \
if(CCTKARGNUM_eT2ty == -1) CCTKARGNUM_eT2ty = CCTK_VarIndex("TMUNUBASE::eT2ty"); \
if(CCTKARGNUM_eT2tz == -1) CCTKARGNUM_eT2tz = CCTK_VarIndex("TMUNUBASE::eT2tz"); \
if(CCTKARGNUM_eT2xx == -1) CCTKARGNUM_eT2xx = CCTK_VarIndex("TMUNUBASE::eT2xx"); \
if(CCTKGROUPNUM_stress_energy_2_tensor == -1) CCTKGROUPNUM_stress_energy_2_tensor = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_tensor"); \
if(CCTKARGNUM_eT2xy == -1) CCTKARGNUM_eT2xy = CCTK_VarIndex("TMUNUBASE::eT2xy"); \
if(CCTKARGNUM_eT2xz == -1) CCTKARGNUM_eT2xz = CCTK_VarIndex("TMUNUBASE::eT2xz"); \
if(CCTKARGNUM_eT2yy == -1) CCTKARGNUM_eT2yy = CCTK_VarIndex("TMUNUBASE::eT2yy"); \
if(CCTKARGNUM_eT2yz == -1) CCTKARGNUM_eT2yz = CCTK_VarIndex("TMUNUBASE::eT2yz"); \
if(CCTKARGNUM_eT2zz == -1) CCTKARGNUM_eT2zz = CCTK_VarIndex("TMUNUBASE::eT2zz"); \
if(CCTKARGNUM_stress_energy_2_state == -1) CCTKARGNUM_stress_energy_2_state = CCTK_VarIndex("TMUNUBASE::stress_energy_2_state"); \
if(CCTKGROUPNUM_stress_energy_2_state == -1) CCTKGROUPNUM_stress_energy_2_state = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_state");

#define EXACT_PROTECTED_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *

#define PASS_EXACT_PROTECTED_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(Bertotti___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_generalized___p1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_generalized___p2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_like___q, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___R0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___epsilon0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___kappa, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Schwarzschild_Lemaitre___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Schwarzschild_Lemaitre___mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(anti_de_Sitter_Lambda___scale, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constant_density_star___mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constant_density_star___radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(de_Sitter_Lambda___scale, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(de_Sitter___scale, 0)),\
(CCTK_INT *)(PASS_REFERENCE(decoded_exact_model, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tt, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2ty, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2zz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(stress_energy_2_state, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_EXACT_PUBLIC_FARGUMENTS \
CCTK_DECLARE(CCTK_INT,active_slicing_handle,)&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_INT,conformal_state,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psix,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psizz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define EXACT_PUBLIC_FARGUMENTS \
active_slicing_handle,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,conformal_state,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,psi,psix,psixx,psixy,psixz,psiy,psiyy,psiyz,psiz,psizz,r,shift_state,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_EXACT_PUBLIC_CARGUMENTS \
static int cctki_vi_active_slicing_handle = -100; \
if (cctki_vi_active_slicing_handle == -100) cctki_vi_active_slicing_handle = CCTK_VarIndex("COORDGAUGE::active_slicing_handle"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, active_slicing_handle, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_active_slicing_handle)); \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_conformal_state = -100; \
if (cctki_vi_conformal_state == -100) cctki_vi_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, conformal_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_conformal_state)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_psi = -100; \
if (cctki_vi_psi == -100) cctki_vi_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psi)); \
static int cctki_vi_psix = -100; \
if (cctki_vi_psix == -100) cctki_vi_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psix, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psix)); \
static int cctki_vi_psixx = -100; \
if (cctki_vi_psixx == -100) cctki_vi_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixx)); \
static int cctki_vi_psixy = -100; \
if (cctki_vi_psixy == -100) cctki_vi_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixy)); \
static int cctki_vi_psixz = -100; \
if (cctki_vi_psixz == -100) cctki_vi_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixz)); \
static int cctki_vi_psiy = -100; \
if (cctki_vi_psiy == -100) cctki_vi_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiy)); \
static int cctki_vi_psiyy = -100; \
if (cctki_vi_psiyy == -100) cctki_vi_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyy)); \
static int cctki_vi_psiyz = -100; \
if (cctki_vi_psiyz == -100) cctki_vi_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyz)); \
static int cctki_vi_psiz = -100; \
if (cctki_vi_psiz == -100) cctki_vi_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiz)); \
static int cctki_vi_psizz = -100; \
if (cctki_vi_psizz == -100) cctki_vi_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psizz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psizz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_EXACT_PUBLIC_C2F \
static int CCTKARGNUM_active_slicing_handle = -1; \
static int CCTKGROUPNUM_slicing_flags = -1; \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_conformal_state = -1; \
static int CCTKGROUPNUM_conformal_state = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKGROUPNUM_confac = -1; \
static int CCTKARGNUM_psix = -1; \
static int CCTKGROUPNUM_confac_1derivs = -1; \
static int CCTKARGNUM_psixx = -1; \
static int CCTKGROUPNUM_confac_2derivs = -1; \
static int CCTKARGNUM_psixy = -1; \
static int CCTKARGNUM_psixz = -1; \
static int CCTKARGNUM_psiy = -1; \
static int CCTKARGNUM_psiyy = -1; \
static int CCTKARGNUM_psiyz = -1; \
static int CCTKARGNUM_psiz = -1; \
static int CCTKARGNUM_psizz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_EXACT_PUBLIC_C2F \
if(CCTKARGNUM_active_slicing_handle == -1) CCTKARGNUM_active_slicing_handle = CCTK_VarIndex("COORDGAUGE::active_slicing_handle"); \
if(CCTKGROUPNUM_slicing_flags == -1) CCTKGROUPNUM_slicing_flags = CCTK_GroupIndex("COORDGAUGE::slicing_flags"); \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_conformal_state == -1) CCTKARGNUM_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKGROUPNUM_conformal_state == -1) CCTKGROUPNUM_conformal_state = CCTK_GroupIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
if(CCTKGROUPNUM_confac == -1) CCTKGROUPNUM_confac = CCTK_GroupIndex("STATICCONFORMAL::confac"); \
if(CCTKARGNUM_psix == -1) CCTKARGNUM_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
if(CCTKGROUPNUM_confac_1derivs == -1) CCTKGROUPNUM_confac_1derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_1derivs"); \
if(CCTKARGNUM_psixx == -1) CCTKARGNUM_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
if(CCTKGROUPNUM_confac_2derivs == -1) CCTKGROUPNUM_confac_2derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_2derivs"); \
if(CCTKARGNUM_psixy == -1) CCTKARGNUM_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
if(CCTKARGNUM_psixz == -1) CCTKARGNUM_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
if(CCTKARGNUM_psiy == -1) CCTKARGNUM_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
if(CCTKARGNUM_psiyy == -1) CCTKARGNUM_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
if(CCTKARGNUM_psiyz == -1) CCTKARGNUM_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
if(CCTKARGNUM_psiz == -1) CCTKARGNUM_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
if(CCTKARGNUM_psizz == -1) CCTKARGNUM_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define EXACT_PUBLIC_C2F_PROTO \


#define PASS_EXACT_PUBLIC_C2F(GH) \
(CCTK_INT *)(PASS_REFERENCE(active_slicing_handle, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(conformal_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psix, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psizz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define EXACT_FARGUMENTS _CCTK_FARGUMENTS, EXACT_PRIVATE_FARGUMENTS, EXACT_PROTECTED_FARGUMENTS, EXACT_PUBLIC_FARGUMENTS

#define DECLARE_EXACT_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_EXACT_PRIVATE_FARGUMENTS DECLARE_EXACT_PROTECTED_FARGUMENTS DECLARE_EXACT_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_EXACT_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_EXACT_PRIVATE_CARGUMENTS DECLARE_EXACT_PROTECTED_CARGUMENTS DECLARE_EXACT_PUBLIC_CARGUMENTS

#define EXACT_C2F_PROTO _CCTK_C2F_PROTO, EXACT_PRIVATE_C2F_PROTO, EXACT_PROTECTED_C2F_PROTO, EXACT_PUBLIC_C2F_PROTO

#define PASS_EXACT_C2F(GH) _PASS_CCTK_C2F(GH), PASS_EXACT_PRIVATE_C2F(GH), PASS_EXACT_PROTECTED_C2F(GH), PASS_EXACT_PUBLIC_C2F(GH)

#define DECLARE_EXACT_C2F _DECLARE_CCTK_C2F DECLARE_EXACT_PRIVATE_C2F DECLARE_EXACT_PROTECTED_C2F DECLARE_EXACT_PUBLIC_C2F

#define INITIALISE_EXACT_C2F _INITIALISE_CCTK_C2F INITIALISE_EXACT_PRIVATE_C2F INITIALISE_EXACT_PROTECTED_C2F INITIALISE_EXACT_PUBLIC_C2F

#define EXACT_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
