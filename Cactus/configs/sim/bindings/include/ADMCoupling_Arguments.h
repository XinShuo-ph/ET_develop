/*@@
   @header  ADMCoupling_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn ADMCoupling
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_ADMCOUPLING_PRIVATE_FARGUMENTS \


#define ADMCOUPLING_PRIVATE_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ADMCOUPLING_PRIVATE_CARGUMENTS \


#define DECLARE_ADMCOUPLING_PRIVATE_C2F \


#define INITIALISE_ADMCOUPLING_PRIVATE_C2F \


#define ADMCOUPLING_PRIVATE_C2F_PROTO \


#define PASS_ADMCOUPLING_PRIVATE_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_ADMCOUPLING_PROTECTED_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,Bertotti___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_generalized___p1,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_generalized___p2,)&&\
CCTK_DECLARE(CCTK_REAL,Kasner_like___q,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___R0,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___epsilon0,)&&\
CCTK_DECLARE(CCTK_REAL,Lemaitre___kappa,)&&\
CCTK_DECLARE(CCTK_REAL,Schwarzschild_Lemaitre___Lambda,)&&\
CCTK_DECLARE(CCTK_REAL,Schwarzschild_Lemaitre___mass,)&&\
CCTK_DECLARE(CCTK_REAL,anti_de_Sitter_Lambda___scale,)&&\
CCTK_DECLARE(CCTK_REAL,constant_density_star___mass,)&&\
CCTK_DECLARE(CCTK_REAL,constant_density_star___radius,)&&\
CCTK_DECLARE(CCTK_REAL,de_Sitter_Lambda___scale,)&&\
CCTK_DECLARE(CCTK_REAL,de_Sitter___scale,)&&\
CCTK_DECLARE(CCTK_INT,decoded_exact_model,)&&\
CCTK_DECLARE(CCTK_REAL,eT2tt,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2tx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2ty,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2tz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2xz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2yy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2yz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eT2zz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,stress_energy_2_state,)&&\


#define ADMCOUPLING_PROTECTED_FARGUMENTS \
Bertotti___Lambda,Kasner_generalized___p1,Kasner_generalized___p2,Kasner_like___q,Lemaitre___Lambda,Lemaitre___R0,Lemaitre___epsilon0,Lemaitre___kappa,Schwarzschild_Lemaitre___Lambda,Schwarzschild_Lemaitre___mass,anti_de_Sitter_Lambda___scale,constant_density_star___mass,constant_density_star___radius,de_Sitter_Lambda___scale,de_Sitter___scale,decoded_exact_model,eT2tt,eT2tx,eT2ty,eT2tz,eT2xx,eT2xy,eT2xz,eT2yy,eT2yz,eT2zz,stress_energy_2_state

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ADMCOUPLING_PROTECTED_CARGUMENTS \
static int cctki_vi_Bertotti___Lambda = -100; \
if (cctki_vi_Bertotti___Lambda == -100) cctki_vi_Bertotti___Lambda = CCTK_VarIndex("EXACT::Bertotti___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Bertotti___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Bertotti___Lambda)); \
static int cctki_vi_Kasner_generalized___p1 = -100; \
if (cctki_vi_Kasner_generalized___p1 == -100) cctki_vi_Kasner_generalized___p1 = CCTK_VarIndex("EXACT::Kasner_generalized___p1"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_generalized___p1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_generalized___p1)); \
static int cctki_vi_Kasner_generalized___p2 = -100; \
if (cctki_vi_Kasner_generalized___p2 == -100) cctki_vi_Kasner_generalized___p2 = CCTK_VarIndex("EXACT::Kasner_generalized___p2"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_generalized___p2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_generalized___p2)); \
static int cctki_vi_Kasner_like___q = -100; \
if (cctki_vi_Kasner_like___q == -100) cctki_vi_Kasner_like___q = CCTK_VarIndex("EXACT::Kasner_like___q"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Kasner_like___q, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Kasner_like___q)); \
static int cctki_vi_Lemaitre___Lambda = -100; \
if (cctki_vi_Lemaitre___Lambda == -100) cctki_vi_Lemaitre___Lambda = CCTK_VarIndex("EXACT::Lemaitre___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___Lambda)); \
static int cctki_vi_Lemaitre___R0 = -100; \
if (cctki_vi_Lemaitre___R0 == -100) cctki_vi_Lemaitre___R0 = CCTK_VarIndex("EXACT::Lemaitre___R0"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___R0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___R0)); \
static int cctki_vi_Lemaitre___epsilon0 = -100; \
if (cctki_vi_Lemaitre___epsilon0 == -100) cctki_vi_Lemaitre___epsilon0 = CCTK_VarIndex("EXACT::Lemaitre___epsilon0"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___epsilon0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___epsilon0)); \
static int cctki_vi_Lemaitre___kappa = -100; \
if (cctki_vi_Lemaitre___kappa == -100) cctki_vi_Lemaitre___kappa = CCTK_VarIndex("EXACT::Lemaitre___kappa"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Lemaitre___kappa, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Lemaitre___kappa)); \
static int cctki_vi_Schwarzschild_Lemaitre___Lambda = -100; \
if (cctki_vi_Schwarzschild_Lemaitre___Lambda == -100) cctki_vi_Schwarzschild_Lemaitre___Lambda = CCTK_VarIndex("EXACT::Schwarzschild_Lemaitre___Lambda"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Schwarzschild_Lemaitre___Lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Schwarzschild_Lemaitre___Lambda)); \
static int cctki_vi_Schwarzschild_Lemaitre___mass = -100; \
if (cctki_vi_Schwarzschild_Lemaitre___mass == -100) cctki_vi_Schwarzschild_Lemaitre___mass = CCTK_VarIndex("EXACT::Schwarzschild_Lemaitre___mass"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Schwarzschild_Lemaitre___mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Schwarzschild_Lemaitre___mass)); \
static int cctki_vi_anti_de_Sitter_Lambda___scale = -100; \
if (cctki_vi_anti_de_Sitter_Lambda___scale == -100) cctki_vi_anti_de_Sitter_Lambda___scale = CCTK_VarIndex("EXACT::anti_de_Sitter_Lambda___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, anti_de_Sitter_Lambda___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_anti_de_Sitter_Lambda___scale)); \
static int cctki_vi_constant_density_star___mass = -100; \
if (cctki_vi_constant_density_star___mass == -100) cctki_vi_constant_density_star___mass = CCTK_VarIndex("EXACT::constant_density_star___mass"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constant_density_star___mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constant_density_star___mass)); \
static int cctki_vi_constant_density_star___radius = -100; \
if (cctki_vi_constant_density_star___radius == -100) cctki_vi_constant_density_star___radius = CCTK_VarIndex("EXACT::constant_density_star___radius"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constant_density_star___radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constant_density_star___radius)); \
static int cctki_vi_de_Sitter_Lambda___scale = -100; \
if (cctki_vi_de_Sitter_Lambda___scale == -100) cctki_vi_de_Sitter_Lambda___scale = CCTK_VarIndex("EXACT::de_Sitter_Lambda___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, de_Sitter_Lambda___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_de_Sitter_Lambda___scale)); \
static int cctki_vi_de_Sitter___scale = -100; \
if (cctki_vi_de_Sitter___scale == -100) cctki_vi_de_Sitter___scale = CCTK_VarIndex("EXACT::de_Sitter___scale"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, de_Sitter___scale, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_de_Sitter___scale)); \
static int cctki_vi_decoded_exact_model = -100; \
if (cctki_vi_decoded_exact_model == -100) cctki_vi_decoded_exact_model = CCTK_VarIndex("EXACT::decoded_exact_model"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, decoded_exact_model, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_decoded_exact_model)); \
static int cctki_vi_eT2tt = -100; \
if (cctki_vi_eT2tt == -100) cctki_vi_eT2tt = CCTK_VarIndex("TMUNUBASE::eT2tt"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tt, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tt)); \
static int cctki_vi_eT2tx = -100; \
if (cctki_vi_eT2tx == -100) cctki_vi_eT2tx = CCTK_VarIndex("TMUNUBASE::eT2tx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tx)); \
static int cctki_vi_eT2ty = -100; \
if (cctki_vi_eT2ty == -100) cctki_vi_eT2ty = CCTK_VarIndex("TMUNUBASE::eT2ty"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2ty, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2ty)); \
static int cctki_vi_eT2tz = -100; \
if (cctki_vi_eT2tz == -100) cctki_vi_eT2tz = CCTK_VarIndex("TMUNUBASE::eT2tz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2tz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2tz)); \
static int cctki_vi_eT2xx = -100; \
if (cctki_vi_eT2xx == -100) cctki_vi_eT2xx = CCTK_VarIndex("TMUNUBASE::eT2xx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xx)); \
static int cctki_vi_eT2xy = -100; \
if (cctki_vi_eT2xy == -100) cctki_vi_eT2xy = CCTK_VarIndex("TMUNUBASE::eT2xy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xy)); \
static int cctki_vi_eT2xz = -100; \
if (cctki_vi_eT2xz == -100) cctki_vi_eT2xz = CCTK_VarIndex("TMUNUBASE::eT2xz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2xz)); \
static int cctki_vi_eT2yy = -100; \
if (cctki_vi_eT2yy == -100) cctki_vi_eT2yy = CCTK_VarIndex("TMUNUBASE::eT2yy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2yy)); \
static int cctki_vi_eT2yz = -100; \
if (cctki_vi_eT2yz == -100) cctki_vi_eT2yz = CCTK_VarIndex("TMUNUBASE::eT2yz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2yz)); \
static int cctki_vi_eT2zz = -100; \
if (cctki_vi_eT2zz == -100) cctki_vi_eT2zz = CCTK_VarIndex("TMUNUBASE::eT2zz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eT2zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eT2zz)); \
static int cctki_vi_stress_energy_2_state = -100; \
if (cctki_vi_stress_energy_2_state == -100) cctki_vi_stress_energy_2_state = CCTK_VarIndex("TMUNUBASE::stress_energy_2_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, stress_energy_2_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_stress_energy_2_state));

#define DECLARE_ADMCOUPLING_PROTECTED_C2F \
static int CCTKARGNUM_Bertotti___Lambda = -1; \
static int CCTKGROUPNUM_Exact_pars_real = -1; \
static int CCTKARGNUM_Kasner_generalized___p1 = -1; \
static int CCTKARGNUM_Kasner_generalized___p2 = -1; \
static int CCTKARGNUM_Kasner_like___q = -1; \
static int CCTKARGNUM_Lemaitre___Lambda = -1; \
static int CCTKARGNUM_Lemaitre___R0 = -1; \
static int CCTKARGNUM_Lemaitre___epsilon0 = -1; \
static int CCTKARGNUM_Lemaitre___kappa = -1; \
static int CCTKARGNUM_Schwarzschild_Lemaitre___Lambda = -1; \
static int CCTKARGNUM_Schwarzschild_Lemaitre___mass = -1; \
static int CCTKARGNUM_anti_de_Sitter_Lambda___scale = -1; \
static int CCTKARGNUM_constant_density_star___mass = -1; \
static int CCTKARGNUM_constant_density_star___radius = -1; \
static int CCTKARGNUM_de_Sitter_Lambda___scale = -1; \
static int CCTKARGNUM_de_Sitter___scale = -1; \
static int CCTKARGNUM_decoded_exact_model = -1; \
static int CCTKGROUPNUM_Exact_pars_int = -1; \
static int CCTKARGNUM_eT2tt = -1; \
static int CCTKGROUPNUM_stress_energy_2_scalar = -1; \
static int CCTKARGNUM_eT2tx = -1; \
static int CCTKGROUPNUM_stress_energy_2_vector = -1; \
static int CCTKARGNUM_eT2ty = -1; \
static int CCTKARGNUM_eT2tz = -1; \
static int CCTKARGNUM_eT2xx = -1; \
static int CCTKGROUPNUM_stress_energy_2_tensor = -1; \
static int CCTKARGNUM_eT2xy = -1; \
static int CCTKARGNUM_eT2xz = -1; \
static int CCTKARGNUM_eT2yy = -1; \
static int CCTKARGNUM_eT2yz = -1; \
static int CCTKARGNUM_eT2zz = -1; \
static int CCTKARGNUM_stress_energy_2_state = -1; \
static int CCTKGROUPNUM_stress_energy_2_state = -1;

#define INITIALISE_ADMCOUPLING_PROTECTED_C2F \
if(CCTKARGNUM_Bertotti___Lambda == -1) CCTKARGNUM_Bertotti___Lambda = CCTK_VarIndex("EXACT::Bertotti___Lambda"); \
if(CCTKGROUPNUM_Exact_pars_real == -1) CCTKGROUPNUM_Exact_pars_real = CCTK_GroupIndex("EXACT::Exact_pars_real"); \
if(CCTKARGNUM_Kasner_generalized___p1 == -1) CCTKARGNUM_Kasner_generalized___p1 = CCTK_VarIndex("EXACT::Kasner_generalized___p1"); \
if(CCTKARGNUM_Kasner_generalized___p2 == -1) CCTKARGNUM_Kasner_generalized___p2 = CCTK_VarIndex("EXACT::Kasner_generalized___p2"); \
if(CCTKARGNUM_Kasner_like___q == -1) CCTKARGNUM_Kasner_like___q = CCTK_VarIndex("EXACT::Kasner_like___q"); \
if(CCTKARGNUM_Lemaitre___Lambda == -1) CCTKARGNUM_Lemaitre___Lambda = CCTK_VarIndex("EXACT::Lemaitre___Lambda"); \
if(CCTKARGNUM_Lemaitre___R0 == -1) CCTKARGNUM_Lemaitre___R0 = CCTK_VarIndex("EXACT::Lemaitre___R0"); \
if(CCTKARGNUM_Lemaitre___epsilon0 == -1) CCTKARGNUM_Lemaitre___epsilon0 = CCTK_VarIndex("EXACT::Lemaitre___epsilon0"); \
if(CCTKARGNUM_Lemaitre___kappa == -1) CCTKARGNUM_Lemaitre___kappa = CCTK_VarIndex("EXACT::Lemaitre___kappa"); \
if(CCTKARGNUM_Schwarzschild_Lemaitre___Lambda == -1) CCTKARGNUM_Schwarzschild_Lemaitre___Lambda = CCTK_VarIndex("EXACT::Schwarzschild_Lemaitre___Lambda"); \
if(CCTKARGNUM_Schwarzschild_Lemaitre___mass == -1) CCTKARGNUM_Schwarzschild_Lemaitre___mass = CCTK_VarIndex("EXACT::Schwarzschild_Lemaitre___mass"); \
if(CCTKARGNUM_anti_de_Sitter_Lambda___scale == -1) CCTKARGNUM_anti_de_Sitter_Lambda___scale = CCTK_VarIndex("EXACT::anti_de_Sitter_Lambda___scale"); \
if(CCTKARGNUM_constant_density_star___mass == -1) CCTKARGNUM_constant_density_star___mass = CCTK_VarIndex("EXACT::constant_density_star___mass"); \
if(CCTKARGNUM_constant_density_star___radius == -1) CCTKARGNUM_constant_density_star___radius = CCTK_VarIndex("EXACT::constant_density_star___radius"); \
if(CCTKARGNUM_de_Sitter_Lambda___scale == -1) CCTKARGNUM_de_Sitter_Lambda___scale = CCTK_VarIndex("EXACT::de_Sitter_Lambda___scale"); \
if(CCTKARGNUM_de_Sitter___scale == -1) CCTKARGNUM_de_Sitter___scale = CCTK_VarIndex("EXACT::de_Sitter___scale"); \
if(CCTKARGNUM_decoded_exact_model == -1) CCTKARGNUM_decoded_exact_model = CCTK_VarIndex("EXACT::decoded_exact_model"); \
if(CCTKGROUPNUM_Exact_pars_int == -1) CCTKGROUPNUM_Exact_pars_int = CCTK_GroupIndex("EXACT::Exact_pars_int"); \
if(CCTKARGNUM_eT2tt == -1) CCTKARGNUM_eT2tt = CCTK_VarIndex("TMUNUBASE::eT2tt"); \
if(CCTKGROUPNUM_stress_energy_2_scalar == -1) CCTKGROUPNUM_stress_energy_2_scalar = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_scalar"); \
if(CCTKARGNUM_eT2tx == -1) CCTKARGNUM_eT2tx = CCTK_VarIndex("TMUNUBASE::eT2tx"); \
if(CCTKGROUPNUM_stress_energy_2_vector == -1) CCTKGROUPNUM_stress_energy_2_vector = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_vector"); \
if(CCTKARGNUM_eT2ty == -1) CCTKARGNUM_eT2ty = CCTK_VarIndex("TMUNUBASE::eT2ty"); \
if(CCTKARGNUM_eT2tz == -1) CCTKARGNUM_eT2tz = CCTK_VarIndex("TMUNUBASE::eT2tz"); \
if(CCTKARGNUM_eT2xx == -1) CCTKARGNUM_eT2xx = CCTK_VarIndex("TMUNUBASE::eT2xx"); \
if(CCTKGROUPNUM_stress_energy_2_tensor == -1) CCTKGROUPNUM_stress_energy_2_tensor = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_tensor"); \
if(CCTKARGNUM_eT2xy == -1) CCTKARGNUM_eT2xy = CCTK_VarIndex("TMUNUBASE::eT2xy"); \
if(CCTKARGNUM_eT2xz == -1) CCTKARGNUM_eT2xz = CCTK_VarIndex("TMUNUBASE::eT2xz"); \
if(CCTKARGNUM_eT2yy == -1) CCTKARGNUM_eT2yy = CCTK_VarIndex("TMUNUBASE::eT2yy"); \
if(CCTKARGNUM_eT2yz == -1) CCTKARGNUM_eT2yz = CCTK_VarIndex("TMUNUBASE::eT2yz"); \
if(CCTKARGNUM_eT2zz == -1) CCTKARGNUM_eT2zz = CCTK_VarIndex("TMUNUBASE::eT2zz"); \
if(CCTKARGNUM_stress_energy_2_state == -1) CCTKARGNUM_stress_energy_2_state = CCTK_VarIndex("TMUNUBASE::stress_energy_2_state"); \
if(CCTKGROUPNUM_stress_energy_2_state == -1) CCTKGROUPNUM_stress_energy_2_state = CCTK_GroupIndex("TMUNUBASE::stress_energy_2_state");

#define ADMCOUPLING_PROTECTED_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *

#define PASS_ADMCOUPLING_PROTECTED_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(Bertotti___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_generalized___p1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_generalized___p2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Kasner_like___q, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___R0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___epsilon0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Lemaitre___kappa, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Schwarzschild_Lemaitre___Lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Schwarzschild_Lemaitre___mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(anti_de_Sitter_Lambda___scale, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constant_density_star___mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constant_density_star___radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(de_Sitter_Lambda___scale, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(de_Sitter___scale, 0)),\
(CCTK_INT *)(PASS_REFERENCE(decoded_exact_model, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tt, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2ty, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2tz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eT2zz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(stress_energy_2_state, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_ADMCOUPLING_PUBLIC_FARGUMENTS \


#define ADMCOUPLING_PUBLIC_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ADMCOUPLING_PUBLIC_CARGUMENTS \


#define DECLARE_ADMCOUPLING_PUBLIC_C2F \


#define INITIALISE_ADMCOUPLING_PUBLIC_C2F \


#define ADMCOUPLING_PUBLIC_C2F_PROTO \


#define PASS_ADMCOUPLING_PUBLIC_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define ADMCOUPLING_FARGUMENTS _CCTK_FARGUMENTS, ADMCOUPLING_PROTECTED_FARGUMENTS

#define DECLARE_ADMCOUPLING_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_ADMCOUPLING_PROTECTED_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ADMCOUPLING_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_ADMCOUPLING_PROTECTED_CARGUMENTS

#define ADMCOUPLING_C2F_PROTO _CCTK_C2F_PROTO, ADMCOUPLING_PROTECTED_C2F_PROTO

#define PASS_ADMCOUPLING_C2F(GH) _PASS_CCTK_C2F(GH), PASS_ADMCOUPLING_PROTECTED_C2F(GH)

#define DECLARE_ADMCOUPLING_C2F _DECLARE_CCTK_C2F DECLARE_ADMCOUPLING_PROTECTED_C2F

#define INITIALISE_ADMCOUPLING_C2F _INITIALISE_CCTK_C2F INITIALISE_ADMCOUPLING_PROTECTED_C2F

#define ADMCOUPLING_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
