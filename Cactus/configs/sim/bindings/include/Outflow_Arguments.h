/*@@
   @header  Outflow_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn Outflow
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_OUTFLOW_PRIVATE_FARGUMENTS \
INTEGER X0eninf_projected&&\
INTEGER X0fluxdens_projected&&\
INTEGER X0surface_projections&&\
INTEGER X0w_lorentz_projected&&\
INTEGER X1eninf_projected&&\
INTEGER X1fluxdens_projected&&\
INTEGER X1surface_projections&&\
INTEGER X1w_lorentz_projected&&\
INTEGER eninf_projected_length&&\
INTEGER fluxdens_projected_length&&\
INTEGER outflow_flux_length&&\
INTEGER surface_projections_length&&\
INTEGER w_lorentz_projected_length&&\
CCTK_DECLARE(CCTK_REAL,eninf_projected,(X0eninf_projected,X1eninf_projected,eninf_projected_length))&&\
CCTK_DECLARE(CCTK_REAL,fluxdens_projected,(X0fluxdens_projected,X1fluxdens_projected,fluxdens_projected_length))&&\
CCTK_DECLARE(CCTK_REAL,outflow_flux,(outflow_flux_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_0,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_1,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_10,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_11,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_12,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_13,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_14,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_15,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_16,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_17,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_18,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_19,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_2,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_3,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_4,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_5,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_6,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_7,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_8,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,surface_projection_9,(X0surface_projections,X1surface_projections,surface_projections_length))&&\
CCTK_DECLARE(CCTK_REAL,w_lorentz_projected,(X0w_lorentz_projected,X1w_lorentz_projected,w_lorentz_projected_length))&&\


#define OUTFLOW_PRIVATE_FARGUMENTS \
X0eninf_projected,X0fluxdens_projected,X0surface_projections,X0w_lorentz_projected,X1eninf_projected,X1fluxdens_projected,X1surface_projections,X1w_lorentz_projected,eninf_projected_length,fluxdens_projected_length,outflow_flux_length,surface_projections_length,w_lorentz_projected_length,eninf_projected,fluxdens_projected,outflow_flux,surface_projection_0,surface_projection_1,surface_projection_10,surface_projection_11,surface_projection_12,surface_projection_13,surface_projection_14,surface_projection_15,surface_projection_16,surface_projection_17,surface_projection_18,surface_projection_19,surface_projection_2,surface_projection_3,surface_projection_4,surface_projection_5,surface_projection_6,surface_projection_7,surface_projection_8,surface_projection_9,w_lorentz_projected

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_OUTFLOW_PRIVATE_CARGUMENTS \
static int cctki_vi_eninf_projected = -100; \
if (cctki_vi_eninf_projected == -100) cctki_vi_eninf_projected = CCTK_VarIndex("Outflow::eninf_projected[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eninf_projected, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eninf_projected)); \
static int cctki_vi_fluxdens_projected = -100; \
if (cctki_vi_fluxdens_projected == -100) cctki_vi_fluxdens_projected = CCTK_VarIndex("Outflow::fluxdens_projected[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, fluxdens_projected, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_fluxdens_projected)); \
static int cctki_vi_outflow_flux = -100; \
if (cctki_vi_outflow_flux == -100) cctki_vi_outflow_flux = CCTK_VarIndex("Outflow::outflow_flux[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, outflow_flux, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_outflow_flux)); \
static int cctki_vi_surface_projection_0 = -100; \
if (cctki_vi_surface_projection_0 == -100) cctki_vi_surface_projection_0 = CCTK_VarIndex("Outflow::surface_projection_0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_0)); \
static int cctki_vi_surface_projection_1 = -100; \
if (cctki_vi_surface_projection_1 == -100) cctki_vi_surface_projection_1 = CCTK_VarIndex("Outflow::surface_projection_1[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_1)); \
static int cctki_vi_surface_projection_10 = -100; \
if (cctki_vi_surface_projection_10 == -100) cctki_vi_surface_projection_10 = CCTK_VarIndex("Outflow::surface_projection_10[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_10, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_10)); \
static int cctki_vi_surface_projection_11 = -100; \
if (cctki_vi_surface_projection_11 == -100) cctki_vi_surface_projection_11 = CCTK_VarIndex("Outflow::surface_projection_11[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_11, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_11)); \
static int cctki_vi_surface_projection_12 = -100; \
if (cctki_vi_surface_projection_12 == -100) cctki_vi_surface_projection_12 = CCTK_VarIndex("Outflow::surface_projection_12[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_12, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_12)); \
static int cctki_vi_surface_projection_13 = -100; \
if (cctki_vi_surface_projection_13 == -100) cctki_vi_surface_projection_13 = CCTK_VarIndex("Outflow::surface_projection_13[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_13, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_13)); \
static int cctki_vi_surface_projection_14 = -100; \
if (cctki_vi_surface_projection_14 == -100) cctki_vi_surface_projection_14 = CCTK_VarIndex("Outflow::surface_projection_14[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_14, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_14)); \
static int cctki_vi_surface_projection_15 = -100; \
if (cctki_vi_surface_projection_15 == -100) cctki_vi_surface_projection_15 = CCTK_VarIndex("Outflow::surface_projection_15[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_15, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_15)); \
static int cctki_vi_surface_projection_16 = -100; \
if (cctki_vi_surface_projection_16 == -100) cctki_vi_surface_projection_16 = CCTK_VarIndex("Outflow::surface_projection_16[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_16, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_16)); \
static int cctki_vi_surface_projection_17 = -100; \
if (cctki_vi_surface_projection_17 == -100) cctki_vi_surface_projection_17 = CCTK_VarIndex("Outflow::surface_projection_17[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_17, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_17)); \
static int cctki_vi_surface_projection_18 = -100; \
if (cctki_vi_surface_projection_18 == -100) cctki_vi_surface_projection_18 = CCTK_VarIndex("Outflow::surface_projection_18[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_18, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_18)); \
static int cctki_vi_surface_projection_19 = -100; \
if (cctki_vi_surface_projection_19 == -100) cctki_vi_surface_projection_19 = CCTK_VarIndex("Outflow::surface_projection_19[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_19, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_19)); \
static int cctki_vi_surface_projection_2 = -100; \
if (cctki_vi_surface_projection_2 == -100) cctki_vi_surface_projection_2 = CCTK_VarIndex("Outflow::surface_projection_2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_2)); \
static int cctki_vi_surface_projection_3 = -100; \
if (cctki_vi_surface_projection_3 == -100) cctki_vi_surface_projection_3 = CCTK_VarIndex("Outflow::surface_projection_3[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_3)); \
static int cctki_vi_surface_projection_4 = -100; \
if (cctki_vi_surface_projection_4 == -100) cctki_vi_surface_projection_4 = CCTK_VarIndex("Outflow::surface_projection_4[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_4, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_4)); \
static int cctki_vi_surface_projection_5 = -100; \
if (cctki_vi_surface_projection_5 == -100) cctki_vi_surface_projection_5 = CCTK_VarIndex("Outflow::surface_projection_5[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_5, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_5)); \
static int cctki_vi_surface_projection_6 = -100; \
if (cctki_vi_surface_projection_6 == -100) cctki_vi_surface_projection_6 = CCTK_VarIndex("Outflow::surface_projection_6[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_6, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_6)); \
static int cctki_vi_surface_projection_7 = -100; \
if (cctki_vi_surface_projection_7 == -100) cctki_vi_surface_projection_7 = CCTK_VarIndex("Outflow::surface_projection_7[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_7, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_7)); \
static int cctki_vi_surface_projection_8 = -100; \
if (cctki_vi_surface_projection_8 == -100) cctki_vi_surface_projection_8 = CCTK_VarIndex("Outflow::surface_projection_8[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_8, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_8)); \
static int cctki_vi_surface_projection_9 = -100; \
if (cctki_vi_surface_projection_9 == -100) cctki_vi_surface_projection_9 = CCTK_VarIndex("Outflow::surface_projection_9[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, surface_projection_9, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_surface_projection_9)); \
static int cctki_vi_w_lorentz_projected = -100; \
if (cctki_vi_w_lorentz_projected == -100) cctki_vi_w_lorentz_projected = CCTK_VarIndex("Outflow::w_lorentz_projected[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, w_lorentz_projected, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_w_lorentz_projected));

#define DECLARE_OUTFLOW_PRIVATE_C2F \
static int CCTKARGNUM_eninf_projected = -1; \
static int CCTKGROUPNUM_eninf_projected = -1; \
static int CCTKARGNUM_fluxdens_projected = -1; \
static int CCTKGROUPNUM_fluxdens_projected = -1; \
static int CCTKARGNUM_outflow_flux = -1; \
static int CCTKGROUPNUM_outflow_flux = -1; \
static int CCTKARGNUM_surface_projection_0 = -1; \
static int CCTKGROUPNUM_surface_projections = -1; \
static int CCTKARGNUM_surface_projection_1 = -1; \
static int CCTKARGNUM_surface_projection_10 = -1; \
static int CCTKARGNUM_surface_projection_11 = -1; \
static int CCTKARGNUM_surface_projection_12 = -1; \
static int CCTKARGNUM_surface_projection_13 = -1; \
static int CCTKARGNUM_surface_projection_14 = -1; \
static int CCTKARGNUM_surface_projection_15 = -1; \
static int CCTKARGNUM_surface_projection_16 = -1; \
static int CCTKARGNUM_surface_projection_17 = -1; \
static int CCTKARGNUM_surface_projection_18 = -1; \
static int CCTKARGNUM_surface_projection_19 = -1; \
static int CCTKARGNUM_surface_projection_2 = -1; \
static int CCTKARGNUM_surface_projection_3 = -1; \
static int CCTKARGNUM_surface_projection_4 = -1; \
static int CCTKARGNUM_surface_projection_5 = -1; \
static int CCTKARGNUM_surface_projection_6 = -1; \
static int CCTKARGNUM_surface_projection_7 = -1; \
static int CCTKARGNUM_surface_projection_8 = -1; \
static int CCTKARGNUM_surface_projection_9 = -1; \
static int CCTKARGNUM_w_lorentz_projected = -1; \
static int CCTKGROUPNUM_w_lorentz_projected = -1;

#define INITIALISE_OUTFLOW_PRIVATE_C2F \
if(CCTKARGNUM_eninf_projected == -1) CCTKARGNUM_eninf_projected = CCTK_VarIndex("Outflow::eninf_projected[0]"); \
if(CCTKGROUPNUM_eninf_projected == -1) CCTKGROUPNUM_eninf_projected = CCTK_GroupIndex("Outflow::eninf_projected"); \
if(CCTKARGNUM_fluxdens_projected == -1) CCTKARGNUM_fluxdens_projected = CCTK_VarIndex("Outflow::fluxdens_projected[0]"); \
if(CCTKGROUPNUM_fluxdens_projected == -1) CCTKGROUPNUM_fluxdens_projected = CCTK_GroupIndex("Outflow::fluxdens_projected"); \
if(CCTKARGNUM_outflow_flux == -1) CCTKARGNUM_outflow_flux = CCTK_VarIndex("Outflow::outflow_flux[0]"); \
if(CCTKGROUPNUM_outflow_flux == -1) CCTKGROUPNUM_outflow_flux = CCTK_GroupIndex("Outflow::outflow_flux"); \
if(CCTKARGNUM_surface_projection_0 == -1) CCTKARGNUM_surface_projection_0 = CCTK_VarIndex("Outflow::surface_projection_0[0]"); \
if(CCTKGROUPNUM_surface_projections == -1) CCTKGROUPNUM_surface_projections = CCTK_GroupIndex("Outflow::surface_projections"); \
if(CCTKARGNUM_surface_projection_1 == -1) CCTKARGNUM_surface_projection_1 = CCTK_VarIndex("Outflow::surface_projection_1[0]"); \
if(CCTKARGNUM_surface_projection_10 == -1) CCTKARGNUM_surface_projection_10 = CCTK_VarIndex("Outflow::surface_projection_10[0]"); \
if(CCTKARGNUM_surface_projection_11 == -1) CCTKARGNUM_surface_projection_11 = CCTK_VarIndex("Outflow::surface_projection_11[0]"); \
if(CCTKARGNUM_surface_projection_12 == -1) CCTKARGNUM_surface_projection_12 = CCTK_VarIndex("Outflow::surface_projection_12[0]"); \
if(CCTKARGNUM_surface_projection_13 == -1) CCTKARGNUM_surface_projection_13 = CCTK_VarIndex("Outflow::surface_projection_13[0]"); \
if(CCTKARGNUM_surface_projection_14 == -1) CCTKARGNUM_surface_projection_14 = CCTK_VarIndex("Outflow::surface_projection_14[0]"); \
if(CCTKARGNUM_surface_projection_15 == -1) CCTKARGNUM_surface_projection_15 = CCTK_VarIndex("Outflow::surface_projection_15[0]"); \
if(CCTKARGNUM_surface_projection_16 == -1) CCTKARGNUM_surface_projection_16 = CCTK_VarIndex("Outflow::surface_projection_16[0]"); \
if(CCTKARGNUM_surface_projection_17 == -1) CCTKARGNUM_surface_projection_17 = CCTK_VarIndex("Outflow::surface_projection_17[0]"); \
if(CCTKARGNUM_surface_projection_18 == -1) CCTKARGNUM_surface_projection_18 = CCTK_VarIndex("Outflow::surface_projection_18[0]"); \
if(CCTKARGNUM_surface_projection_19 == -1) CCTKARGNUM_surface_projection_19 = CCTK_VarIndex("Outflow::surface_projection_19[0]"); \
if(CCTKARGNUM_surface_projection_2 == -1) CCTKARGNUM_surface_projection_2 = CCTK_VarIndex("Outflow::surface_projection_2[0]"); \
if(CCTKARGNUM_surface_projection_3 == -1) CCTKARGNUM_surface_projection_3 = CCTK_VarIndex("Outflow::surface_projection_3[0]"); \
if(CCTKARGNUM_surface_projection_4 == -1) CCTKARGNUM_surface_projection_4 = CCTK_VarIndex("Outflow::surface_projection_4[0]"); \
if(CCTKARGNUM_surface_projection_5 == -1) CCTKARGNUM_surface_projection_5 = CCTK_VarIndex("Outflow::surface_projection_5[0]"); \
if(CCTKARGNUM_surface_projection_6 == -1) CCTKARGNUM_surface_projection_6 = CCTK_VarIndex("Outflow::surface_projection_6[0]"); \
if(CCTKARGNUM_surface_projection_7 == -1) CCTKARGNUM_surface_projection_7 = CCTK_VarIndex("Outflow::surface_projection_7[0]"); \
if(CCTKARGNUM_surface_projection_8 == -1) CCTKARGNUM_surface_projection_8 = CCTK_VarIndex("Outflow::surface_projection_8[0]"); \
if(CCTKARGNUM_surface_projection_9 == -1) CCTKARGNUM_surface_projection_9 = CCTK_VarIndex("Outflow::surface_projection_9[0]"); \
if(CCTKARGNUM_w_lorentz_projected == -1) CCTKARGNUM_w_lorentz_projected = CCTK_VarIndex("Outflow::w_lorentz_projected[0]"); \
if(CCTKGROUPNUM_w_lorentz_projected == -1) CCTKGROUPNUM_w_lorentz_projected = CCTK_GroupIndex("Outflow::w_lorentz_projected");

#define OUTFLOW_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_OUTFLOW_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(eninf_projected, 0),\
PASS_GROUPSIZE(fluxdens_projected, 0),\
PASS_GROUPSIZE(surface_projections, 0),\
PASS_GROUPSIZE(w_lorentz_projected, 0),\
PASS_GROUPSIZE(eninf_projected, 1),\
PASS_GROUPSIZE(fluxdens_projected, 1),\
PASS_GROUPSIZE(surface_projections, 1),\
PASS_GROUPSIZE(w_lorentz_projected, 1),\
PASS_GROUPLEN(Outflow, eninf_projected),\
PASS_GROUPLEN(Outflow, fluxdens_projected),\
PASS_GROUPLEN(Outflow, outflow_flux),\
PASS_GROUPLEN(Outflow, surface_projections),\
PASS_GROUPLEN(Outflow, w_lorentz_projected),\
(CCTK_REAL *)(PASS_REFERENCE(eninf_projected, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(fluxdens_projected, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(outflow_flux, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_10, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_11, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_12, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_13, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_14, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_15, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_16, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_17, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_18, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_19, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_4, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_5, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_6, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_7, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_8, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(surface_projection_9, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(w_lorentz_projected, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_OUTFLOW_PROTECTED_FARGUMENTS \


#define OUTFLOW_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_OUTFLOW_PROTECTED_CARGUMENTS \


#define DECLARE_OUTFLOW_PROTECTED_C2F \


#define INITIALISE_OUTFLOW_PROTECTED_C2F \


#define OUTFLOW_PROTECTED_C2F_PROTO \


#define PASS_OUTFLOW_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_OUTFLOW_PUBLIC_FARGUMENTS \
INTEGER Avec_length&&\
INTEGER Bvec_length&&\
INTEGER X0sf_radius&&\
INTEGER X1sf_radius&&\
INTEGER sf_active_length&&\
INTEGER sf_coordinate_descriptors_length&&\
INTEGER sf_info_length&&\
INTEGER sf_maxreflevel_length&&\
INTEGER sf_minreflevel_length&&\
INTEGER sf_origin_length&&\
INTEGER sf_radius_length&&\
INTEGER sf_shape_descriptors_length&&\
INTEGER sf_valid_length&&\
INTEGER vel_length&&\
CCTK_DECLARE(CCTK_REAL,Abar,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Abar_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Abar_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Aphi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Aphi_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Aphi_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Avec,(cctk_ash1,cctk_ash2,cctk_ash3,Avec_length))&&\
CCTK_DECLARE(CCTK_REAL,Avec_p,(cctk_ash1,cctk_ash2,cctk_ash3,Avec_length))&&\
CCTK_DECLARE(CCTK_REAL,Avec_p_p,(cctk_ash1,cctk_ash2,cctk_ash3,Avec_length))&&\
CCTK_DECLARE(CCTK_REAL,Bvec,(cctk_ash1,cctk_ash2,cctk_ash3,Bvec_length))&&\
CCTK_DECLARE(CCTK_REAL,Bvec_p,(cctk_ash1,cctk_ash2,cctk_ash3,Bvec_length))&&\
CCTK_DECLARE(CCTK_REAL,Bvec_p_p,(cctk_ash1,cctk_ash2,cctk_ash3,Bvec_length))&&\
CCTK_DECLARE(CCTK_REAL,Y_e,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Y_e_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,Y_e_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,entropy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,entropy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,entropy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eps,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eps_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eps_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,hydro_excision_mask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,press,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,press_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,press_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,sf_active,(sf_active_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_area,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_maxreflevel,(sf_maxreflevel_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_mean_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_minreflevel,(sf_minreflevel_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghostsphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghoststheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_ntheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_x,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_y,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_z,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xx,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_zz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_radius,(X0sf_radius,X1sf_radius,sf_radius_length))&&\
CCTK_DECLARE(CCTK_INT,sf_valid,(sf_valid_length))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_REAL,temperature,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,temperature_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,temperature_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,vel,(cctk_ash1,cctk_ash2,cctk_ash3,vel_length))&&\
CCTK_DECLARE(CCTK_REAL,vel_p,(cctk_ash1,cctk_ash2,cctk_ash3,vel_length))&&\
CCTK_DECLARE(CCTK_REAL,vel_p_p,(cctk_ash1,cctk_ash2,cctk_ash3,vel_length))&&\
CCTK_DECLARE(CCTK_REAL,w_lorentz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,w_lorentz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,w_lorentz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define OUTFLOW_PUBLIC_FARGUMENTS \
Avec_length,Bvec_length,X0sf_radius,X1sf_radius,sf_active_length,sf_coordinate_descriptors_length,sf_info_length,sf_maxreflevel_length,sf_minreflevel_length,sf_origin_length,sf_radius_length,sf_shape_descriptors_length,sf_valid_length,vel_length,Abar,Abar_p,Abar_p_p,Aphi,Aphi_p,Aphi_p_p,Avec,Avec_p,Avec_p_p,Bvec,Bvec_p,Bvec_p_p,Y_e,Y_e_p,Y_e_p_p,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,entropy,entropy_p,entropy_p_p,eps,eps_p,eps_p_p,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,hydro_excision_mask,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,press,press_p,press_p_p,r,rho,rho_p,rho_p_p,sf_active,sf_area,sf_centroid_x,sf_centroid_y,sf_centroid_z,sf_delta_phi,sf_delta_theta,sf_max_radius,sf_max_x,sf_max_y,sf_max_z,sf_maxreflevel,sf_mean_radius,sf_min_radius,sf_min_x,sf_min_y,sf_min_z,sf_minreflevel,sf_nghostsphi,sf_nghoststheta,sf_nphi,sf_ntheta,sf_origin_phi,sf_origin_theta,sf_origin_x,sf_origin_y,sf_origin_z,sf_quadrupole_xx,sf_quadrupole_xy,sf_quadrupole_xz,sf_quadrupole_yy,sf_quadrupole_yz,sf_quadrupole_zz,sf_radius,sf_valid,shift_state,temperature,temperature_p,temperature_p_p,vel,vel_p,vel_p_p,w_lorentz,w_lorentz_p,w_lorentz_p_p,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_OUTFLOW_PUBLIC_CARGUMENTS \
static int cctki_vi_Abar = -100; \
if (cctki_vi_Abar == -100) cctki_vi_Abar = CCTK_VarIndex("HYDROBASE::Abar"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Abar, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Abar)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Abar_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_Abar)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Abar_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_Abar)); \
static int cctki_vi_Aphi = -100; \
if (cctki_vi_Aphi == -100) cctki_vi_Aphi = CCTK_VarIndex("HYDROBASE::Aphi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Aphi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Aphi)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Aphi_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_Aphi)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Aphi_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_Aphi)); \
static int cctki_vi_Avec = -100; \
if (cctki_vi_Avec == -100) cctki_vi_Avec = CCTK_VarIndex("HYDROBASE::Avec[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Avec, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Avec)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Avec_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_Avec)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Avec_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_Avec)); \
static int cctki_vi_Bvec = -100; \
if (cctki_vi_Bvec == -100) cctki_vi_Bvec = CCTK_VarIndex("HYDROBASE::Bvec[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Bvec, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Bvec)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Bvec_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_Bvec)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Bvec_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_Bvec)); \
static int cctki_vi_Y_e = -100; \
if (cctki_vi_Y_e == -100) cctki_vi_Y_e = CCTK_VarIndex("HYDROBASE::Y_e"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Y_e, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_Y_e)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Y_e_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_Y_e)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, Y_e_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_Y_e)); \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_entropy = -100; \
if (cctki_vi_entropy == -100) cctki_vi_entropy = CCTK_VarIndex("HYDROBASE::entropy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, entropy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_entropy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, entropy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_entropy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, entropy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_entropy)); \
static int cctki_vi_eps = -100; \
if (cctki_vi_eps == -100) cctki_vi_eps = CCTK_VarIndex("HYDROBASE::eps"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eps, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eps)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eps_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eps)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eps_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eps)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_hydro_excision_mask = -100; \
if (cctki_vi_hydro_excision_mask == -100) cctki_vi_hydro_excision_mask = CCTK_VarIndex("HYDROBASE::hydro_excision_mask"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, hydro_excision_mask, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_hydro_excision_mask)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_press = -100; \
if (cctki_vi_press == -100) cctki_vi_press = CCTK_VarIndex("HYDROBASE::press"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, press, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_press)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, press_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_press)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, press_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_press)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_rho = -100; \
if (cctki_vi_rho == -100) cctki_vi_rho = CCTK_VarIndex("HYDROBASE::rho"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rho)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_rho)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_rho)); \
static int cctki_vi_sf_active = -100; \
if (cctki_vi_sf_active == -100) cctki_vi_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_active, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_active)); \
static int cctki_vi_sf_area = -100; \
if (cctki_vi_sf_area == -100) cctki_vi_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_area)); \
static int cctki_vi_sf_centroid_x = -100; \
if (cctki_vi_sf_centroid_x == -100) cctki_vi_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_x)); \
static int cctki_vi_sf_centroid_y = -100; \
if (cctki_vi_sf_centroid_y == -100) cctki_vi_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_y)); \
static int cctki_vi_sf_centroid_z = -100; \
if (cctki_vi_sf_centroid_z == -100) cctki_vi_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_z)); \
static int cctki_vi_sf_delta_phi = -100; \
if (cctki_vi_sf_delta_phi == -100) cctki_vi_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_phi)); \
static int cctki_vi_sf_delta_theta = -100; \
if (cctki_vi_sf_delta_theta == -100) cctki_vi_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_theta)); \
static int cctki_vi_sf_max_radius = -100; \
if (cctki_vi_sf_max_radius == -100) cctki_vi_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_radius)); \
static int cctki_vi_sf_max_x = -100; \
if (cctki_vi_sf_max_x == -100) cctki_vi_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_x)); \
static int cctki_vi_sf_max_y = -100; \
if (cctki_vi_sf_max_y == -100) cctki_vi_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_y)); \
static int cctki_vi_sf_max_z = -100; \
if (cctki_vi_sf_max_z == -100) cctki_vi_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_z)); \
static int cctki_vi_sf_maxreflevel = -100; \
if (cctki_vi_sf_maxreflevel == -100) cctki_vi_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_maxreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_maxreflevel)); \
static int cctki_vi_sf_mean_radius = -100; \
if (cctki_vi_sf_mean_radius == -100) cctki_vi_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_mean_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_mean_radius)); \
static int cctki_vi_sf_min_radius = -100; \
if (cctki_vi_sf_min_radius == -100) cctki_vi_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_radius)); \
static int cctki_vi_sf_min_x = -100; \
if (cctki_vi_sf_min_x == -100) cctki_vi_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_x)); \
static int cctki_vi_sf_min_y = -100; \
if (cctki_vi_sf_min_y == -100) cctki_vi_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_y)); \
static int cctki_vi_sf_min_z = -100; \
if (cctki_vi_sf_min_z == -100) cctki_vi_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_z)); \
static int cctki_vi_sf_minreflevel = -100; \
if (cctki_vi_sf_minreflevel == -100) cctki_vi_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_minreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_minreflevel)); \
static int cctki_vi_sf_nghostsphi = -100; \
if (cctki_vi_sf_nghostsphi == -100) cctki_vi_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghostsphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghostsphi)); \
static int cctki_vi_sf_nghoststheta = -100; \
if (cctki_vi_sf_nghoststheta == -100) cctki_vi_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghoststheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghoststheta)); \
static int cctki_vi_sf_nphi = -100; \
if (cctki_vi_sf_nphi == -100) cctki_vi_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nphi)); \
static int cctki_vi_sf_ntheta = -100; \
if (cctki_vi_sf_ntheta == -100) cctki_vi_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_ntheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_ntheta)); \
static int cctki_vi_sf_origin_phi = -100; \
if (cctki_vi_sf_origin_phi == -100) cctki_vi_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_phi)); \
static int cctki_vi_sf_origin_theta = -100; \
if (cctki_vi_sf_origin_theta == -100) cctki_vi_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_theta)); \
static int cctki_vi_sf_origin_x = -100; \
if (cctki_vi_sf_origin_x == -100) cctki_vi_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_x)); \
static int cctki_vi_sf_origin_y = -100; \
if (cctki_vi_sf_origin_y == -100) cctki_vi_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_y)); \
static int cctki_vi_sf_origin_z = -100; \
if (cctki_vi_sf_origin_z == -100) cctki_vi_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_z)); \
static int cctki_vi_sf_quadrupole_xx = -100; \
if (cctki_vi_sf_quadrupole_xx == -100) cctki_vi_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xx)); \
static int cctki_vi_sf_quadrupole_xy = -100; \
if (cctki_vi_sf_quadrupole_xy == -100) cctki_vi_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xy)); \
static int cctki_vi_sf_quadrupole_xz = -100; \
if (cctki_vi_sf_quadrupole_xz == -100) cctki_vi_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xz)); \
static int cctki_vi_sf_quadrupole_yy = -100; \
if (cctki_vi_sf_quadrupole_yy == -100) cctki_vi_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yy)); \
static int cctki_vi_sf_quadrupole_yz = -100; \
if (cctki_vi_sf_quadrupole_yz == -100) cctki_vi_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yz)); \
static int cctki_vi_sf_quadrupole_zz = -100; \
if (cctki_vi_sf_quadrupole_zz == -100) cctki_vi_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_zz)); \
static int cctki_vi_sf_radius = -100; \
if (cctki_vi_sf_radius == -100) cctki_vi_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_radius)); \
static int cctki_vi_sf_valid = -100; \
if (cctki_vi_sf_valid == -100) cctki_vi_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_valid, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_valid)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_temperature = -100; \
if (cctki_vi_temperature == -100) cctki_vi_temperature = CCTK_VarIndex("HYDROBASE::temperature"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, temperature, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_temperature)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, temperature_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_temperature)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, temperature_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_temperature)); \
static int cctki_vi_vel = -100; \
if (cctki_vi_vel == -100) cctki_vi_vel = CCTK_VarIndex("HYDROBASE::vel[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, vel, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vel)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, vel_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_vel)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, vel_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_vel)); \
static int cctki_vi_w_lorentz = -100; \
if (cctki_vi_w_lorentz == -100) cctki_vi_w_lorentz = CCTK_VarIndex("HYDROBASE::w_lorentz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, w_lorentz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_w_lorentz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, w_lorentz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_w_lorentz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, w_lorentz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_w_lorentz)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_OUTFLOW_PUBLIC_C2F \
static int CCTKARGNUM_Abar = -1; \
static int CCTKGROUPNUM_Abar = -1; \
static int CCTKARGNUM_Aphi = -1; \
static int CCTKGROUPNUM_Aphi = -1; \
static int CCTKARGNUM_Avec = -1; \
static int CCTKGROUPNUM_Avec = -1; \
static int CCTKARGNUM_Bvec = -1; \
static int CCTKGROUPNUM_Bvec = -1; \
static int CCTKARGNUM_Y_e = -1; \
static int CCTKGROUPNUM_Y_e = -1; \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_entropy = -1; \
static int CCTKGROUPNUM_entropy = -1; \
static int CCTKARGNUM_eps = -1; \
static int CCTKGROUPNUM_eps = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_hydro_excision_mask = -1; \
static int CCTKGROUPNUM_hydro_excision_mask = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_press = -1; \
static int CCTKGROUPNUM_press = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_rho = -1; \
static int CCTKGROUPNUM_rho = -1; \
static int CCTKARGNUM_sf_active = -1; \
static int CCTKGROUPNUM_sf_active = -1; \
static int CCTKARGNUM_sf_area = -1; \
static int CCTKGROUPNUM_sf_info = -1; \
static int CCTKARGNUM_sf_centroid_x = -1; \
static int CCTKARGNUM_sf_centroid_y = -1; \
static int CCTKARGNUM_sf_centroid_z = -1; \
static int CCTKARGNUM_sf_delta_phi = -1; \
static int CCTKGROUPNUM_sf_coordinate_descriptors = -1; \
static int CCTKARGNUM_sf_delta_theta = -1; \
static int CCTKARGNUM_sf_max_radius = -1; \
static int CCTKARGNUM_sf_max_x = -1; \
static int CCTKARGNUM_sf_max_y = -1; \
static int CCTKARGNUM_sf_max_z = -1; \
static int CCTKARGNUM_sf_maxreflevel = -1; \
static int CCTKGROUPNUM_sf_maxreflevel = -1; \
static int CCTKARGNUM_sf_mean_radius = -1; \
static int CCTKARGNUM_sf_min_radius = -1; \
static int CCTKARGNUM_sf_min_x = -1; \
static int CCTKARGNUM_sf_min_y = -1; \
static int CCTKARGNUM_sf_min_z = -1; \
static int CCTKARGNUM_sf_minreflevel = -1; \
static int CCTKGROUPNUM_sf_minreflevel = -1; \
static int CCTKARGNUM_sf_nghostsphi = -1; \
static int CCTKGROUPNUM_sf_shape_descriptors = -1; \
static int CCTKARGNUM_sf_nghoststheta = -1; \
static int CCTKARGNUM_sf_nphi = -1; \
static int CCTKARGNUM_sf_ntheta = -1; \
static int CCTKARGNUM_sf_origin_phi = -1; \
static int CCTKARGNUM_sf_origin_theta = -1; \
static int CCTKARGNUM_sf_origin_x = -1; \
static int CCTKGROUPNUM_sf_origin = -1; \
static int CCTKARGNUM_sf_origin_y = -1; \
static int CCTKARGNUM_sf_origin_z = -1; \
static int CCTKARGNUM_sf_quadrupole_xx = -1; \
static int CCTKARGNUM_sf_quadrupole_xy = -1; \
static int CCTKARGNUM_sf_quadrupole_xz = -1; \
static int CCTKARGNUM_sf_quadrupole_yy = -1; \
static int CCTKARGNUM_sf_quadrupole_yz = -1; \
static int CCTKARGNUM_sf_quadrupole_zz = -1; \
static int CCTKARGNUM_sf_radius = -1; \
static int CCTKGROUPNUM_sf_radius = -1; \
static int CCTKARGNUM_sf_valid = -1; \
static int CCTKGROUPNUM_sf_valid = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_temperature = -1; \
static int CCTKGROUPNUM_temperature = -1; \
static int CCTKARGNUM_vel = -1; \
static int CCTKGROUPNUM_vel = -1; \
static int CCTKARGNUM_w_lorentz = -1; \
static int CCTKGROUPNUM_w_lorentz = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_OUTFLOW_PUBLIC_C2F \
if(CCTKARGNUM_Abar == -1) CCTKARGNUM_Abar = CCTK_VarIndex("HYDROBASE::Abar"); \
if(CCTKGROUPNUM_Abar == -1) CCTKGROUPNUM_Abar = CCTK_GroupIndex("HYDROBASE::Abar"); \
if(CCTKARGNUM_Aphi == -1) CCTKARGNUM_Aphi = CCTK_VarIndex("HYDROBASE::Aphi"); \
if(CCTKGROUPNUM_Aphi == -1) CCTKGROUPNUM_Aphi = CCTK_GroupIndex("HYDROBASE::Aphi"); \
if(CCTKARGNUM_Avec == -1) CCTKARGNUM_Avec = CCTK_VarIndex("HYDROBASE::Avec[0]"); \
if(CCTKGROUPNUM_Avec == -1) CCTKGROUPNUM_Avec = CCTK_GroupIndex("HYDROBASE::Avec"); \
if(CCTKARGNUM_Bvec == -1) CCTKARGNUM_Bvec = CCTK_VarIndex("HYDROBASE::Bvec[0]"); \
if(CCTKGROUPNUM_Bvec == -1) CCTKGROUPNUM_Bvec = CCTK_GroupIndex("HYDROBASE::Bvec"); \
if(CCTKARGNUM_Y_e == -1) CCTKARGNUM_Y_e = CCTK_VarIndex("HYDROBASE::Y_e"); \
if(CCTKGROUPNUM_Y_e == -1) CCTKGROUPNUM_Y_e = CCTK_GroupIndex("HYDROBASE::Y_e"); \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_entropy == -1) CCTKARGNUM_entropy = CCTK_VarIndex("HYDROBASE::entropy"); \
if(CCTKGROUPNUM_entropy == -1) CCTKGROUPNUM_entropy = CCTK_GroupIndex("HYDROBASE::entropy"); \
if(CCTKARGNUM_eps == -1) CCTKARGNUM_eps = CCTK_VarIndex("HYDROBASE::eps"); \
if(CCTKGROUPNUM_eps == -1) CCTKGROUPNUM_eps = CCTK_GroupIndex("HYDROBASE::eps"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_hydro_excision_mask == -1) CCTKARGNUM_hydro_excision_mask = CCTK_VarIndex("HYDROBASE::hydro_excision_mask"); \
if(CCTKGROUPNUM_hydro_excision_mask == -1) CCTKGROUPNUM_hydro_excision_mask = CCTK_GroupIndex("HYDROBASE::hydro_excision_mask"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_press == -1) CCTKARGNUM_press = CCTK_VarIndex("HYDROBASE::press"); \
if(CCTKGROUPNUM_press == -1) CCTKGROUPNUM_press = CCTK_GroupIndex("HYDROBASE::press"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_rho == -1) CCTKARGNUM_rho = CCTK_VarIndex("HYDROBASE::rho"); \
if(CCTKGROUPNUM_rho == -1) CCTKGROUPNUM_rho = CCTK_GroupIndex("HYDROBASE::rho"); \
if(CCTKARGNUM_sf_active == -1) CCTKARGNUM_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
if(CCTKGROUPNUM_sf_active == -1) CCTKGROUPNUM_sf_active = CCTK_GroupIndex("SPHERICALSURFACE::sf_active"); \
if(CCTKARGNUM_sf_area == -1) CCTKARGNUM_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
if(CCTKGROUPNUM_sf_info == -1) CCTKGROUPNUM_sf_info = CCTK_GroupIndex("SPHERICALSURFACE::sf_info"); \
if(CCTKARGNUM_sf_centroid_x == -1) CCTKARGNUM_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
if(CCTKARGNUM_sf_centroid_y == -1) CCTKARGNUM_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
if(CCTKARGNUM_sf_centroid_z == -1) CCTKARGNUM_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
if(CCTKARGNUM_sf_delta_phi == -1) CCTKARGNUM_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
if(CCTKGROUPNUM_sf_coordinate_descriptors == -1) CCTKGROUPNUM_sf_coordinate_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_coordinate_descriptors"); \
if(CCTKARGNUM_sf_delta_theta == -1) CCTKARGNUM_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
if(CCTKARGNUM_sf_max_radius == -1) CCTKARGNUM_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
if(CCTKARGNUM_sf_max_x == -1) CCTKARGNUM_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
if(CCTKARGNUM_sf_max_y == -1) CCTKARGNUM_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
if(CCTKARGNUM_sf_max_z == -1) CCTKARGNUM_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
if(CCTKARGNUM_sf_maxreflevel == -1) CCTKARGNUM_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
if(CCTKGROUPNUM_sf_maxreflevel == -1) CCTKGROUPNUM_sf_maxreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_maxreflevel"); \
if(CCTKARGNUM_sf_mean_radius == -1) CCTKARGNUM_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
if(CCTKARGNUM_sf_min_radius == -1) CCTKARGNUM_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
if(CCTKARGNUM_sf_min_x == -1) CCTKARGNUM_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
if(CCTKARGNUM_sf_min_y == -1) CCTKARGNUM_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
if(CCTKARGNUM_sf_min_z == -1) CCTKARGNUM_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
if(CCTKARGNUM_sf_minreflevel == -1) CCTKARGNUM_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
if(CCTKGROUPNUM_sf_minreflevel == -1) CCTKGROUPNUM_sf_minreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_minreflevel"); \
if(CCTKARGNUM_sf_nghostsphi == -1) CCTKARGNUM_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
if(CCTKGROUPNUM_sf_shape_descriptors == -1) CCTKGROUPNUM_sf_shape_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_shape_descriptors"); \
if(CCTKARGNUM_sf_nghoststheta == -1) CCTKARGNUM_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
if(CCTKARGNUM_sf_nphi == -1) CCTKARGNUM_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
if(CCTKARGNUM_sf_ntheta == -1) CCTKARGNUM_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
if(CCTKARGNUM_sf_origin_phi == -1) CCTKARGNUM_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
if(CCTKARGNUM_sf_origin_theta == -1) CCTKARGNUM_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
if(CCTKARGNUM_sf_origin_x == -1) CCTKARGNUM_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
if(CCTKGROUPNUM_sf_origin == -1) CCTKGROUPNUM_sf_origin = CCTK_GroupIndex("SPHERICALSURFACE::sf_origin"); \
if(CCTKARGNUM_sf_origin_y == -1) CCTKARGNUM_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
if(CCTKARGNUM_sf_origin_z == -1) CCTKARGNUM_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
if(CCTKARGNUM_sf_quadrupole_xx == -1) CCTKARGNUM_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
if(CCTKARGNUM_sf_quadrupole_xy == -1) CCTKARGNUM_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
if(CCTKARGNUM_sf_quadrupole_xz == -1) CCTKARGNUM_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
if(CCTKARGNUM_sf_quadrupole_yy == -1) CCTKARGNUM_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
if(CCTKARGNUM_sf_quadrupole_yz == -1) CCTKARGNUM_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
if(CCTKARGNUM_sf_quadrupole_zz == -1) CCTKARGNUM_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
if(CCTKARGNUM_sf_radius == -1) CCTKARGNUM_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
if(CCTKGROUPNUM_sf_radius == -1) CCTKGROUPNUM_sf_radius = CCTK_GroupIndex("SPHERICALSURFACE::sf_radius"); \
if(CCTKARGNUM_sf_valid == -1) CCTKARGNUM_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
if(CCTKGROUPNUM_sf_valid == -1) CCTKGROUPNUM_sf_valid = CCTK_GroupIndex("SPHERICALSURFACE::sf_valid"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_temperature == -1) CCTKARGNUM_temperature = CCTK_VarIndex("HYDROBASE::temperature"); \
if(CCTKGROUPNUM_temperature == -1) CCTKGROUPNUM_temperature = CCTK_GroupIndex("HYDROBASE::temperature"); \
if(CCTKARGNUM_vel == -1) CCTKARGNUM_vel = CCTK_VarIndex("HYDROBASE::vel[0]"); \
if(CCTKGROUPNUM_vel == -1) CCTKGROUPNUM_vel = CCTK_GroupIndex("HYDROBASE::vel"); \
if(CCTKARGNUM_w_lorentz == -1) CCTKARGNUM_w_lorentz = CCTK_VarIndex("HYDROBASE::w_lorentz"); \
if(CCTKGROUPNUM_w_lorentz == -1) CCTKGROUPNUM_w_lorentz = CCTK_GroupIndex("HYDROBASE::w_lorentz"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define OUTFLOW_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int

#define PASS_OUTFLOW_PUBLIC_C2F(GH) \
PASS_GROUPLEN(HYDROBASE, Avec),\
PASS_GROUPLEN(HYDROBASE, Bvec),\
PASS_GROUPSIZE(sf_radius, 0),\
PASS_GROUPSIZE(sf_radius, 1),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_active),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_coordinate_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_info),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_maxreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_minreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_origin),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_radius),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_shape_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_valid),\
PASS_GROUPLEN(HYDROBASE, vel),\
(CCTK_REAL *)(PASS_REFERENCE(Abar, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Abar, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(Abar, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(Aphi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Aphi, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(Aphi, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(Avec, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Avec, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(Avec, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(Bvec, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Bvec, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(Bvec, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(Y_e, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(Y_e, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(Y_e, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(entropy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(entropy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(entropy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eps, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eps, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eps, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(hydro_excision_mask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(press, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(press, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(press, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 2)),\
(CCTK_INT *)(PASS_REFERENCE(sf_active, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_area, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_maxreflevel, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_mean_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_minreflevel, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghostsphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghoststheta, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_ntheta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_zz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_valid, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(temperature, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(temperature, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(temperature, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(vel, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(vel, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(vel, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(w_lorentz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(w_lorentz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(w_lorentz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define OUTFLOW_FARGUMENTS _CCTK_FARGUMENTS, OUTFLOW_PRIVATE_FARGUMENTS, OUTFLOW_PUBLIC_FARGUMENTS

#define DECLARE_OUTFLOW_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_OUTFLOW_PRIVATE_FARGUMENTS DECLARE_OUTFLOW_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_OUTFLOW_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_OUTFLOW_PRIVATE_CARGUMENTS DECLARE_OUTFLOW_PUBLIC_CARGUMENTS

#define OUTFLOW_C2F_PROTO _CCTK_C2F_PROTO, OUTFLOW_PRIVATE_C2F_PROTO, OUTFLOW_PUBLIC_C2F_PROTO

#define PASS_OUTFLOW_C2F(GH) _PASS_CCTK_C2F(GH), PASS_OUTFLOW_PRIVATE_C2F(GH), PASS_OUTFLOW_PUBLIC_C2F(GH)

#define DECLARE_OUTFLOW_C2F _DECLARE_CCTK_C2F DECLARE_OUTFLOW_PRIVATE_C2F DECLARE_OUTFLOW_PUBLIC_C2F

#define INITIALISE_OUTFLOW_C2F _INITIALISE_CCTK_C2F INITIALISE_OUTFLOW_PRIVATE_C2F INITIALISE_OUTFLOW_PUBLIC_C2F

#define OUTFLOW_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
