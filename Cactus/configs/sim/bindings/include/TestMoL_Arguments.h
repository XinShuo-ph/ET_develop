/*@@
   @header  TestMoL_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn TestMoL
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_TESTMOL_PRIVATE_FARGUMENTS \
INTEGER X0analytic_ga&&\
INTEGER X0constrained_ga&&\
INTEGER X0diff_ga&&\
INTEGER X0evolved_ga&&\
INTEGER X0rhs_ga&&\
INTEGER X0sandr_ga&&\
CCTK_DECLARE(CCTK_REAL,analytic_ga,(X0analytic_ga))&&\
CCTK_DECLARE(CCTK_REAL,analytic_ga_p,(X0analytic_ga))&&\
CCTK_DECLARE(CCTK_REAL,analytic_ga_p_p,(X0analytic_ga))&&\
CCTK_DECLARE(CCTK_REAL,analytic_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,analyticslow_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,constrained_ga,(X0constrained_ga))&&\
CCTK_DECLARE(CCTK_REAL,constrained_ga_p,(X0constrained_ga))&&\
CCTK_DECLARE(CCTK_REAL,constrained_ga_p_p,(X0constrained_ga))&&\
CCTK_DECLARE(CCTK_REAL,constrained_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,constrained_gf_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,constrained_gf_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,diff_ga,(X0diff_ga))&&\
CCTK_DECLARE(CCTK_REAL,diff_ga_p,(X0diff_ga))&&\
CCTK_DECLARE(CCTK_REAL,diff_ga_p_p,(X0diff_ga))&&\
CCTK_DECLARE(CCTK_REAL,diff_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,diffslow_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolved_ga,(X0evolved_ga))&&\
CCTK_DECLARE(CCTK_REAL,evolved_ga_p,(X0evolved_ga))&&\
CCTK_DECLARE(CCTK_REAL,evolved_ga_p_p,(X0evolved_ga))&&\
CCTK_DECLARE(CCTK_REAL,evolved_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolved_gf_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolved_gf_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolvedslow_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolvedslow_gf_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,evolvedslow_gf_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhs_ga,(X0rhs_ga))&&\
CCTK_DECLARE(CCTK_REAL,rhs_ga_p,(X0rhs_ga))&&\
CCTK_DECLARE(CCTK_REAL,rhs_ga_p_p,(X0rhs_ga))&&\
CCTK_DECLARE(CCTK_REAL,rhs_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhsslow_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,sandr_ga,(X0sandr_ga))&&\
CCTK_DECLARE(CCTK_REAL,sandr_ga_p,(X0sandr_ga))&&\
CCTK_DECLARE(CCTK_REAL,sandr_ga_p_p,(X0sandr_ga))&&\
CCTK_DECLARE(CCTK_REAL,sandr_gf,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,sandr_gf_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,sandr_gf_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define TESTMOL_PRIVATE_FARGUMENTS \
X0analytic_ga,X0constrained_ga,X0diff_ga,X0evolved_ga,X0rhs_ga,X0sandr_ga,analytic_ga,analytic_ga_p,analytic_ga_p_p,analytic_gf,analyticslow_gf,constrained_ga,constrained_ga_p,constrained_ga_p_p,constrained_gf,constrained_gf_p,constrained_gf_p_p,diff_ga,diff_ga_p,diff_ga_p_p,diff_gf,diffslow_gf,evolved_ga,evolved_ga_p,evolved_ga_p_p,evolved_gf,evolved_gf_p,evolved_gf_p_p,evolvedslow_gf,evolvedslow_gf_p,evolvedslow_gf_p_p,rhs_ga,rhs_ga_p,rhs_ga_p_p,rhs_gf,rhsslow_gf,sandr_ga,sandr_ga_p,sandr_ga_p_p,sandr_gf,sandr_gf_p,sandr_gf_p_p

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTMOL_PRIVATE_CARGUMENTS \
static int cctki_vi_analytic_ga = -100; \
if (cctki_vi_analytic_ga == -100) cctki_vi_analytic_ga = CCTK_VarIndex("TestMoL::analytic_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, analytic_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_analytic_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, analytic_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_analytic_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, analytic_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_analytic_ga)); \
static int cctki_vi_analytic_gf = -100; \
if (cctki_vi_analytic_gf == -100) cctki_vi_analytic_gf = CCTK_VarIndex("TestMoL::analytic_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, analytic_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_analytic_gf)); \
static int cctki_vi_analyticslow_gf = -100; \
if (cctki_vi_analyticslow_gf == -100) cctki_vi_analyticslow_gf = CCTK_VarIndex("TestMoL::analyticslow_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, analyticslow_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_analyticslow_gf)); \
static int cctki_vi_constrained_ga = -100; \
if (cctki_vi_constrained_ga == -100) cctki_vi_constrained_ga = CCTK_VarIndex("TestMoL::constrained_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constrained_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_constrained_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_constrained_ga)); \
static int cctki_vi_constrained_gf = -100; \
if (cctki_vi_constrained_gf == -100) cctki_vi_constrained_gf = CCTK_VarIndex("TestMoL::constrained_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_constrained_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_gf_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_constrained_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, constrained_gf_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_constrained_gf)); \
static int cctki_vi_diff_ga = -100; \
if (cctki_vi_diff_ga == -100) cctki_vi_diff_ga = CCTK_VarIndex("TestMoL::diff_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, diff_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_diff_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, diff_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_diff_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, diff_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_diff_ga)); \
static int cctki_vi_diff_gf = -100; \
if (cctki_vi_diff_gf == -100) cctki_vi_diff_gf = CCTK_VarIndex("TestMoL::diff_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, diff_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_diff_gf)); \
static int cctki_vi_diffslow_gf = -100; \
if (cctki_vi_diffslow_gf == -100) cctki_vi_diffslow_gf = CCTK_VarIndex("TestMoL::diffslow_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, diffslow_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_diffslow_gf)); \
static int cctki_vi_evolved_ga = -100; \
if (cctki_vi_evolved_ga == -100) cctki_vi_evolved_ga = CCTK_VarIndex("TestMoL::evolved_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_evolved_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_evolved_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_evolved_ga)); \
static int cctki_vi_evolved_gf = -100; \
if (cctki_vi_evolved_gf == -100) cctki_vi_evolved_gf = CCTK_VarIndex("TestMoL::evolved_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_evolved_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_gf_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_evolved_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolved_gf_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_evolved_gf)); \
static int cctki_vi_evolvedslow_gf = -100; \
if (cctki_vi_evolvedslow_gf == -100) cctki_vi_evolvedslow_gf = CCTK_VarIndex("TestMoL::evolvedslow_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolvedslow_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_evolvedslow_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolvedslow_gf_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_evolvedslow_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, evolvedslow_gf_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_evolvedslow_gf)); \
static int cctki_vi_rhs_ga = -100; \
if (cctki_vi_rhs_ga == -100) cctki_vi_rhs_ga = CCTK_VarIndex("TestMoL::rhs_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhs_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rhs_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhs_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_rhs_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhs_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_rhs_ga)); \
static int cctki_vi_rhs_gf = -100; \
if (cctki_vi_rhs_gf == -100) cctki_vi_rhs_gf = CCTK_VarIndex("TestMoL::rhs_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhs_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rhs_gf)); \
static int cctki_vi_rhsslow_gf = -100; \
if (cctki_vi_rhsslow_gf == -100) cctki_vi_rhsslow_gf = CCTK_VarIndex("TestMoL::rhsslow_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhsslow_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rhsslow_gf)); \
static int cctki_vi_sandr_ga = -100; \
if (cctki_vi_sandr_ga == -100) cctki_vi_sandr_ga = CCTK_VarIndex("TestMoL::sandr_ga"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_ga, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sandr_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_ga_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_sandr_ga)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_ga_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_sandr_ga)); \
static int cctki_vi_sandr_gf = -100; \
if (cctki_vi_sandr_gf == -100) cctki_vi_sandr_gf = CCTK_VarIndex("TestMoL::sandr_gf"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_gf, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sandr_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_gf_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_sandr_gf)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sandr_gf_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_sandr_gf));

#define DECLARE_TESTMOL_PRIVATE_C2F \
static int CCTKARGNUM_analytic_ga = -1; \
static int CCTKGROUPNUM_analytic_ga = -1; \
static int CCTKARGNUM_analytic_gf = -1; \
static int CCTKGROUPNUM_analytic_gf = -1; \
static int CCTKARGNUM_analyticslow_gf = -1; \
static int CCTKGROUPNUM_analyticslow_gf = -1; \
static int CCTKARGNUM_constrained_ga = -1; \
static int CCTKGROUPNUM_constrained_ga = -1; \
static int CCTKARGNUM_constrained_gf = -1; \
static int CCTKGROUPNUM_constrained_gf = -1; \
static int CCTKARGNUM_diff_ga = -1; \
static int CCTKGROUPNUM_diff_ga = -1; \
static int CCTKARGNUM_diff_gf = -1; \
static int CCTKGROUPNUM_diff_gf = -1; \
static int CCTKARGNUM_diffslow_gf = -1; \
static int CCTKGROUPNUM_diffslow_gf = -1; \
static int CCTKARGNUM_evolved_ga = -1; \
static int CCTKGROUPNUM_evolved_ga = -1; \
static int CCTKARGNUM_evolved_gf = -1; \
static int CCTKGROUPNUM_evolved_gf = -1; \
static int CCTKARGNUM_evolvedslow_gf = -1; \
static int CCTKGROUPNUM_evolvedslow_gf = -1; \
static int CCTKARGNUM_rhs_ga = -1; \
static int CCTKGROUPNUM_rhs_ga = -1; \
static int CCTKARGNUM_rhs_gf = -1; \
static int CCTKGROUPNUM_rhs_gf = -1; \
static int CCTKARGNUM_rhsslow_gf = -1; \
static int CCTKGROUPNUM_rhsslow_gf = -1; \
static int CCTKARGNUM_sandr_ga = -1; \
static int CCTKGROUPNUM_sandr_ga = -1; \
static int CCTKARGNUM_sandr_gf = -1; \
static int CCTKGROUPNUM_sandr_gf = -1;

#define INITIALISE_TESTMOL_PRIVATE_C2F \
if(CCTKARGNUM_analytic_ga == -1) CCTKARGNUM_analytic_ga = CCTK_VarIndex("TestMoL::analytic_ga"); \
if(CCTKGROUPNUM_analytic_ga == -1) CCTKGROUPNUM_analytic_ga = CCTK_GroupIndex("TestMoL::analytic_ga"); \
if(CCTKARGNUM_analytic_gf == -1) CCTKARGNUM_analytic_gf = CCTK_VarIndex("TestMoL::analytic_gf"); \
if(CCTKGROUPNUM_analytic_gf == -1) CCTKGROUPNUM_analytic_gf = CCTK_GroupIndex("TestMoL::analytic_gf"); \
if(CCTKARGNUM_analyticslow_gf == -1) CCTKARGNUM_analyticslow_gf = CCTK_VarIndex("TestMoL::analyticslow_gf"); \
if(CCTKGROUPNUM_analyticslow_gf == -1) CCTKGROUPNUM_analyticslow_gf = CCTK_GroupIndex("TestMoL::analyticslow_gf"); \
if(CCTKARGNUM_constrained_ga == -1) CCTKARGNUM_constrained_ga = CCTK_VarIndex("TestMoL::constrained_ga"); \
if(CCTKGROUPNUM_constrained_ga == -1) CCTKGROUPNUM_constrained_ga = CCTK_GroupIndex("TestMoL::constrained_ga"); \
if(CCTKARGNUM_constrained_gf == -1) CCTKARGNUM_constrained_gf = CCTK_VarIndex("TestMoL::constrained_gf"); \
if(CCTKGROUPNUM_constrained_gf == -1) CCTKGROUPNUM_constrained_gf = CCTK_GroupIndex("TestMoL::constrained_gf"); \
if(CCTKARGNUM_diff_ga == -1) CCTKARGNUM_diff_ga = CCTK_VarIndex("TestMoL::diff_ga"); \
if(CCTKGROUPNUM_diff_ga == -1) CCTKGROUPNUM_diff_ga = CCTK_GroupIndex("TestMoL::diff_ga"); \
if(CCTKARGNUM_diff_gf == -1) CCTKARGNUM_diff_gf = CCTK_VarIndex("TestMoL::diff_gf"); \
if(CCTKGROUPNUM_diff_gf == -1) CCTKGROUPNUM_diff_gf = CCTK_GroupIndex("TestMoL::diff_gf"); \
if(CCTKARGNUM_diffslow_gf == -1) CCTKARGNUM_diffslow_gf = CCTK_VarIndex("TestMoL::diffslow_gf"); \
if(CCTKGROUPNUM_diffslow_gf == -1) CCTKGROUPNUM_diffslow_gf = CCTK_GroupIndex("TestMoL::diffslow_gf"); \
if(CCTKARGNUM_evolved_ga == -1) CCTKARGNUM_evolved_ga = CCTK_VarIndex("TestMoL::evolved_ga"); \
if(CCTKGROUPNUM_evolved_ga == -1) CCTKGROUPNUM_evolved_ga = CCTK_GroupIndex("TestMoL::evolved_ga"); \
if(CCTKARGNUM_evolved_gf == -1) CCTKARGNUM_evolved_gf = CCTK_VarIndex("TestMoL::evolved_gf"); \
if(CCTKGROUPNUM_evolved_gf == -1) CCTKGROUPNUM_evolved_gf = CCTK_GroupIndex("TestMoL::evolved_gf"); \
if(CCTKARGNUM_evolvedslow_gf == -1) CCTKARGNUM_evolvedslow_gf = CCTK_VarIndex("TestMoL::evolvedslow_gf"); \
if(CCTKGROUPNUM_evolvedslow_gf == -1) CCTKGROUPNUM_evolvedslow_gf = CCTK_GroupIndex("TestMoL::evolvedslow_gf"); \
if(CCTKARGNUM_rhs_ga == -1) CCTKARGNUM_rhs_ga = CCTK_VarIndex("TestMoL::rhs_ga"); \
if(CCTKGROUPNUM_rhs_ga == -1) CCTKGROUPNUM_rhs_ga = CCTK_GroupIndex("TestMoL::rhs_ga"); \
if(CCTKARGNUM_rhs_gf == -1) CCTKARGNUM_rhs_gf = CCTK_VarIndex("TestMoL::rhs_gf"); \
if(CCTKGROUPNUM_rhs_gf == -1) CCTKGROUPNUM_rhs_gf = CCTK_GroupIndex("TestMoL::rhs_gf"); \
if(CCTKARGNUM_rhsslow_gf == -1) CCTKARGNUM_rhsslow_gf = CCTK_VarIndex("TestMoL::rhsslow_gf"); \
if(CCTKGROUPNUM_rhsslow_gf == -1) CCTKGROUPNUM_rhsslow_gf = CCTK_GroupIndex("TestMoL::rhsslow_gf"); \
if(CCTKARGNUM_sandr_ga == -1) CCTKARGNUM_sandr_ga = CCTK_VarIndex("TestMoL::sandr_ga"); \
if(CCTKGROUPNUM_sandr_ga == -1) CCTKGROUPNUM_sandr_ga = CCTK_GroupIndex("TestMoL::sandr_ga"); \
if(CCTKARGNUM_sandr_gf == -1) CCTKARGNUM_sandr_gf = CCTK_VarIndex("TestMoL::sandr_gf"); \
if(CCTKGROUPNUM_sandr_gf == -1) CCTKGROUPNUM_sandr_gf = CCTK_GroupIndex("TestMoL::sandr_gf");

#define TESTMOL_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_TESTMOL_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(analytic_ga, 0),\
PASS_GROUPSIZE(constrained_ga, 0),\
PASS_GROUPSIZE(diff_ga, 0),\
PASS_GROUPSIZE(evolved_ga, 0),\
PASS_GROUPSIZE(rhs_ga, 0),\
PASS_GROUPSIZE(sandr_ga, 0),\
(CCTK_REAL *)(PASS_REFERENCE(analytic_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(analytic_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(analytic_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(analytic_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(analyticslow_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_gf, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(constrained_gf, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(diff_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(diff_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(diff_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(diff_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(diffslow_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_gf, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(evolved_gf, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(evolvedslow_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(evolvedslow_gf, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(evolvedslow_gf, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(rhs_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rhs_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(rhs_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(rhs_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rhsslow_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_ga, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_ga, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_ga, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_gf, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_gf, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(sandr_gf, 2))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTMOL_PROTECTED_FARGUMENTS \


#define TESTMOL_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTMOL_PROTECTED_CARGUMENTS \


#define DECLARE_TESTMOL_PROTECTED_C2F \


#define INITIALISE_TESTMOL_PROTECTED_C2F \


#define TESTMOL_PROTECTED_C2F_PROTO \


#define PASS_TESTMOL_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTMOL_PUBLIC_FARGUMENTS \


#define TESTMOL_PUBLIC_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTMOL_PUBLIC_CARGUMENTS \


#define DECLARE_TESTMOL_PUBLIC_C2F \


#define INITIALISE_TESTMOL_PUBLIC_C2F \


#define TESTMOL_PUBLIC_C2F_PROTO \


#define PASS_TESTMOL_PUBLIC_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define TESTMOL_FARGUMENTS _CCTK_FARGUMENTS, TESTMOL_PRIVATE_FARGUMENTS

#define DECLARE_TESTMOL_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_TESTMOL_PRIVATE_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTMOL_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_TESTMOL_PRIVATE_CARGUMENTS

#define TESTMOL_C2F_PROTO _CCTK_C2F_PROTO, TESTMOL_PRIVATE_C2F_PROTO

#define PASS_TESTMOL_C2F(GH) _PASS_CCTK_C2F(GH), PASS_TESTMOL_PRIVATE_C2F(GH)

#define DECLARE_TESTMOL_C2F _DECLARE_CCTK_C2F DECLARE_TESTMOL_PRIVATE_C2F

#define INITIALISE_TESTMOL_C2F _INITIALISE_CCTK_C2F INITIALISE_TESTMOL_PRIVATE_C2F

#define TESTMOL_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
