/*@@
   @header  NoExcision_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn NoExcision
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_NOEXCISION_PRIVATE_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,d,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dgzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dkzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,loop_control,)&&\
CCTK_DECLARE(CCTK_INT,nes_mask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,q,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qgzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qkzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,qz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,red,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,red_mask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redgzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redkzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,redz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,res,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resgzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,reskzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,resz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define NOEXCISION_PRIVATE_FARGUMENTS \
d,dgxx,dgxy,dgxz,dgyy,dgyz,dgzz,dkxx,dkxy,dkxz,dkyy,dkyz,dkzz,dx,dy,dz,loop_control,nes_mask,q,qgxx,qgxy,qgxz,qgyy,qgyz,qgzz,qkxx,qkxy,qkxz,qkyy,qkyz,qkzz,qx,qy,qz,red,red_mask,redgxx,redgxy,redgxz,redgyy,redgyz,redgzz,redkxx,redkxy,redkxz,redkyy,redkyz,redkzz,redx,redy,redz,res,resgxx,resgxy,resgxz,resgyy,resgyz,resgzz,reskxx,reskxy,reskxz,reskyy,reskyz,reskzz,resx,resy,resz

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_NOEXCISION_PRIVATE_CARGUMENTS \
static int cctki_vi_d = -100; \
if (cctki_vi_d == -100) cctki_vi_d = CCTK_VarIndex("NoExcision::d"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_d)); \
static int cctki_vi_dgxx = -100; \
if (cctki_vi_dgxx == -100) cctki_vi_dgxx = CCTK_VarIndex("NoExcision::dgxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgxx)); \
static int cctki_vi_dgxy = -100; \
if (cctki_vi_dgxy == -100) cctki_vi_dgxy = CCTK_VarIndex("NoExcision::dgxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgxy)); \
static int cctki_vi_dgxz = -100; \
if (cctki_vi_dgxz == -100) cctki_vi_dgxz = CCTK_VarIndex("NoExcision::dgxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgxz)); \
static int cctki_vi_dgyy = -100; \
if (cctki_vi_dgyy == -100) cctki_vi_dgyy = CCTK_VarIndex("NoExcision::dgyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgyy)); \
static int cctki_vi_dgyz = -100; \
if (cctki_vi_dgyz == -100) cctki_vi_dgyz = CCTK_VarIndex("NoExcision::dgyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgyz)); \
static int cctki_vi_dgzz = -100; \
if (cctki_vi_dgzz == -100) cctki_vi_dgzz = CCTK_VarIndex("NoExcision::dgzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dgzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dgzz)); \
static int cctki_vi_dkxx = -100; \
if (cctki_vi_dkxx == -100) cctki_vi_dkxx = CCTK_VarIndex("NoExcision::dkxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkxx)); \
static int cctki_vi_dkxy = -100; \
if (cctki_vi_dkxy == -100) cctki_vi_dkxy = CCTK_VarIndex("NoExcision::dkxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkxy)); \
static int cctki_vi_dkxz = -100; \
if (cctki_vi_dkxz == -100) cctki_vi_dkxz = CCTK_VarIndex("NoExcision::dkxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkxz)); \
static int cctki_vi_dkyy = -100; \
if (cctki_vi_dkyy == -100) cctki_vi_dkyy = CCTK_VarIndex("NoExcision::dkyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkyy)); \
static int cctki_vi_dkyz = -100; \
if (cctki_vi_dkyz == -100) cctki_vi_dkyz = CCTK_VarIndex("NoExcision::dkyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkyz)); \
static int cctki_vi_dkzz = -100; \
if (cctki_vi_dkzz == -100) cctki_vi_dkzz = CCTK_VarIndex("NoExcision::dkzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dkzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dkzz)); \
static int cctki_vi_dx = -100; \
if (cctki_vi_dx == -100) cctki_vi_dx = CCTK_VarIndex("NoExcision::dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dx)); \
static int cctki_vi_dy = -100; \
if (cctki_vi_dy == -100) cctki_vi_dy = CCTK_VarIndex("NoExcision::dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dy)); \
static int cctki_vi_dz = -100; \
if (cctki_vi_dz == -100) cctki_vi_dz = CCTK_VarIndex("NoExcision::dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dz)); \
static int cctki_vi_loop_control = -100; \
if (cctki_vi_loop_control == -100) cctki_vi_loop_control = CCTK_VarIndex("NoExcision::loop_control"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, loop_control, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_loop_control)); \
static int cctki_vi_nes_mask = -100; \
if (cctki_vi_nes_mask == -100) cctki_vi_nes_mask = CCTK_VarIndex("NoExcision::nes_mask"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, nes_mask, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_nes_mask)); \
static int cctki_vi_q = -100; \
if (cctki_vi_q == -100) cctki_vi_q = CCTK_VarIndex("NoExcision::q"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, q, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_q)); \
static int cctki_vi_qgxx = -100; \
if (cctki_vi_qgxx == -100) cctki_vi_qgxx = CCTK_VarIndex("NoExcision::qgxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgxx)); \
static int cctki_vi_qgxy = -100; \
if (cctki_vi_qgxy == -100) cctki_vi_qgxy = CCTK_VarIndex("NoExcision::qgxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgxy)); \
static int cctki_vi_qgxz = -100; \
if (cctki_vi_qgxz == -100) cctki_vi_qgxz = CCTK_VarIndex("NoExcision::qgxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgxz)); \
static int cctki_vi_qgyy = -100; \
if (cctki_vi_qgyy == -100) cctki_vi_qgyy = CCTK_VarIndex("NoExcision::qgyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgyy)); \
static int cctki_vi_qgyz = -100; \
if (cctki_vi_qgyz == -100) cctki_vi_qgyz = CCTK_VarIndex("NoExcision::qgyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgyz)); \
static int cctki_vi_qgzz = -100; \
if (cctki_vi_qgzz == -100) cctki_vi_qgzz = CCTK_VarIndex("NoExcision::qgzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qgzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qgzz)); \
static int cctki_vi_qkxx = -100; \
if (cctki_vi_qkxx == -100) cctki_vi_qkxx = CCTK_VarIndex("NoExcision::qkxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkxx)); \
static int cctki_vi_qkxy = -100; \
if (cctki_vi_qkxy == -100) cctki_vi_qkxy = CCTK_VarIndex("NoExcision::qkxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkxy)); \
static int cctki_vi_qkxz = -100; \
if (cctki_vi_qkxz == -100) cctki_vi_qkxz = CCTK_VarIndex("NoExcision::qkxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkxz)); \
static int cctki_vi_qkyy = -100; \
if (cctki_vi_qkyy == -100) cctki_vi_qkyy = CCTK_VarIndex("NoExcision::qkyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkyy)); \
static int cctki_vi_qkyz = -100; \
if (cctki_vi_qkyz == -100) cctki_vi_qkyz = CCTK_VarIndex("NoExcision::qkyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkyz)); \
static int cctki_vi_qkzz = -100; \
if (cctki_vi_qkzz == -100) cctki_vi_qkzz = CCTK_VarIndex("NoExcision::qkzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qkzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qkzz)); \
static int cctki_vi_qx = -100; \
if (cctki_vi_qx == -100) cctki_vi_qx = CCTK_VarIndex("NoExcision::qx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qx)); \
static int cctki_vi_qy = -100; \
if (cctki_vi_qy == -100) cctki_vi_qy = CCTK_VarIndex("NoExcision::qy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qy)); \
static int cctki_vi_qz = -100; \
if (cctki_vi_qz == -100) cctki_vi_qz = CCTK_VarIndex("NoExcision::qz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qz)); \
static int cctki_vi_red = -100; \
if (cctki_vi_red == -100) cctki_vi_red = CCTK_VarIndex("NoExcision::red"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, red, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_red)); \
static int cctki_vi_red_mask = -100; \
if (cctki_vi_red_mask == -100) cctki_vi_red_mask = CCTK_VarIndex("NoExcision::red_mask"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, red_mask, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_red_mask)); \
static int cctki_vi_redgxx = -100; \
if (cctki_vi_redgxx == -100) cctki_vi_redgxx = CCTK_VarIndex("NoExcision::redgxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgxx)); \
static int cctki_vi_redgxy = -100; \
if (cctki_vi_redgxy == -100) cctki_vi_redgxy = CCTK_VarIndex("NoExcision::redgxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgxy)); \
static int cctki_vi_redgxz = -100; \
if (cctki_vi_redgxz == -100) cctki_vi_redgxz = CCTK_VarIndex("NoExcision::redgxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgxz)); \
static int cctki_vi_redgyy = -100; \
if (cctki_vi_redgyy == -100) cctki_vi_redgyy = CCTK_VarIndex("NoExcision::redgyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgyy)); \
static int cctki_vi_redgyz = -100; \
if (cctki_vi_redgyz == -100) cctki_vi_redgyz = CCTK_VarIndex("NoExcision::redgyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgyz)); \
static int cctki_vi_redgzz = -100; \
if (cctki_vi_redgzz == -100) cctki_vi_redgzz = CCTK_VarIndex("NoExcision::redgzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redgzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redgzz)); \
static int cctki_vi_redkxx = -100; \
if (cctki_vi_redkxx == -100) cctki_vi_redkxx = CCTK_VarIndex("NoExcision::redkxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkxx)); \
static int cctki_vi_redkxy = -100; \
if (cctki_vi_redkxy == -100) cctki_vi_redkxy = CCTK_VarIndex("NoExcision::redkxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkxy)); \
static int cctki_vi_redkxz = -100; \
if (cctki_vi_redkxz == -100) cctki_vi_redkxz = CCTK_VarIndex("NoExcision::redkxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkxz)); \
static int cctki_vi_redkyy = -100; \
if (cctki_vi_redkyy == -100) cctki_vi_redkyy = CCTK_VarIndex("NoExcision::redkyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkyy)); \
static int cctki_vi_redkyz = -100; \
if (cctki_vi_redkyz == -100) cctki_vi_redkyz = CCTK_VarIndex("NoExcision::redkyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkyz)); \
static int cctki_vi_redkzz = -100; \
if (cctki_vi_redkzz == -100) cctki_vi_redkzz = CCTK_VarIndex("NoExcision::redkzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redkzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redkzz)); \
static int cctki_vi_redx = -100; \
if (cctki_vi_redx == -100) cctki_vi_redx = CCTK_VarIndex("NoExcision::redx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redx)); \
static int cctki_vi_redy = -100; \
if (cctki_vi_redy == -100) cctki_vi_redy = CCTK_VarIndex("NoExcision::redy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redy)); \
static int cctki_vi_redz = -100; \
if (cctki_vi_redz == -100) cctki_vi_redz = CCTK_VarIndex("NoExcision::redz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, redz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_redz)); \
static int cctki_vi_res = -100; \
if (cctki_vi_res == -100) cctki_vi_res = CCTK_VarIndex("NoExcision::res"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, res, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_res)); \
static int cctki_vi_resgxx = -100; \
if (cctki_vi_resgxx == -100) cctki_vi_resgxx = CCTK_VarIndex("NoExcision::resgxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgxx)); \
static int cctki_vi_resgxy = -100; \
if (cctki_vi_resgxy == -100) cctki_vi_resgxy = CCTK_VarIndex("NoExcision::resgxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgxy)); \
static int cctki_vi_resgxz = -100; \
if (cctki_vi_resgxz == -100) cctki_vi_resgxz = CCTK_VarIndex("NoExcision::resgxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgxz)); \
static int cctki_vi_resgyy = -100; \
if (cctki_vi_resgyy == -100) cctki_vi_resgyy = CCTK_VarIndex("NoExcision::resgyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgyy)); \
static int cctki_vi_resgyz = -100; \
if (cctki_vi_resgyz == -100) cctki_vi_resgyz = CCTK_VarIndex("NoExcision::resgyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgyz)); \
static int cctki_vi_resgzz = -100; \
if (cctki_vi_resgzz == -100) cctki_vi_resgzz = CCTK_VarIndex("NoExcision::resgzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resgzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resgzz)); \
static int cctki_vi_reskxx = -100; \
if (cctki_vi_reskxx == -100) cctki_vi_reskxx = CCTK_VarIndex("NoExcision::reskxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskxx)); \
static int cctki_vi_reskxy = -100; \
if (cctki_vi_reskxy == -100) cctki_vi_reskxy = CCTK_VarIndex("NoExcision::reskxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskxy)); \
static int cctki_vi_reskxz = -100; \
if (cctki_vi_reskxz == -100) cctki_vi_reskxz = CCTK_VarIndex("NoExcision::reskxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskxz)); \
static int cctki_vi_reskyy = -100; \
if (cctki_vi_reskyy == -100) cctki_vi_reskyy = CCTK_VarIndex("NoExcision::reskyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskyy)); \
static int cctki_vi_reskyz = -100; \
if (cctki_vi_reskyz == -100) cctki_vi_reskyz = CCTK_VarIndex("NoExcision::reskyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskyz)); \
static int cctki_vi_reskzz = -100; \
if (cctki_vi_reskzz == -100) cctki_vi_reskzz = CCTK_VarIndex("NoExcision::reskzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, reskzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_reskzz)); \
static int cctki_vi_resx = -100; \
if (cctki_vi_resx == -100) cctki_vi_resx = CCTK_VarIndex("NoExcision::resx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resx)); \
static int cctki_vi_resy = -100; \
if (cctki_vi_resy == -100) cctki_vi_resy = CCTK_VarIndex("NoExcision::resy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resy)); \
static int cctki_vi_resz = -100; \
if (cctki_vi_resz == -100) cctki_vi_resz = CCTK_VarIndex("NoExcision::resz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, resz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_resz));

#define DECLARE_NOEXCISION_PRIVATE_C2F \
static int CCTKARGNUM_d = -1; \
static int CCTKGROUPNUM_cg_d_lapse = -1; \
static int CCTKARGNUM_dgxx = -1; \
static int CCTKGROUPNUM_cg_d_metric = -1; \
static int CCTKARGNUM_dgxy = -1; \
static int CCTKARGNUM_dgxz = -1; \
static int CCTKARGNUM_dgyy = -1; \
static int CCTKARGNUM_dgyz = -1; \
static int CCTKARGNUM_dgzz = -1; \
static int CCTKARGNUM_dkxx = -1; \
static int CCTKGROUPNUM_cg_d_curv = -1; \
static int CCTKARGNUM_dkxy = -1; \
static int CCTKARGNUM_dkxz = -1; \
static int CCTKARGNUM_dkyy = -1; \
static int CCTKARGNUM_dkyz = -1; \
static int CCTKARGNUM_dkzz = -1; \
static int CCTKARGNUM_dx = -1; \
static int CCTKGROUPNUM_cg_d_shift = -1; \
static int CCTKARGNUM_dy = -1; \
static int CCTKARGNUM_dz = -1; \
static int CCTKARGNUM_loop_control = -1; \
static int CCTKGROUPNUM_loop_control = -1; \
static int CCTKARGNUM_nes_mask = -1; \
static int CCTKGROUPNUM_smask = -1; \
static int CCTKARGNUM_q = -1; \
static int CCTKGROUPNUM_cg_q_lapse = -1; \
static int CCTKARGNUM_qgxx = -1; \
static int CCTKGROUPNUM_cg_q_metric = -1; \
static int CCTKARGNUM_qgxy = -1; \
static int CCTKARGNUM_qgxz = -1; \
static int CCTKARGNUM_qgyy = -1; \
static int CCTKARGNUM_qgyz = -1; \
static int CCTKARGNUM_qgzz = -1; \
static int CCTKARGNUM_qkxx = -1; \
static int CCTKGROUPNUM_cg_q_curv = -1; \
static int CCTKARGNUM_qkxy = -1; \
static int CCTKARGNUM_qkxz = -1; \
static int CCTKARGNUM_qkyy = -1; \
static int CCTKARGNUM_qkyz = -1; \
static int CCTKARGNUM_qkzz = -1; \
static int CCTKARGNUM_qx = -1; \
static int CCTKGROUPNUM_cg_q_shift = -1; \
static int CCTKARGNUM_qy = -1; \
static int CCTKARGNUM_qz = -1; \
static int CCTKARGNUM_red = -1; \
static int CCTKGROUPNUM_cg_red_all = -1; \
static int CCTKARGNUM_red_mask = -1; \
static int CCTKGROUPNUM_reduction_mask = -1; \
static int CCTKARGNUM_redgxx = -1; \
static int CCTKARGNUM_redgxy = -1; \
static int CCTKARGNUM_redgxz = -1; \
static int CCTKARGNUM_redgyy = -1; \
static int CCTKARGNUM_redgyz = -1; \
static int CCTKARGNUM_redgzz = -1; \
static int CCTKARGNUM_redkxx = -1; \
static int CCTKARGNUM_redkxy = -1; \
static int CCTKARGNUM_redkxz = -1; \
static int CCTKARGNUM_redkyy = -1; \
static int CCTKARGNUM_redkyz = -1; \
static int CCTKARGNUM_redkzz = -1; \
static int CCTKARGNUM_redx = -1; \
static int CCTKARGNUM_redy = -1; \
static int CCTKARGNUM_redz = -1; \
static int CCTKARGNUM_res = -1; \
static int CCTKGROUPNUM_cg_res_lapse = -1; \
static int CCTKARGNUM_resgxx = -1; \
static int CCTKGROUPNUM_cg_res_metric = -1; \
static int CCTKARGNUM_resgxy = -1; \
static int CCTKARGNUM_resgxz = -1; \
static int CCTKARGNUM_resgyy = -1; \
static int CCTKARGNUM_resgyz = -1; \
static int CCTKARGNUM_resgzz = -1; \
static int CCTKARGNUM_reskxx = -1; \
static int CCTKGROUPNUM_cg_res_curv = -1; \
static int CCTKARGNUM_reskxy = -1; \
static int CCTKARGNUM_reskxz = -1; \
static int CCTKARGNUM_reskyy = -1; \
static int CCTKARGNUM_reskyz = -1; \
static int CCTKARGNUM_reskzz = -1; \
static int CCTKARGNUM_resx = -1; \
static int CCTKGROUPNUM_cg_res_shift = -1; \
static int CCTKARGNUM_resy = -1; \
static int CCTKARGNUM_resz = -1;

#define INITIALISE_NOEXCISION_PRIVATE_C2F \
if(CCTKARGNUM_d == -1) CCTKARGNUM_d = CCTK_VarIndex("NoExcision::d"); \
if(CCTKGROUPNUM_cg_d_lapse == -1) CCTKGROUPNUM_cg_d_lapse = CCTK_GroupIndex("NoExcision::cg_d_lapse"); \
if(CCTKARGNUM_dgxx == -1) CCTKARGNUM_dgxx = CCTK_VarIndex("NoExcision::dgxx"); \
if(CCTKGROUPNUM_cg_d_metric == -1) CCTKGROUPNUM_cg_d_metric = CCTK_GroupIndex("NoExcision::cg_d_metric"); \
if(CCTKARGNUM_dgxy == -1) CCTKARGNUM_dgxy = CCTK_VarIndex("NoExcision::dgxy"); \
if(CCTKARGNUM_dgxz == -1) CCTKARGNUM_dgxz = CCTK_VarIndex("NoExcision::dgxz"); \
if(CCTKARGNUM_dgyy == -1) CCTKARGNUM_dgyy = CCTK_VarIndex("NoExcision::dgyy"); \
if(CCTKARGNUM_dgyz == -1) CCTKARGNUM_dgyz = CCTK_VarIndex("NoExcision::dgyz"); \
if(CCTKARGNUM_dgzz == -1) CCTKARGNUM_dgzz = CCTK_VarIndex("NoExcision::dgzz"); \
if(CCTKARGNUM_dkxx == -1) CCTKARGNUM_dkxx = CCTK_VarIndex("NoExcision::dkxx"); \
if(CCTKGROUPNUM_cg_d_curv == -1) CCTKGROUPNUM_cg_d_curv = CCTK_GroupIndex("NoExcision::cg_d_curv"); \
if(CCTKARGNUM_dkxy == -1) CCTKARGNUM_dkxy = CCTK_VarIndex("NoExcision::dkxy"); \
if(CCTKARGNUM_dkxz == -1) CCTKARGNUM_dkxz = CCTK_VarIndex("NoExcision::dkxz"); \
if(CCTKARGNUM_dkyy == -1) CCTKARGNUM_dkyy = CCTK_VarIndex("NoExcision::dkyy"); \
if(CCTKARGNUM_dkyz == -1) CCTKARGNUM_dkyz = CCTK_VarIndex("NoExcision::dkyz"); \
if(CCTKARGNUM_dkzz == -1) CCTKARGNUM_dkzz = CCTK_VarIndex("NoExcision::dkzz"); \
if(CCTKARGNUM_dx == -1) CCTKARGNUM_dx = CCTK_VarIndex("NoExcision::dx"); \
if(CCTKGROUPNUM_cg_d_shift == -1) CCTKGROUPNUM_cg_d_shift = CCTK_GroupIndex("NoExcision::cg_d_shift"); \
if(CCTKARGNUM_dy == -1) CCTKARGNUM_dy = CCTK_VarIndex("NoExcision::dy"); \
if(CCTKARGNUM_dz == -1) CCTKARGNUM_dz = CCTK_VarIndex("NoExcision::dz"); \
if(CCTKARGNUM_loop_control == -1) CCTKARGNUM_loop_control = CCTK_VarIndex("NoExcision::loop_control"); \
if(CCTKGROUPNUM_loop_control == -1) CCTKGROUPNUM_loop_control = CCTK_GroupIndex("NoExcision::loop_control"); \
if(CCTKARGNUM_nes_mask == -1) CCTKARGNUM_nes_mask = CCTK_VarIndex("NoExcision::nes_mask"); \
if(CCTKGROUPNUM_smask == -1) CCTKGROUPNUM_smask = CCTK_GroupIndex("NoExcision::smask"); \
if(CCTKARGNUM_q == -1) CCTKARGNUM_q = CCTK_VarIndex("NoExcision::q"); \
if(CCTKGROUPNUM_cg_q_lapse == -1) CCTKGROUPNUM_cg_q_lapse = CCTK_GroupIndex("NoExcision::cg_q_lapse"); \
if(CCTKARGNUM_qgxx == -1) CCTKARGNUM_qgxx = CCTK_VarIndex("NoExcision::qgxx"); \
if(CCTKGROUPNUM_cg_q_metric == -1) CCTKGROUPNUM_cg_q_metric = CCTK_GroupIndex("NoExcision::cg_q_metric"); \
if(CCTKARGNUM_qgxy == -1) CCTKARGNUM_qgxy = CCTK_VarIndex("NoExcision::qgxy"); \
if(CCTKARGNUM_qgxz == -1) CCTKARGNUM_qgxz = CCTK_VarIndex("NoExcision::qgxz"); \
if(CCTKARGNUM_qgyy == -1) CCTKARGNUM_qgyy = CCTK_VarIndex("NoExcision::qgyy"); \
if(CCTKARGNUM_qgyz == -1) CCTKARGNUM_qgyz = CCTK_VarIndex("NoExcision::qgyz"); \
if(CCTKARGNUM_qgzz == -1) CCTKARGNUM_qgzz = CCTK_VarIndex("NoExcision::qgzz"); \
if(CCTKARGNUM_qkxx == -1) CCTKARGNUM_qkxx = CCTK_VarIndex("NoExcision::qkxx"); \
if(CCTKGROUPNUM_cg_q_curv == -1) CCTKGROUPNUM_cg_q_curv = CCTK_GroupIndex("NoExcision::cg_q_curv"); \
if(CCTKARGNUM_qkxy == -1) CCTKARGNUM_qkxy = CCTK_VarIndex("NoExcision::qkxy"); \
if(CCTKARGNUM_qkxz == -1) CCTKARGNUM_qkxz = CCTK_VarIndex("NoExcision::qkxz"); \
if(CCTKARGNUM_qkyy == -1) CCTKARGNUM_qkyy = CCTK_VarIndex("NoExcision::qkyy"); \
if(CCTKARGNUM_qkyz == -1) CCTKARGNUM_qkyz = CCTK_VarIndex("NoExcision::qkyz"); \
if(CCTKARGNUM_qkzz == -1) CCTKARGNUM_qkzz = CCTK_VarIndex("NoExcision::qkzz"); \
if(CCTKARGNUM_qx == -1) CCTKARGNUM_qx = CCTK_VarIndex("NoExcision::qx"); \
if(CCTKGROUPNUM_cg_q_shift == -1) CCTKGROUPNUM_cg_q_shift = CCTK_GroupIndex("NoExcision::cg_q_shift"); \
if(CCTKARGNUM_qy == -1) CCTKARGNUM_qy = CCTK_VarIndex("NoExcision::qy"); \
if(CCTKARGNUM_qz == -1) CCTKARGNUM_qz = CCTK_VarIndex("NoExcision::qz"); \
if(CCTKARGNUM_red == -1) CCTKARGNUM_red = CCTK_VarIndex("NoExcision::red"); \
if(CCTKGROUPNUM_cg_red_all == -1) CCTKGROUPNUM_cg_red_all = CCTK_GroupIndex("NoExcision::cg_red_all"); \
if(CCTKARGNUM_red_mask == -1) CCTKARGNUM_red_mask = CCTK_VarIndex("NoExcision::red_mask"); \
if(CCTKGROUPNUM_reduction_mask == -1) CCTKGROUPNUM_reduction_mask = CCTK_GroupIndex("NoExcision::reduction_mask"); \
if(CCTKARGNUM_redgxx == -1) CCTKARGNUM_redgxx = CCTK_VarIndex("NoExcision::redgxx"); \
if(CCTKARGNUM_redgxy == -1) CCTKARGNUM_redgxy = CCTK_VarIndex("NoExcision::redgxy"); \
if(CCTKARGNUM_redgxz == -1) CCTKARGNUM_redgxz = CCTK_VarIndex("NoExcision::redgxz"); \
if(CCTKARGNUM_redgyy == -1) CCTKARGNUM_redgyy = CCTK_VarIndex("NoExcision::redgyy"); \
if(CCTKARGNUM_redgyz == -1) CCTKARGNUM_redgyz = CCTK_VarIndex("NoExcision::redgyz"); \
if(CCTKARGNUM_redgzz == -1) CCTKARGNUM_redgzz = CCTK_VarIndex("NoExcision::redgzz"); \
if(CCTKARGNUM_redkxx == -1) CCTKARGNUM_redkxx = CCTK_VarIndex("NoExcision::redkxx"); \
if(CCTKARGNUM_redkxy == -1) CCTKARGNUM_redkxy = CCTK_VarIndex("NoExcision::redkxy"); \
if(CCTKARGNUM_redkxz == -1) CCTKARGNUM_redkxz = CCTK_VarIndex("NoExcision::redkxz"); \
if(CCTKARGNUM_redkyy == -1) CCTKARGNUM_redkyy = CCTK_VarIndex("NoExcision::redkyy"); \
if(CCTKARGNUM_redkyz == -1) CCTKARGNUM_redkyz = CCTK_VarIndex("NoExcision::redkyz"); \
if(CCTKARGNUM_redkzz == -1) CCTKARGNUM_redkzz = CCTK_VarIndex("NoExcision::redkzz"); \
if(CCTKARGNUM_redx == -1) CCTKARGNUM_redx = CCTK_VarIndex("NoExcision::redx"); \
if(CCTKARGNUM_redy == -1) CCTKARGNUM_redy = CCTK_VarIndex("NoExcision::redy"); \
if(CCTKARGNUM_redz == -1) CCTKARGNUM_redz = CCTK_VarIndex("NoExcision::redz"); \
if(CCTKARGNUM_res == -1) CCTKARGNUM_res = CCTK_VarIndex("NoExcision::res"); \
if(CCTKGROUPNUM_cg_res_lapse == -1) CCTKGROUPNUM_cg_res_lapse = CCTK_GroupIndex("NoExcision::cg_res_lapse"); \
if(CCTKARGNUM_resgxx == -1) CCTKARGNUM_resgxx = CCTK_VarIndex("NoExcision::resgxx"); \
if(CCTKGROUPNUM_cg_res_metric == -1) CCTKGROUPNUM_cg_res_metric = CCTK_GroupIndex("NoExcision::cg_res_metric"); \
if(CCTKARGNUM_resgxy == -1) CCTKARGNUM_resgxy = CCTK_VarIndex("NoExcision::resgxy"); \
if(CCTKARGNUM_resgxz == -1) CCTKARGNUM_resgxz = CCTK_VarIndex("NoExcision::resgxz"); \
if(CCTKARGNUM_resgyy == -1) CCTKARGNUM_resgyy = CCTK_VarIndex("NoExcision::resgyy"); \
if(CCTKARGNUM_resgyz == -1) CCTKARGNUM_resgyz = CCTK_VarIndex("NoExcision::resgyz"); \
if(CCTKARGNUM_resgzz == -1) CCTKARGNUM_resgzz = CCTK_VarIndex("NoExcision::resgzz"); \
if(CCTKARGNUM_reskxx == -1) CCTKARGNUM_reskxx = CCTK_VarIndex("NoExcision::reskxx"); \
if(CCTKGROUPNUM_cg_res_curv == -1) CCTKGROUPNUM_cg_res_curv = CCTK_GroupIndex("NoExcision::cg_res_curv"); \
if(CCTKARGNUM_reskxy == -1) CCTKARGNUM_reskxy = CCTK_VarIndex("NoExcision::reskxy"); \
if(CCTKARGNUM_reskxz == -1) CCTKARGNUM_reskxz = CCTK_VarIndex("NoExcision::reskxz"); \
if(CCTKARGNUM_reskyy == -1) CCTKARGNUM_reskyy = CCTK_VarIndex("NoExcision::reskyy"); \
if(CCTKARGNUM_reskyz == -1) CCTKARGNUM_reskyz = CCTK_VarIndex("NoExcision::reskyz"); \
if(CCTKARGNUM_reskzz == -1) CCTKARGNUM_reskzz = CCTK_VarIndex("NoExcision::reskzz"); \
if(CCTKARGNUM_resx == -1) CCTKARGNUM_resx = CCTK_VarIndex("NoExcision::resx"); \
if(CCTKGROUPNUM_cg_res_shift == -1) CCTKGROUPNUM_cg_res_shift = CCTK_GroupIndex("NoExcision::cg_res_shift"); \
if(CCTKARGNUM_resy == -1) CCTKARGNUM_resy = CCTK_VarIndex("NoExcision::resy"); \
if(CCTKARGNUM_resz == -1) CCTKARGNUM_resz = CCTK_VarIndex("NoExcision::resz");

#define NOEXCISION_PRIVATE_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_NOEXCISION_PRIVATE_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dgzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dkzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(loop_control, 0)),\
(CCTK_INT *)(PASS_REFERENCE(nes_mask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(q, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qgzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qkzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(red, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(red_mask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redgzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redkzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(redz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(res, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resgzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(reskzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(resz, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_NOEXCISION_PROTECTED_FARGUMENTS \


#define NOEXCISION_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_NOEXCISION_PROTECTED_CARGUMENTS \


#define DECLARE_NOEXCISION_PROTECTED_C2F \


#define INITIALISE_NOEXCISION_PROTECTED_C2F \


#define NOEXCISION_PROTECTED_C2F_PROTO \


#define PASS_NOEXCISION_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_NOEXCISION_PUBLIC_FARGUMENTS \
INTEGER X0sf_radius&&\
INTEGER X1sf_radius&&\
INTEGER sf_active_length&&\
INTEGER sf_coordinate_descriptors_length&&\
INTEGER sf_info_length&&\
INTEGER sf_maxreflevel_length&&\
INTEGER sf_minreflevel_length&&\
INTEGER sf_origin_length&&\
INTEGER sf_radius_length&&\
INTEGER sf_shape_descriptors_length&&\
INTEGER sf_valid_length&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_INT,conformal_state,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psix,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psizz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,sf_active,(sf_active_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_area,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_maxreflevel,(sf_maxreflevel_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_mean_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_minreflevel,(sf_minreflevel_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghostsphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghoststheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_ntheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_x,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_y,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_z,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xx,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_zz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_radius,(X0sf_radius,X1sf_radius,sf_radius_length))&&\
CCTK_DECLARE(CCTK_INT,sf_valid,(sf_valid_length))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define NOEXCISION_PUBLIC_FARGUMENTS \
X0sf_radius,X1sf_radius,sf_active_length,sf_coordinate_descriptors_length,sf_info_length,sf_maxreflevel_length,sf_minreflevel_length,sf_origin_length,sf_radius_length,sf_shape_descriptors_length,sf_valid_length,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,conformal_state,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,psi,psix,psixx,psixy,psixz,psiy,psiyy,psiyz,psiz,psizz,r,sf_active,sf_area,sf_centroid_x,sf_centroid_y,sf_centroid_z,sf_delta_phi,sf_delta_theta,sf_max_radius,sf_max_x,sf_max_y,sf_max_z,sf_maxreflevel,sf_mean_radius,sf_min_radius,sf_min_x,sf_min_y,sf_min_z,sf_minreflevel,sf_nghostsphi,sf_nghoststheta,sf_nphi,sf_ntheta,sf_origin_phi,sf_origin_theta,sf_origin_x,sf_origin_y,sf_origin_z,sf_quadrupole_xx,sf_quadrupole_xy,sf_quadrupole_xz,sf_quadrupole_yy,sf_quadrupole_yz,sf_quadrupole_zz,sf_radius,sf_valid,shift_state,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_NOEXCISION_PUBLIC_CARGUMENTS \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_conformal_state = -100; \
if (cctki_vi_conformal_state == -100) cctki_vi_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, conformal_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_conformal_state)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_psi = -100; \
if (cctki_vi_psi == -100) cctki_vi_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psi)); \
static int cctki_vi_psix = -100; \
if (cctki_vi_psix == -100) cctki_vi_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psix, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psix)); \
static int cctki_vi_psixx = -100; \
if (cctki_vi_psixx == -100) cctki_vi_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixx)); \
static int cctki_vi_psixy = -100; \
if (cctki_vi_psixy == -100) cctki_vi_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixy)); \
static int cctki_vi_psixz = -100; \
if (cctki_vi_psixz == -100) cctki_vi_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixz)); \
static int cctki_vi_psiy = -100; \
if (cctki_vi_psiy == -100) cctki_vi_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiy)); \
static int cctki_vi_psiyy = -100; \
if (cctki_vi_psiyy == -100) cctki_vi_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyy)); \
static int cctki_vi_psiyz = -100; \
if (cctki_vi_psiyz == -100) cctki_vi_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyz)); \
static int cctki_vi_psiz = -100; \
if (cctki_vi_psiz == -100) cctki_vi_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiz)); \
static int cctki_vi_psizz = -100; \
if (cctki_vi_psizz == -100) cctki_vi_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psizz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psizz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_sf_active = -100; \
if (cctki_vi_sf_active == -100) cctki_vi_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_active, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_active)); \
static int cctki_vi_sf_area = -100; \
if (cctki_vi_sf_area == -100) cctki_vi_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_area)); \
static int cctki_vi_sf_centroid_x = -100; \
if (cctki_vi_sf_centroid_x == -100) cctki_vi_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_x)); \
static int cctki_vi_sf_centroid_y = -100; \
if (cctki_vi_sf_centroid_y == -100) cctki_vi_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_y)); \
static int cctki_vi_sf_centroid_z = -100; \
if (cctki_vi_sf_centroid_z == -100) cctki_vi_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_z)); \
static int cctki_vi_sf_delta_phi = -100; \
if (cctki_vi_sf_delta_phi == -100) cctki_vi_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_phi)); \
static int cctki_vi_sf_delta_theta = -100; \
if (cctki_vi_sf_delta_theta == -100) cctki_vi_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_theta)); \
static int cctki_vi_sf_max_radius = -100; \
if (cctki_vi_sf_max_radius == -100) cctki_vi_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_radius)); \
static int cctki_vi_sf_max_x = -100; \
if (cctki_vi_sf_max_x == -100) cctki_vi_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_x)); \
static int cctki_vi_sf_max_y = -100; \
if (cctki_vi_sf_max_y == -100) cctki_vi_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_y)); \
static int cctki_vi_sf_max_z = -100; \
if (cctki_vi_sf_max_z == -100) cctki_vi_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_z)); \
static int cctki_vi_sf_maxreflevel = -100; \
if (cctki_vi_sf_maxreflevel == -100) cctki_vi_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_maxreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_maxreflevel)); \
static int cctki_vi_sf_mean_radius = -100; \
if (cctki_vi_sf_mean_radius == -100) cctki_vi_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_mean_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_mean_radius)); \
static int cctki_vi_sf_min_radius = -100; \
if (cctki_vi_sf_min_radius == -100) cctki_vi_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_radius)); \
static int cctki_vi_sf_min_x = -100; \
if (cctki_vi_sf_min_x == -100) cctki_vi_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_x)); \
static int cctki_vi_sf_min_y = -100; \
if (cctki_vi_sf_min_y == -100) cctki_vi_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_y)); \
static int cctki_vi_sf_min_z = -100; \
if (cctki_vi_sf_min_z == -100) cctki_vi_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_z)); \
static int cctki_vi_sf_minreflevel = -100; \
if (cctki_vi_sf_minreflevel == -100) cctki_vi_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_minreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_minreflevel)); \
static int cctki_vi_sf_nghostsphi = -100; \
if (cctki_vi_sf_nghostsphi == -100) cctki_vi_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghostsphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghostsphi)); \
static int cctki_vi_sf_nghoststheta = -100; \
if (cctki_vi_sf_nghoststheta == -100) cctki_vi_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghoststheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghoststheta)); \
static int cctki_vi_sf_nphi = -100; \
if (cctki_vi_sf_nphi == -100) cctki_vi_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nphi)); \
static int cctki_vi_sf_ntheta = -100; \
if (cctki_vi_sf_ntheta == -100) cctki_vi_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_ntheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_ntheta)); \
static int cctki_vi_sf_origin_phi = -100; \
if (cctki_vi_sf_origin_phi == -100) cctki_vi_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_phi)); \
static int cctki_vi_sf_origin_theta = -100; \
if (cctki_vi_sf_origin_theta == -100) cctki_vi_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_theta)); \
static int cctki_vi_sf_origin_x = -100; \
if (cctki_vi_sf_origin_x == -100) cctki_vi_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_x)); \
static int cctki_vi_sf_origin_y = -100; \
if (cctki_vi_sf_origin_y == -100) cctki_vi_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_y)); \
static int cctki_vi_sf_origin_z = -100; \
if (cctki_vi_sf_origin_z == -100) cctki_vi_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_z)); \
static int cctki_vi_sf_quadrupole_xx = -100; \
if (cctki_vi_sf_quadrupole_xx == -100) cctki_vi_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xx)); \
static int cctki_vi_sf_quadrupole_xy = -100; \
if (cctki_vi_sf_quadrupole_xy == -100) cctki_vi_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xy)); \
static int cctki_vi_sf_quadrupole_xz = -100; \
if (cctki_vi_sf_quadrupole_xz == -100) cctki_vi_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xz)); \
static int cctki_vi_sf_quadrupole_yy = -100; \
if (cctki_vi_sf_quadrupole_yy == -100) cctki_vi_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yy)); \
static int cctki_vi_sf_quadrupole_yz = -100; \
if (cctki_vi_sf_quadrupole_yz == -100) cctki_vi_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yz)); \
static int cctki_vi_sf_quadrupole_zz = -100; \
if (cctki_vi_sf_quadrupole_zz == -100) cctki_vi_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_zz)); \
static int cctki_vi_sf_radius = -100; \
if (cctki_vi_sf_radius == -100) cctki_vi_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_radius)); \
static int cctki_vi_sf_valid = -100; \
if (cctki_vi_sf_valid == -100) cctki_vi_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_valid, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_valid)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_NOEXCISION_PUBLIC_C2F \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_conformal_state = -1; \
static int CCTKGROUPNUM_conformal_state = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKGROUPNUM_confac = -1; \
static int CCTKARGNUM_psix = -1; \
static int CCTKGROUPNUM_confac_1derivs = -1; \
static int CCTKARGNUM_psixx = -1; \
static int CCTKGROUPNUM_confac_2derivs = -1; \
static int CCTKARGNUM_psixy = -1; \
static int CCTKARGNUM_psixz = -1; \
static int CCTKARGNUM_psiy = -1; \
static int CCTKARGNUM_psiyy = -1; \
static int CCTKARGNUM_psiyz = -1; \
static int CCTKARGNUM_psiz = -1; \
static int CCTKARGNUM_psizz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_sf_active = -1; \
static int CCTKGROUPNUM_sf_active = -1; \
static int CCTKARGNUM_sf_area = -1; \
static int CCTKGROUPNUM_sf_info = -1; \
static int CCTKARGNUM_sf_centroid_x = -1; \
static int CCTKARGNUM_sf_centroid_y = -1; \
static int CCTKARGNUM_sf_centroid_z = -1; \
static int CCTKARGNUM_sf_delta_phi = -1; \
static int CCTKGROUPNUM_sf_coordinate_descriptors = -1; \
static int CCTKARGNUM_sf_delta_theta = -1; \
static int CCTKARGNUM_sf_max_radius = -1; \
static int CCTKARGNUM_sf_max_x = -1; \
static int CCTKARGNUM_sf_max_y = -1; \
static int CCTKARGNUM_sf_max_z = -1; \
static int CCTKARGNUM_sf_maxreflevel = -1; \
static int CCTKGROUPNUM_sf_maxreflevel = -1; \
static int CCTKARGNUM_sf_mean_radius = -1; \
static int CCTKARGNUM_sf_min_radius = -1; \
static int CCTKARGNUM_sf_min_x = -1; \
static int CCTKARGNUM_sf_min_y = -1; \
static int CCTKARGNUM_sf_min_z = -1; \
static int CCTKARGNUM_sf_minreflevel = -1; \
static int CCTKGROUPNUM_sf_minreflevel = -1; \
static int CCTKARGNUM_sf_nghostsphi = -1; \
static int CCTKGROUPNUM_sf_shape_descriptors = -1; \
static int CCTKARGNUM_sf_nghoststheta = -1; \
static int CCTKARGNUM_sf_nphi = -1; \
static int CCTKARGNUM_sf_ntheta = -1; \
static int CCTKARGNUM_sf_origin_phi = -1; \
static int CCTKARGNUM_sf_origin_theta = -1; \
static int CCTKARGNUM_sf_origin_x = -1; \
static int CCTKGROUPNUM_sf_origin = -1; \
static int CCTKARGNUM_sf_origin_y = -1; \
static int CCTKARGNUM_sf_origin_z = -1; \
static int CCTKARGNUM_sf_quadrupole_xx = -1; \
static int CCTKARGNUM_sf_quadrupole_xy = -1; \
static int CCTKARGNUM_sf_quadrupole_xz = -1; \
static int CCTKARGNUM_sf_quadrupole_yy = -1; \
static int CCTKARGNUM_sf_quadrupole_yz = -1; \
static int CCTKARGNUM_sf_quadrupole_zz = -1; \
static int CCTKARGNUM_sf_radius = -1; \
static int CCTKGROUPNUM_sf_radius = -1; \
static int CCTKARGNUM_sf_valid = -1; \
static int CCTKGROUPNUM_sf_valid = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_NOEXCISION_PUBLIC_C2F \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_conformal_state == -1) CCTKARGNUM_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKGROUPNUM_conformal_state == -1) CCTKGROUPNUM_conformal_state = CCTK_GroupIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
if(CCTKGROUPNUM_confac == -1) CCTKGROUPNUM_confac = CCTK_GroupIndex("STATICCONFORMAL::confac"); \
if(CCTKARGNUM_psix == -1) CCTKARGNUM_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
if(CCTKGROUPNUM_confac_1derivs == -1) CCTKGROUPNUM_confac_1derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_1derivs"); \
if(CCTKARGNUM_psixx == -1) CCTKARGNUM_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
if(CCTKGROUPNUM_confac_2derivs == -1) CCTKGROUPNUM_confac_2derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_2derivs"); \
if(CCTKARGNUM_psixy == -1) CCTKARGNUM_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
if(CCTKARGNUM_psixz == -1) CCTKARGNUM_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
if(CCTKARGNUM_psiy == -1) CCTKARGNUM_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
if(CCTKARGNUM_psiyy == -1) CCTKARGNUM_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
if(CCTKARGNUM_psiyz == -1) CCTKARGNUM_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
if(CCTKARGNUM_psiz == -1) CCTKARGNUM_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
if(CCTKARGNUM_psizz == -1) CCTKARGNUM_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_sf_active == -1) CCTKARGNUM_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
if(CCTKGROUPNUM_sf_active == -1) CCTKGROUPNUM_sf_active = CCTK_GroupIndex("SPHERICALSURFACE::sf_active"); \
if(CCTKARGNUM_sf_area == -1) CCTKARGNUM_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
if(CCTKGROUPNUM_sf_info == -1) CCTKGROUPNUM_sf_info = CCTK_GroupIndex("SPHERICALSURFACE::sf_info"); \
if(CCTKARGNUM_sf_centroid_x == -1) CCTKARGNUM_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
if(CCTKARGNUM_sf_centroid_y == -1) CCTKARGNUM_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
if(CCTKARGNUM_sf_centroid_z == -1) CCTKARGNUM_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
if(CCTKARGNUM_sf_delta_phi == -1) CCTKARGNUM_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
if(CCTKGROUPNUM_sf_coordinate_descriptors == -1) CCTKGROUPNUM_sf_coordinate_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_coordinate_descriptors"); \
if(CCTKARGNUM_sf_delta_theta == -1) CCTKARGNUM_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
if(CCTKARGNUM_sf_max_radius == -1) CCTKARGNUM_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
if(CCTKARGNUM_sf_max_x == -1) CCTKARGNUM_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
if(CCTKARGNUM_sf_max_y == -1) CCTKARGNUM_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
if(CCTKARGNUM_sf_max_z == -1) CCTKARGNUM_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
if(CCTKARGNUM_sf_maxreflevel == -1) CCTKARGNUM_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
if(CCTKGROUPNUM_sf_maxreflevel == -1) CCTKGROUPNUM_sf_maxreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_maxreflevel"); \
if(CCTKARGNUM_sf_mean_radius == -1) CCTKARGNUM_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
if(CCTKARGNUM_sf_min_radius == -1) CCTKARGNUM_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
if(CCTKARGNUM_sf_min_x == -1) CCTKARGNUM_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
if(CCTKARGNUM_sf_min_y == -1) CCTKARGNUM_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
if(CCTKARGNUM_sf_min_z == -1) CCTKARGNUM_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
if(CCTKARGNUM_sf_minreflevel == -1) CCTKARGNUM_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
if(CCTKGROUPNUM_sf_minreflevel == -1) CCTKGROUPNUM_sf_minreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_minreflevel"); \
if(CCTKARGNUM_sf_nghostsphi == -1) CCTKARGNUM_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
if(CCTKGROUPNUM_sf_shape_descriptors == -1) CCTKGROUPNUM_sf_shape_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_shape_descriptors"); \
if(CCTKARGNUM_sf_nghoststheta == -1) CCTKARGNUM_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
if(CCTKARGNUM_sf_nphi == -1) CCTKARGNUM_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
if(CCTKARGNUM_sf_ntheta == -1) CCTKARGNUM_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
if(CCTKARGNUM_sf_origin_phi == -1) CCTKARGNUM_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
if(CCTKARGNUM_sf_origin_theta == -1) CCTKARGNUM_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
if(CCTKARGNUM_sf_origin_x == -1) CCTKARGNUM_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
if(CCTKGROUPNUM_sf_origin == -1) CCTKGROUPNUM_sf_origin = CCTK_GroupIndex("SPHERICALSURFACE::sf_origin"); \
if(CCTKARGNUM_sf_origin_y == -1) CCTKARGNUM_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
if(CCTKARGNUM_sf_origin_z == -1) CCTKARGNUM_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
if(CCTKARGNUM_sf_quadrupole_xx == -1) CCTKARGNUM_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
if(CCTKARGNUM_sf_quadrupole_xy == -1) CCTKARGNUM_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
if(CCTKARGNUM_sf_quadrupole_xz == -1) CCTKARGNUM_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
if(CCTKARGNUM_sf_quadrupole_yy == -1) CCTKARGNUM_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
if(CCTKARGNUM_sf_quadrupole_yz == -1) CCTKARGNUM_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
if(CCTKARGNUM_sf_quadrupole_zz == -1) CCTKARGNUM_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
if(CCTKARGNUM_sf_radius == -1) CCTKARGNUM_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
if(CCTKGROUPNUM_sf_radius == -1) CCTKGROUPNUM_sf_radius = CCTK_GroupIndex("SPHERICALSURFACE::sf_radius"); \
if(CCTKARGNUM_sf_valid == -1) CCTKARGNUM_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
if(CCTKGROUPNUM_sf_valid == -1) CCTKGROUPNUM_sf_valid = CCTK_GroupIndex("SPHERICALSURFACE::sf_valid"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define NOEXCISION_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int

#define PASS_NOEXCISION_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(sf_radius, 0),\
PASS_GROUPSIZE(sf_radius, 1),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_active),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_coordinate_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_info),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_maxreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_minreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_origin),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_radius),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_shape_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_valid),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(conformal_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psix, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psizz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_active, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_area, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_maxreflevel, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_mean_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_minreflevel, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghostsphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghoststheta, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_ntheta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_zz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_valid, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define NOEXCISION_FARGUMENTS _CCTK_FARGUMENTS, NOEXCISION_PRIVATE_FARGUMENTS, NOEXCISION_PUBLIC_FARGUMENTS

#define DECLARE_NOEXCISION_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_NOEXCISION_PRIVATE_FARGUMENTS DECLARE_NOEXCISION_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_NOEXCISION_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_NOEXCISION_PRIVATE_CARGUMENTS DECLARE_NOEXCISION_PUBLIC_CARGUMENTS

#define NOEXCISION_C2F_PROTO _CCTK_C2F_PROTO, NOEXCISION_PRIVATE_C2F_PROTO, NOEXCISION_PUBLIC_C2F_PROTO

#define PASS_NOEXCISION_C2F(GH) _PASS_CCTK_C2F(GH), PASS_NOEXCISION_PRIVATE_C2F(GH), PASS_NOEXCISION_PUBLIC_C2F(GH)

#define DECLARE_NOEXCISION_C2F _DECLARE_CCTK_C2F DECLARE_NOEXCISION_PRIVATE_C2F DECLARE_NOEXCISION_PUBLIC_C2F

#define INITIALISE_NOEXCISION_C2F _INITIALISE_CCTK_C2F INITIALISE_NOEXCISION_PRIVATE_C2F INITIALISE_NOEXCISION_PUBLIC_C2F

#define NOEXCISION_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
