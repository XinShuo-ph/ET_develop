/*@@
   @header  TestAllTypes_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn TestAllTypes
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_TESTALLTYPES_PRIVATE_FARGUMENTS \
CCTK_DECLARE(CCTK_COMPLEX,vcomplex,)&&\
CCTK_DECLARE(CCTK_COMPLEX16,vcomplex16,)&&\
CCTK_DECLARE(CCTK_COMPLEX32,vcomplex32,)&&\
CCTK_DECLARE(CCTK_COMPLEX8,vcomplex8,)&&\
CCTK_DECLARE(CCTK_INT,vint,)&&\
CCTK_DECLARE(CCTK_INT1,vint1,)&&\
CCTK_DECLARE(CCTK_INT16,vint16,)&&\
CCTK_DECLARE(CCTK_INT2,vint2,)&&\
CCTK_DECLARE(CCTK_INT4,vint4,)&&\
CCTK_DECLARE(CCTK_INT8,vint8,)&&\
CCTK_DECLARE(CCTK_REAL,vreal,)&&\
CCTK_DECLARE(CCTK_REAL16,vreal16,)&&\
CCTK_DECLARE(CCTK_REAL4,vreal4,)&&\
CCTK_DECLARE(CCTK_REAL8,vreal8,)&&\


#define TESTALLTYPES_PRIVATE_FARGUMENTS \
vcomplex,vcomplex16,vcomplex32,vcomplex8,vint,vint1,vint16,vint2,vint4,vint8,vreal,vreal16,vreal4,vreal8

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTALLTYPES_PRIVATE_CARGUMENTS \
static int cctki_vi_vcomplex = -100; \
if (cctki_vi_vcomplex == -100) cctki_vi_vcomplex = CCTK_VarIndex("TestAllTypes::vcomplex"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, vcomplex, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vcomplex)); \
static int cctki_vi_vcomplex16 = -100; \
if (cctki_vi_vcomplex16 == -100) cctki_vi_vcomplex16 = CCTK_VarIndex("TestAllTypes::vcomplex16"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX16 * restrict const, vcomplex16, (CCTK_COMPLEX16 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vcomplex16)); \
static int cctki_vi_vcomplex32 = -100; \
if (cctki_vi_vcomplex32 == -100) cctki_vi_vcomplex32 = CCTK_VarIndex("TestAllTypes::vcomplex32"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX32 * restrict const, vcomplex32, (CCTK_COMPLEX32 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vcomplex32)); \
static int cctki_vi_vcomplex8 = -100; \
if (cctki_vi_vcomplex8 == -100) cctki_vi_vcomplex8 = CCTK_VarIndex("TestAllTypes::vcomplex8"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX8 * restrict const, vcomplex8, (CCTK_COMPLEX8 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vcomplex8)); \
static int cctki_vi_vint = -100; \
if (cctki_vi_vint == -100) cctki_vi_vint = CCTK_VarIndex("TestAllTypes::vint"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, vint, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint)); \
static int cctki_vi_vint1 = -100; \
if (cctki_vi_vint1 == -100) cctki_vi_vint1 = CCTK_VarIndex("TestAllTypes::vint1"); \
CCTK_DECLARE_INIT (CCTK_INT1 * restrict const, vint1, (CCTK_INT1 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint1)); \
static int cctki_vi_vint16 = -100; \
if (cctki_vi_vint16 == -100) cctki_vi_vint16 = CCTK_VarIndex("TestAllTypes::vint16"); \
CCTK_DECLARE_INIT (CCTK_INT16 * restrict const, vint16, (CCTK_INT16 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint16)); \
static int cctki_vi_vint2 = -100; \
if (cctki_vi_vint2 == -100) cctki_vi_vint2 = CCTK_VarIndex("TestAllTypes::vint2"); \
CCTK_DECLARE_INIT (CCTK_INT2 * restrict const, vint2, (CCTK_INT2 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint2)); \
static int cctki_vi_vint4 = -100; \
if (cctki_vi_vint4 == -100) cctki_vi_vint4 = CCTK_VarIndex("TestAllTypes::vint4"); \
CCTK_DECLARE_INIT (CCTK_INT4 * restrict const, vint4, (CCTK_INT4 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint4)); \
static int cctki_vi_vint8 = -100; \
if (cctki_vi_vint8 == -100) cctki_vi_vint8 = CCTK_VarIndex("TestAllTypes::vint8"); \
CCTK_DECLARE_INIT (CCTK_INT8 * restrict const, vint8, (CCTK_INT8 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vint8)); \
static int cctki_vi_vreal = -100; \
if (cctki_vi_vreal == -100) cctki_vi_vreal = CCTK_VarIndex("TestAllTypes::vreal"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, vreal, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vreal)); \
static int cctki_vi_vreal16 = -100; \
if (cctki_vi_vreal16 == -100) cctki_vi_vreal16 = CCTK_VarIndex("TestAllTypes::vreal16"); \
CCTK_DECLARE_INIT (CCTK_REAL16 * restrict const, vreal16, (CCTK_REAL16 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vreal16)); \
static int cctki_vi_vreal4 = -100; \
if (cctki_vi_vreal4 == -100) cctki_vi_vreal4 = CCTK_VarIndex("TestAllTypes::vreal4"); \
CCTK_DECLARE_INIT (CCTK_REAL4 * restrict const, vreal4, (CCTK_REAL4 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vreal4)); \
static int cctki_vi_vreal8 = -100; \
if (cctki_vi_vreal8 == -100) cctki_vi_vreal8 = CCTK_VarIndex("TestAllTypes::vreal8"); \
CCTK_DECLARE_INIT (CCTK_REAL8 * restrict const, vreal8, (CCTK_REAL8 *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_vreal8));

#define DECLARE_TESTALLTYPES_PRIVATE_C2F \
static int CCTKARGNUM_vcomplex = -1; \
static int CCTKGROUPNUM_vcomplex = -1; \
static int CCTKARGNUM_vcomplex16 = -1; \
static int CCTKGROUPNUM_vcomplex16 = -1; \
static int CCTKARGNUM_vcomplex32 = -1; \
static int CCTKGROUPNUM_vcomplex32 = -1; \
static int CCTKARGNUM_vcomplex8 = -1; \
static int CCTKGROUPNUM_vcomplex8 = -1; \
static int CCTKARGNUM_vint = -1; \
static int CCTKGROUPNUM_vint = -1; \
static int CCTKARGNUM_vint1 = -1; \
static int CCTKGROUPNUM_vint1 = -1; \
static int CCTKARGNUM_vint16 = -1; \
static int CCTKGROUPNUM_vint16 = -1; \
static int CCTKARGNUM_vint2 = -1; \
static int CCTKGROUPNUM_vint2 = -1; \
static int CCTKARGNUM_vint4 = -1; \
static int CCTKGROUPNUM_vint4 = -1; \
static int CCTKARGNUM_vint8 = -1; \
static int CCTKGROUPNUM_vint8 = -1; \
static int CCTKARGNUM_vreal = -1; \
static int CCTKGROUPNUM_vreal = -1; \
static int CCTKARGNUM_vreal16 = -1; \
static int CCTKGROUPNUM_vreal16 = -1; \
static int CCTKARGNUM_vreal4 = -1; \
static int CCTKGROUPNUM_vreal4 = -1; \
static int CCTKARGNUM_vreal8 = -1; \
static int CCTKGROUPNUM_vreal8 = -1;

#define INITIALISE_TESTALLTYPES_PRIVATE_C2F \
if(CCTKARGNUM_vcomplex == -1) CCTKARGNUM_vcomplex = CCTK_VarIndex("TestAllTypes::vcomplex"); \
if(CCTKGROUPNUM_vcomplex == -1) CCTKGROUPNUM_vcomplex = CCTK_GroupIndex("TestAllTypes::vcomplex"); \
if(CCTKARGNUM_vcomplex16 == -1) CCTKARGNUM_vcomplex16 = CCTK_VarIndex("TestAllTypes::vcomplex16"); \
if(CCTKGROUPNUM_vcomplex16 == -1) CCTKGROUPNUM_vcomplex16 = CCTK_GroupIndex("TestAllTypes::vcomplex16"); \
if(CCTKARGNUM_vcomplex32 == -1) CCTKARGNUM_vcomplex32 = CCTK_VarIndex("TestAllTypes::vcomplex32"); \
if(CCTKGROUPNUM_vcomplex32 == -1) CCTKGROUPNUM_vcomplex32 = CCTK_GroupIndex("TestAllTypes::vcomplex32"); \
if(CCTKARGNUM_vcomplex8 == -1) CCTKARGNUM_vcomplex8 = CCTK_VarIndex("TestAllTypes::vcomplex8"); \
if(CCTKGROUPNUM_vcomplex8 == -1) CCTKGROUPNUM_vcomplex8 = CCTK_GroupIndex("TestAllTypes::vcomplex8"); \
if(CCTKARGNUM_vint == -1) CCTKARGNUM_vint = CCTK_VarIndex("TestAllTypes::vint"); \
if(CCTKGROUPNUM_vint == -1) CCTKGROUPNUM_vint = CCTK_GroupIndex("TestAllTypes::vint"); \
if(CCTKARGNUM_vint1 == -1) CCTKARGNUM_vint1 = CCTK_VarIndex("TestAllTypes::vint1"); \
if(CCTKGROUPNUM_vint1 == -1) CCTKGROUPNUM_vint1 = CCTK_GroupIndex("TestAllTypes::vint1"); \
if(CCTKARGNUM_vint16 == -1) CCTKARGNUM_vint16 = CCTK_VarIndex("TestAllTypes::vint16"); \
if(CCTKGROUPNUM_vint16 == -1) CCTKGROUPNUM_vint16 = CCTK_GroupIndex("TestAllTypes::vint16"); \
if(CCTKARGNUM_vint2 == -1) CCTKARGNUM_vint2 = CCTK_VarIndex("TestAllTypes::vint2"); \
if(CCTKGROUPNUM_vint2 == -1) CCTKGROUPNUM_vint2 = CCTK_GroupIndex("TestAllTypes::vint2"); \
if(CCTKARGNUM_vint4 == -1) CCTKARGNUM_vint4 = CCTK_VarIndex("TestAllTypes::vint4"); \
if(CCTKGROUPNUM_vint4 == -1) CCTKGROUPNUM_vint4 = CCTK_GroupIndex("TestAllTypes::vint4"); \
if(CCTKARGNUM_vint8 == -1) CCTKARGNUM_vint8 = CCTK_VarIndex("TestAllTypes::vint8"); \
if(CCTKGROUPNUM_vint8 == -1) CCTKGROUPNUM_vint8 = CCTK_GroupIndex("TestAllTypes::vint8"); \
if(CCTKARGNUM_vreal == -1) CCTKARGNUM_vreal = CCTK_VarIndex("TestAllTypes::vreal"); \
if(CCTKGROUPNUM_vreal == -1) CCTKGROUPNUM_vreal = CCTK_GroupIndex("TestAllTypes::vreal"); \
if(CCTKARGNUM_vreal16 == -1) CCTKARGNUM_vreal16 = CCTK_VarIndex("TestAllTypes::vreal16"); \
if(CCTKGROUPNUM_vreal16 == -1) CCTKGROUPNUM_vreal16 = CCTK_GroupIndex("TestAllTypes::vreal16"); \
if(CCTKARGNUM_vreal4 == -1) CCTKARGNUM_vreal4 = CCTK_VarIndex("TestAllTypes::vreal4"); \
if(CCTKGROUPNUM_vreal4 == -1) CCTKGROUPNUM_vreal4 = CCTK_GroupIndex("TestAllTypes::vreal4"); \
if(CCTKARGNUM_vreal8 == -1) CCTKARGNUM_vreal8 = CCTK_VarIndex("TestAllTypes::vreal8"); \
if(CCTKGROUPNUM_vreal8 == -1) CCTKGROUPNUM_vreal8 = CCTK_GroupIndex("TestAllTypes::vreal8");

#define TESTALLTYPES_PRIVATE_C2F_PROTO \
CCTK_COMPLEX *,CCTK_COMPLEX16 *,CCTK_COMPLEX32 *,CCTK_COMPLEX8 *,CCTK_INT *,CCTK_INT1 *,CCTK_INT16 *,CCTK_INT2 *,CCTK_INT4 *,CCTK_INT8 *,CCTK_REAL *,CCTK_REAL16 *,CCTK_REAL4 *,CCTK_REAL8 *

#define PASS_TESTALLTYPES_PRIVATE_C2F(GH) \
(CCTK_COMPLEX *)(PASS_REFERENCE(vcomplex, 0)),\
(CCTK_COMPLEX16 *)(PASS_REFERENCE(vcomplex16, 0)),\
(CCTK_COMPLEX32 *)(PASS_REFERENCE(vcomplex32, 0)),\
(CCTK_COMPLEX8 *)(PASS_REFERENCE(vcomplex8, 0)),\
(CCTK_INT *)(PASS_REFERENCE(vint, 0)),\
(CCTK_INT1 *)(PASS_REFERENCE(vint1, 0)),\
(CCTK_INT16 *)(PASS_REFERENCE(vint16, 0)),\
(CCTK_INT2 *)(PASS_REFERENCE(vint2, 0)),\
(CCTK_INT4 *)(PASS_REFERENCE(vint4, 0)),\
(CCTK_INT8 *)(PASS_REFERENCE(vint8, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(vreal, 0)),\
(CCTK_REAL16 *)(PASS_REFERENCE(vreal16, 0)),\
(CCTK_REAL4 *)(PASS_REFERENCE(vreal4, 0)),\
(CCTK_REAL8 *)(PASS_REFERENCE(vreal8, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTALLTYPES_PROTECTED_FARGUMENTS \


#define TESTALLTYPES_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTALLTYPES_PROTECTED_CARGUMENTS \


#define DECLARE_TESTALLTYPES_PROTECTED_C2F \


#define INITIALISE_TESTALLTYPES_PROTECTED_C2F \


#define TESTALLTYPES_PROTECTED_C2F_PROTO \


#define PASS_TESTALLTYPES_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTALLTYPES_PUBLIC_FARGUMENTS \


#define TESTALLTYPES_PUBLIC_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTALLTYPES_PUBLIC_CARGUMENTS \


#define DECLARE_TESTALLTYPES_PUBLIC_C2F \


#define INITIALISE_TESTALLTYPES_PUBLIC_C2F \


#define TESTALLTYPES_PUBLIC_C2F_PROTO \


#define PASS_TESTALLTYPES_PUBLIC_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define TESTALLTYPES_FARGUMENTS _CCTK_FARGUMENTS, TESTALLTYPES_PRIVATE_FARGUMENTS

#define DECLARE_TESTALLTYPES_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_TESTALLTYPES_PRIVATE_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTALLTYPES_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_TESTALLTYPES_PRIVATE_CARGUMENTS

#define TESTALLTYPES_C2F_PROTO _CCTK_C2F_PROTO, TESTALLTYPES_PRIVATE_C2F_PROTO

#define PASS_TESTALLTYPES_C2F(GH) _PASS_CCTK_C2F(GH), PASS_TESTALLTYPES_PRIVATE_C2F(GH)

#define DECLARE_TESTALLTYPES_C2F _DECLARE_CCTK_C2F DECLARE_TESTALLTYPES_PRIVATE_C2F

#define INITIALISE_TESTALLTYPES_C2F _INITIALISE_CCTK_C2F INITIALISE_TESTALLTYPES_PRIVATE_C2F

#define TESTALLTYPES_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
