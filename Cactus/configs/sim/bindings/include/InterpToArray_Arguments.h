/*@@
   @header  InterpToArray_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn InterpToArray
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_INTERPTOARRAY_PRIVATE_FARGUMENTS \


#define INTERPTOARRAY_PRIVATE_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_INTERPTOARRAY_PRIVATE_CARGUMENTS \


#define DECLARE_INTERPTOARRAY_PRIVATE_C2F \


#define INITIALISE_INTERPTOARRAY_PRIVATE_C2F \


#define INTERPTOARRAY_PRIVATE_C2F_PROTO \


#define PASS_INTERPTOARRAY_PRIVATE_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_INTERPTOARRAY_PROTECTED_FARGUMENTS \


#define INTERPTOARRAY_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_INTERPTOARRAY_PROTECTED_CARGUMENTS \


#define DECLARE_INTERPTOARRAY_PROTECTED_C2F \


#define INITIALISE_INTERPTOARRAY_PROTECTED_C2F \


#define INTERPTOARRAY_PROTECTED_C2F_PROTO \


#define PASS_INTERPTOARRAY_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_INTERPTOARRAY_PUBLIC_FARGUMENTS \
INTEGER X0arrays1d&&\
INTEGER X0arrays2d&&\
INTEGER X0arrays3d&&\
INTEGER X0parrays1d&&\
INTEGER X0parrays2d&&\
INTEGER X0parrays3d&&\
INTEGER X1arrays2d&&\
INTEGER X1arrays3d&&\
INTEGER X1parrays2d&&\
INTEGER X1parrays3d&&\
INTEGER X2arrays3d&&\
INTEGER X2parrays3d&&\
INTEGER arrays1d_length&&\
INTEGER arrays2d_length&&\
INTEGER arrays3d_length&&\
INTEGER parrays1d_length&&\
INTEGER parrays2d_length&&\
INTEGER parrays3d_length&&\
INTEGER scalars_length&&\
CCTK_DECLARE(CCTK_REAL,arrays1d,(X0arrays1d,arrays1d_length))&&\
CCTK_DECLARE(CCTK_REAL,arrays2d,(X0arrays2d,X1arrays2d,arrays2d_length))&&\
CCTK_DECLARE(CCTK_REAL,arrays3d,(X0arrays3d,X1arrays3d,X2arrays3d,arrays3d_length))&&\
CCTK_DECLARE(CCTK_REAL,parrays1d,(X0parrays1d,parrays1d_length))&&\
CCTK_DECLARE(CCTK_REAL,parrays2d,(X0parrays2d,X1parrays2d,parrays2d_length))&&\
CCTK_DECLARE(CCTK_REAL,parrays3d,(X0parrays3d,X1parrays3d,X2parrays3d,parrays3d_length))&&\
CCTK_DECLARE(CCTK_REAL,scalars,(scalars_length))&&\


#define INTERPTOARRAY_PUBLIC_FARGUMENTS \
X0arrays1d,X0arrays2d,X0arrays3d,X0parrays1d,X0parrays2d,X0parrays3d,X1arrays2d,X1arrays3d,X1parrays2d,X1parrays3d,X2arrays3d,X2parrays3d,arrays1d_length,arrays2d_length,arrays3d_length,parrays1d_length,parrays2d_length,parrays3d_length,scalars_length,arrays1d,arrays2d,arrays3d,parrays1d,parrays2d,parrays3d,scalars

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_INTERPTOARRAY_PUBLIC_CARGUMENTS \
static int cctki_vi_arrays1d = -100; \
if (cctki_vi_arrays1d == -100) cctki_vi_arrays1d = CCTK_VarIndex("InterpToArray::arrays1d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, arrays1d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_arrays1d)); \
static int cctki_vi_arrays2d = -100; \
if (cctki_vi_arrays2d == -100) cctki_vi_arrays2d = CCTK_VarIndex("InterpToArray::arrays2d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, arrays2d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_arrays2d)); \
static int cctki_vi_arrays3d = -100; \
if (cctki_vi_arrays3d == -100) cctki_vi_arrays3d = CCTK_VarIndex("InterpToArray::arrays3d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, arrays3d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_arrays3d)); \
static int cctki_vi_parrays1d = -100; \
if (cctki_vi_parrays1d == -100) cctki_vi_parrays1d = CCTK_VarIndex("InterpToArray::parrays1d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, parrays1d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_parrays1d)); \
static int cctki_vi_parrays2d = -100; \
if (cctki_vi_parrays2d == -100) cctki_vi_parrays2d = CCTK_VarIndex("InterpToArray::parrays2d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, parrays2d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_parrays2d)); \
static int cctki_vi_parrays3d = -100; \
if (cctki_vi_parrays3d == -100) cctki_vi_parrays3d = CCTK_VarIndex("InterpToArray::parrays3d[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, parrays3d, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_parrays3d)); \
static int cctki_vi_scalars = -100; \
if (cctki_vi_scalars == -100) cctki_vi_scalars = CCTK_VarIndex("InterpToArray::scalars[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, scalars, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_scalars));

#define DECLARE_INTERPTOARRAY_PUBLIC_C2F \
static int CCTKARGNUM_arrays1d = -1; \
static int CCTKGROUPNUM_arrays1d = -1; \
static int CCTKARGNUM_arrays2d = -1; \
static int CCTKGROUPNUM_arrays2d = -1; \
static int CCTKARGNUM_arrays3d = -1; \
static int CCTKGROUPNUM_arrays3d = -1; \
static int CCTKARGNUM_parrays1d = -1; \
static int CCTKGROUPNUM_parrays1d = -1; \
static int CCTKARGNUM_parrays2d = -1; \
static int CCTKGROUPNUM_parrays2d = -1; \
static int CCTKARGNUM_parrays3d = -1; \
static int CCTKGROUPNUM_parrays3d = -1; \
static int CCTKARGNUM_scalars = -1; \
static int CCTKGROUPNUM_scalars = -1;

#define INITIALISE_INTERPTOARRAY_PUBLIC_C2F \
if(CCTKARGNUM_arrays1d == -1) CCTKARGNUM_arrays1d = CCTK_VarIndex("InterpToArray::arrays1d[0]"); \
if(CCTKGROUPNUM_arrays1d == -1) CCTKGROUPNUM_arrays1d = CCTK_GroupIndex("InterpToArray::arrays1d"); \
if(CCTKARGNUM_arrays2d == -1) CCTKARGNUM_arrays2d = CCTK_VarIndex("InterpToArray::arrays2d[0]"); \
if(CCTKGROUPNUM_arrays2d == -1) CCTKGROUPNUM_arrays2d = CCTK_GroupIndex("InterpToArray::arrays2d"); \
if(CCTKARGNUM_arrays3d == -1) CCTKARGNUM_arrays3d = CCTK_VarIndex("InterpToArray::arrays3d[0]"); \
if(CCTKGROUPNUM_arrays3d == -1) CCTKGROUPNUM_arrays3d = CCTK_GroupIndex("InterpToArray::arrays3d"); \
if(CCTKARGNUM_parrays1d == -1) CCTKARGNUM_parrays1d = CCTK_VarIndex("InterpToArray::parrays1d[0]"); \
if(CCTKGROUPNUM_parrays1d == -1) CCTKGROUPNUM_parrays1d = CCTK_GroupIndex("InterpToArray::parrays1d"); \
if(CCTKARGNUM_parrays2d == -1) CCTKARGNUM_parrays2d = CCTK_VarIndex("InterpToArray::parrays2d[0]"); \
if(CCTKGROUPNUM_parrays2d == -1) CCTKGROUPNUM_parrays2d = CCTK_GroupIndex("InterpToArray::parrays2d"); \
if(CCTKARGNUM_parrays3d == -1) CCTKARGNUM_parrays3d = CCTK_VarIndex("InterpToArray::parrays3d[0]"); \
if(CCTKGROUPNUM_parrays3d == -1) CCTKGROUPNUM_parrays3d = CCTK_GroupIndex("InterpToArray::parrays3d"); \
if(CCTKARGNUM_scalars == -1) CCTKARGNUM_scalars = CCTK_VarIndex("InterpToArray::scalars[0]"); \
if(CCTKGROUPNUM_scalars == -1) CCTKGROUPNUM_scalars = CCTK_GroupIndex("InterpToArray::scalars");

#define INTERPTOARRAY_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_INTERPTOARRAY_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(arrays1d, 0),\
PASS_GROUPSIZE(arrays2d, 0),\
PASS_GROUPSIZE(arrays3d, 0),\
PASS_GROUPSIZE(parrays1d, 0),\
PASS_GROUPSIZE(parrays2d, 0),\
PASS_GROUPSIZE(parrays3d, 0),\
PASS_GROUPSIZE(arrays2d, 1),\
PASS_GROUPSIZE(arrays3d, 1),\
PASS_GROUPSIZE(parrays2d, 1),\
PASS_GROUPSIZE(parrays3d, 1),\
PASS_GROUPSIZE(arrays3d, 2),\
PASS_GROUPSIZE(parrays3d, 2),\
PASS_GROUPLEN(InterpToArray, arrays1d),\
PASS_GROUPLEN(InterpToArray, arrays2d),\
PASS_GROUPLEN(InterpToArray, arrays3d),\
PASS_GROUPLEN(InterpToArray, parrays1d),\
PASS_GROUPLEN(InterpToArray, parrays2d),\
PASS_GROUPLEN(InterpToArray, parrays3d),\
PASS_GROUPLEN(InterpToArray, scalars),\
(CCTK_REAL *)(PASS_REFERENCE(arrays1d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(arrays2d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(arrays3d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(parrays1d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(parrays2d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(parrays3d, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(scalars, 0))

#endif /* CCODE */

#ifdef FCODE
#define INTERPTOARRAY_FARGUMENTS _CCTK_FARGUMENTS, INTERPTOARRAY_PUBLIC_FARGUMENTS

#define DECLARE_INTERPTOARRAY_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_INTERPTOARRAY_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_INTERPTOARRAY_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_INTERPTOARRAY_PUBLIC_CARGUMENTS

#define INTERPTOARRAY_C2F_PROTO _CCTK_C2F_PROTO, INTERPTOARRAY_PUBLIC_C2F_PROTO

#define PASS_INTERPTOARRAY_C2F(GH) _PASS_CCTK_C2F(GH), PASS_INTERPTOARRAY_PUBLIC_C2F(GH)

#define DECLARE_INTERPTOARRAY_C2F _DECLARE_CCTK_C2F DECLARE_INTERPTOARRAY_PUBLIC_C2F

#define INITIALISE_INTERPTOARRAY_C2F _INITIALISE_CCTK_C2F INITIALISE_INTERPTOARRAY_PUBLIC_C2F

#define INTERPTOARRAY_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
