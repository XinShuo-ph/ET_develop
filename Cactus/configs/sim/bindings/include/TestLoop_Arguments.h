/*@@
   @header  TestLoop_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn TestLoop
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_TESTLOOP_PRIVATE_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,csum_all,)&&\
CCTK_DECLARE(CCTK_REAL,csum_bnd,)&&\
CCTK_DECLARE(CCTK_REAL,csum_int,)&&\
CCTK_DECLARE(CCTK_REAL,csum_intbnd,)&&\
CCTK_DECLARE(CCTK_REAL,fsum_all,)&&\
CCTK_DECLARE(CCTK_REAL,fsum_bnd,)&&\
CCTK_DECLARE(CCTK_REAL,fsum_int,)&&\
CCTK_DECLARE(CCTK_REAL,fsum_intbnd,)&&\
CCTK_DECLARE(CCTK_INT,pointtypes,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define TESTLOOP_PRIVATE_FARGUMENTS \
csum_all,csum_bnd,csum_int,csum_intbnd,fsum_all,fsum_bnd,fsum_int,fsum_intbnd,pointtypes

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTLOOP_PRIVATE_CARGUMENTS \
static int cctki_vi_csum_all = -100; \
if (cctki_vi_csum_all == -100) cctki_vi_csum_all = CCTK_VarIndex("TestLoop::csum_all"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, csum_all, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_csum_all)); \
static int cctki_vi_csum_bnd = -100; \
if (cctki_vi_csum_bnd == -100) cctki_vi_csum_bnd = CCTK_VarIndex("TestLoop::csum_bnd"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, csum_bnd, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_csum_bnd)); \
static int cctki_vi_csum_int = -100; \
if (cctki_vi_csum_int == -100) cctki_vi_csum_int = CCTK_VarIndex("TestLoop::csum_int"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, csum_int, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_csum_int)); \
static int cctki_vi_csum_intbnd = -100; \
if (cctki_vi_csum_intbnd == -100) cctki_vi_csum_intbnd = CCTK_VarIndex("TestLoop::csum_intbnd"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, csum_intbnd, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_csum_intbnd)); \
static int cctki_vi_fsum_all = -100; \
if (cctki_vi_fsum_all == -100) cctki_vi_fsum_all = CCTK_VarIndex("TestLoop::fsum_all"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, fsum_all, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_fsum_all)); \
static int cctki_vi_fsum_bnd = -100; \
if (cctki_vi_fsum_bnd == -100) cctki_vi_fsum_bnd = CCTK_VarIndex("TestLoop::fsum_bnd"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, fsum_bnd, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_fsum_bnd)); \
static int cctki_vi_fsum_int = -100; \
if (cctki_vi_fsum_int == -100) cctki_vi_fsum_int = CCTK_VarIndex("TestLoop::fsum_int"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, fsum_int, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_fsum_int)); \
static int cctki_vi_fsum_intbnd = -100; \
if (cctki_vi_fsum_intbnd == -100) cctki_vi_fsum_intbnd = CCTK_VarIndex("TestLoop::fsum_intbnd"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, fsum_intbnd, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_fsum_intbnd)); \
static int cctki_vi_pointtypes = -100; \
if (cctki_vi_pointtypes == -100) cctki_vi_pointtypes = CCTK_VarIndex("TestLoop::pointtypes"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, pointtypes, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_pointtypes));

#define DECLARE_TESTLOOP_PRIVATE_C2F \
static int CCTKARGNUM_csum_all = -1; \
static int CCTKGROUPNUM_csums = -1; \
static int CCTKARGNUM_csum_bnd = -1; \
static int CCTKARGNUM_csum_int = -1; \
static int CCTKARGNUM_csum_intbnd = -1; \
static int CCTKARGNUM_fsum_all = -1; \
static int CCTKGROUPNUM_fsums = -1; \
static int CCTKARGNUM_fsum_bnd = -1; \
static int CCTKARGNUM_fsum_int = -1; \
static int CCTKARGNUM_fsum_intbnd = -1; \
static int CCTKARGNUM_pointtypes = -1; \
static int CCTKGROUPNUM_pointtypes = -1;

#define INITIALISE_TESTLOOP_PRIVATE_C2F \
if(CCTKARGNUM_csum_all == -1) CCTKARGNUM_csum_all = CCTK_VarIndex("TestLoop::csum_all"); \
if(CCTKGROUPNUM_csums == -1) CCTKGROUPNUM_csums = CCTK_GroupIndex("TestLoop::csums"); \
if(CCTKARGNUM_csum_bnd == -1) CCTKARGNUM_csum_bnd = CCTK_VarIndex("TestLoop::csum_bnd"); \
if(CCTKARGNUM_csum_int == -1) CCTKARGNUM_csum_int = CCTK_VarIndex("TestLoop::csum_int"); \
if(CCTKARGNUM_csum_intbnd == -1) CCTKARGNUM_csum_intbnd = CCTK_VarIndex("TestLoop::csum_intbnd"); \
if(CCTKARGNUM_fsum_all == -1) CCTKARGNUM_fsum_all = CCTK_VarIndex("TestLoop::fsum_all"); \
if(CCTKGROUPNUM_fsums == -1) CCTKGROUPNUM_fsums = CCTK_GroupIndex("TestLoop::fsums"); \
if(CCTKARGNUM_fsum_bnd == -1) CCTKARGNUM_fsum_bnd = CCTK_VarIndex("TestLoop::fsum_bnd"); \
if(CCTKARGNUM_fsum_int == -1) CCTKARGNUM_fsum_int = CCTK_VarIndex("TestLoop::fsum_int"); \
if(CCTKARGNUM_fsum_intbnd == -1) CCTKARGNUM_fsum_intbnd = CCTK_VarIndex("TestLoop::fsum_intbnd"); \
if(CCTKARGNUM_pointtypes == -1) CCTKARGNUM_pointtypes = CCTK_VarIndex("TestLoop::pointtypes"); \
if(CCTKGROUPNUM_pointtypes == -1) CCTKGROUPNUM_pointtypes = CCTK_GroupIndex("TestLoop::pointtypes");

#define TESTLOOP_PRIVATE_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *

#define PASS_TESTLOOP_PRIVATE_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(csum_all, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(csum_bnd, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(csum_int, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(csum_intbnd, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(fsum_all, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(fsum_bnd, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(fsum_int, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(fsum_intbnd, 0)),\
(CCTK_INT *)(PASS_REFERENCE(pointtypes, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTLOOP_PROTECTED_FARGUMENTS \


#define TESTLOOP_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTLOOP_PROTECTED_CARGUMENTS \


#define DECLARE_TESTLOOP_PROTECTED_C2F \


#define INITIALISE_TESTLOOP_PROTECTED_C2F \


#define TESTLOOP_PROTECTED_C2F_PROTO \


#define PASS_TESTLOOP_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTLOOP_PUBLIC_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define TESTLOOP_PUBLIC_FARGUMENTS \
coarse_dx,coarse_dy,coarse_dz,r,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTLOOP_PUBLIC_CARGUMENTS \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_TESTLOOP_PUBLIC_C2F \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_TESTLOOP_PUBLIC_C2F \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define TESTLOOP_PUBLIC_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_TESTLOOP_PUBLIC_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define TESTLOOP_FARGUMENTS _CCTK_FARGUMENTS, TESTLOOP_PRIVATE_FARGUMENTS, TESTLOOP_PUBLIC_FARGUMENTS

#define DECLARE_TESTLOOP_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_TESTLOOP_PRIVATE_FARGUMENTS DECLARE_TESTLOOP_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTLOOP_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_TESTLOOP_PRIVATE_CARGUMENTS DECLARE_TESTLOOP_PUBLIC_CARGUMENTS

#define TESTLOOP_C2F_PROTO _CCTK_C2F_PROTO, TESTLOOP_PRIVATE_C2F_PROTO, TESTLOOP_PUBLIC_C2F_PROTO

#define PASS_TESTLOOP_C2F(GH) _PASS_CCTK_C2F(GH), PASS_TESTLOOP_PRIVATE_C2F(GH), PASS_TESTLOOP_PUBLIC_C2F(GH)

#define DECLARE_TESTLOOP_C2F _DECLARE_CCTK_C2F DECLARE_TESTLOOP_PRIVATE_C2F DECLARE_TESTLOOP_PUBLIC_C2F

#define INITIALISE_TESTLOOP_C2F _INITIALISE_CCTK_C2F INITIALISE_TESTLOOP_PRIVATE_C2F INITIALISE_TESTLOOP_PUBLIC_C2F

#define TESTLOOP_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
