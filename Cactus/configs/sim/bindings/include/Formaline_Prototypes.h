/*@@
   @header  Formaline_Prototypes.h
   @author  Automatically generated by CreateFunctionBindings.pl
   @desc
            Prototypes for overloaded functions used by this thorn
   @enddesc
  @@*/


#ifndef _FORMALINE_PROTOTYPES_H_
#define _FORMALINE_PROTOTYPES_H_  1

#ifdef CCODE
#ifdef __cplusplus
extern "C" {
#endif

CCTK_INT PublishBoolean(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_INT level ,
 const CCTK_INT value ,
 CCTK_STRING key, CCTK_STRING name);

CCTK_INT PublishBoolean_Register(CCTK_INT (*const publish_cb)(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_POINTER cb_data ,
 const CCTK_INT level ,
 const CCTK_INT value ,
 CCTK_STRING key, CCTK_STRING thorn) ,
 const CCTK_POINTER cb_data ,
 CCTK_STRING name);

CCTK_INT PublishBoolean_Unregister(CCTK_STRING name);

CCTK_INT PublishInt(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_INT level ,
 const CCTK_INT value ,
 CCTK_STRING key, CCTK_STRING name);

CCTK_INT PublishInt_Register(CCTK_INT (*const publish_cb)(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_POINTER cb_data ,
 const CCTK_INT level ,
 const CCTK_INT value ,
 CCTK_STRING key, CCTK_STRING thorn) ,
 const CCTK_POINTER cb_data ,
 CCTK_STRING name);

CCTK_INT PublishInt_Unregister(CCTK_STRING name);

CCTK_INT PublishReal(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_INT level ,
 const CCTK_REAL value ,
 CCTK_STRING key, CCTK_STRING name);

CCTK_INT PublishReal_Register(CCTK_INT (*const publish_cb)(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_POINTER cb_data ,
 const CCTK_INT level ,
 const CCTK_REAL value ,
 CCTK_STRING key, CCTK_STRING thorn) ,
 const CCTK_POINTER cb_data ,
 CCTK_STRING name);

CCTK_INT PublishReal_Unregister(CCTK_STRING name);

CCTK_INT PublishString(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_INT level ,
 CCTK_STRING value, CCTK_STRING key, CCTK_STRING name);

CCTK_INT PublishString_Register(CCTK_INT (*const publish_cb)(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_POINTER cb_data ,
 const CCTK_INT level ,
 CCTK_STRING value, CCTK_STRING key, CCTK_STRING thorn) ,
 const CCTK_POINTER cb_data ,
 CCTK_STRING name);

CCTK_INT PublishString_Unregister(CCTK_STRING name);

CCTK_INT PublishTable(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_INT level ,
 const CCTK_INT table ,
 CCTK_STRING key, CCTK_STRING name);

CCTK_INT PublishTable_Register(CCTK_INT (*const publish_cb)(const CCTK_POINTER_TO_CONST cctkGH ,
 const CCTK_POINTER cb_data ,
 const CCTK_INT level ,
 const CCTK_INT table ,
 CCTK_STRING key, CCTK_STRING thorn) ,
 const CCTK_POINTER cb_data ,
 CCTK_STRING name);

CCTK_INT PublishTable_Unregister(CCTK_STRING name);

CCTK_POINTER_TO_CONST UniqueBuildID(const CCTK_POINTER_TO_CONST cctkGH);
CCTK_POINTER_TO_CONST Formaline_UniqueBuildID(const CCTK_POINTER_TO_CONST cctkGH);

CCTK_POINTER_TO_CONST UniqueConfigID(const CCTK_POINTER_TO_CONST cctkGH);
CCTK_POINTER_TO_CONST Formaline_UniqueConfigID(const CCTK_POINTER_TO_CONST cctkGH);

CCTK_POINTER_TO_CONST UniqueRunID(const CCTK_POINTER_TO_CONST cctkGH);
CCTK_POINTER_TO_CONST Formaline_UniqueRunID(const CCTK_POINTER_TO_CONST cctkGH);

CCTK_POINTER_TO_CONST UniqueSimulationID(const CCTK_POINTER_TO_CONST cctkGH);
CCTK_POINTER_TO_CONST Formaline_UniqueSimulationID(const CCTK_POINTER_TO_CONST cctkGH);

#ifdef __cplusplus
}
#endif
#endif /* CCODE */

#ifdef FCODE
#ifdef F90CODE
#define DECLARE_FORMALINE_FUNCTIONS _DECLARE_CCTK_FUNCTIONS \
  interface &&\
     CCTK_INT function PublishBoolean (cctkGH, level, value, key, name) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
       CCTK_INT level &&\
       CCTK_INT value &&\
       character(*) key &&\
       character(*) name &&\
     end function PublishBoolean &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishBoolean_Register (publish_cb, cb_data, name) &&\
       implicit none &&\
       external publish_cb &&\
       CCTK_INT publish_cb &&\
       CCTK_POINTER cb_data &&\
       character(*) name &&\
     end function PublishBoolean_Register &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishBoolean_Unregister (name) &&\
       implicit none &&\
       character(*) name &&\
     end function PublishBoolean_Unregister &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishInt (cctkGH, level, value, key, name) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
       CCTK_INT level &&\
       CCTK_INT value &&\
       character(*) key &&\
       character(*) name &&\
     end function PublishInt &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishInt_Register (publish_cb, cb_data, name) &&\
       implicit none &&\
       external publish_cb &&\
       CCTK_INT publish_cb &&\
       CCTK_POINTER cb_data &&\
       character(*) name &&\
     end function PublishInt_Register &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishInt_Unregister (name) &&\
       implicit none &&\
       character(*) name &&\
     end function PublishInt_Unregister &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishReal (cctkGH, level, value, key, name) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
       CCTK_INT level &&\
       CCTK_REAL value &&\
       character(*) key &&\
       character(*) name &&\
     end function PublishReal &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishReal_Register (publish_cb, cb_data, name) &&\
       implicit none &&\
       external publish_cb &&\
       CCTK_INT publish_cb &&\
       CCTK_POINTER cb_data &&\
       character(*) name &&\
     end function PublishReal_Register &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishReal_Unregister (name) &&\
       implicit none &&\
       character(*) name &&\
     end function PublishReal_Unregister &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishString (cctkGH, level, value, key, name) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
       CCTK_INT level &&\
       character(*) value &&\
       character(*) key &&\
       character(*) name &&\
     end function PublishString &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishString_Register (publish_cb, cb_data, name) &&\
       implicit none &&\
       external publish_cb &&\
       CCTK_INT publish_cb &&\
       CCTK_POINTER cb_data &&\
       character(*) name &&\
     end function PublishString_Register &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishString_Unregister (name) &&\
       implicit none &&\
       character(*) name &&\
     end function PublishString_Unregister &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishTable (cctkGH, level, table, key, name) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
       CCTK_INT level &&\
       CCTK_INT table &&\
       character(*) key &&\
       character(*) name &&\
     end function PublishTable &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishTable_Register (publish_cb, cb_data, name) &&\
       implicit none &&\
       external publish_cb &&\
       CCTK_INT publish_cb &&\
       CCTK_POINTER cb_data &&\
       character(*) name &&\
     end function PublishTable_Register &&\
  end interface &&\
  interface &&\
     CCTK_INT function PublishTable_Unregister (name) &&\
       implicit none &&\
       character(*) name &&\
     end function PublishTable_Unregister &&\
  end interface &&\
  interface &&\
     CCTK_POINTER_TO_CONST function UniqueBuildID (cctkGH) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
     end function UniqueBuildID &&\
  end interface &&\
  interface &&\
     CCTK_POINTER_TO_CONST function UniqueConfigID (cctkGH) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
     end function UniqueConfigID &&\
  end interface &&\
  interface &&\
     CCTK_POINTER_TO_CONST function UniqueRunID (cctkGH) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
     end function UniqueRunID &&\
  end interface &&\
  interface &&\
     CCTK_POINTER_TO_CONST function UniqueSimulationID (cctkGH) &&\
       implicit none &&\
       CCTK_POINTER_TO_CONST cctkGH &&\
     end function UniqueSimulationID &&\
  end interface &&\

#else /* ! F90CODE */

#define DECLARE_FORMALINE_FUNCTIONS _DECLARE_CCTK_FUNCTIONS \
  external PublishBoolean &&\
  CCTK_INT PublishBoolean &&\
  external PublishBoolean_Register &&\
  CCTK_INT PublishBoolean_Register &&\
  external PublishBoolean_Unregister &&\
  CCTK_INT PublishBoolean_Unregister &&\
  external PublishInt &&\
  CCTK_INT PublishInt &&\
  external PublishInt_Register &&\
  CCTK_INT PublishInt_Register &&\
  external PublishInt_Unregister &&\
  CCTK_INT PublishInt_Unregister &&\
  external PublishReal &&\
  CCTK_INT PublishReal &&\
  external PublishReal_Register &&\
  CCTK_INT PublishReal_Register &&\
  external PublishReal_Unregister &&\
  CCTK_INT PublishReal_Unregister &&\
  external PublishString &&\
  CCTK_INT PublishString &&\
  external PublishString_Register &&\
  CCTK_INT PublishString_Register &&\
  external PublishString_Unregister &&\
  CCTK_INT PublishString_Unregister &&\
  external PublishTable &&\
  CCTK_INT PublishTable &&\
  external PublishTable_Register &&\
  CCTK_INT PublishTable_Register &&\
  external PublishTable_Unregister &&\
  CCTK_INT PublishTable_Unregister &&\
  external UniqueBuildID &&\
  CCTK_POINTER_TO_CONST UniqueBuildID &&\
  external UniqueConfigID &&\
  CCTK_POINTER_TO_CONST UniqueConfigID &&\
  external UniqueRunID &&\
  CCTK_POINTER_TO_CONST UniqueRunID &&\
  external UniqueSimulationID &&\
  CCTK_POINTER_TO_CONST UniqueSimulationID &&\

#endif /* ! F90CODE */
#endif /* FCODE */

#endif

