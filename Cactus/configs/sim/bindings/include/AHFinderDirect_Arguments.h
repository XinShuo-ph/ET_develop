/*@@
   @header  AHFinderDirect_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn AHFinderDirect
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_AHFINDERDIRECT_PRIVATE_FARGUMENTS \
INTEGER X0ah_radius&&\
INTEGER X1ah_radius&&\
INTEGER X2ah_radius&&\
INTEGER ah_centroid_length&&\
INTEGER ah_flags_length&&\
INTEGER ah_origin_length&&\
INTEGER ah_radius_length&&\
CCTK_DECLARE(CCTK_INT,ah_centroid_iteration,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_INT,ah_centroid_iteration_p,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_t,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_t_p,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_INT,ah_centroid_valid,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_INT,ah_centroid_valid_p,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_x,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_x_p,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_y,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_y_p,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_z,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_centroid_z_p,(ah_centroid_length))&&\
CCTK_DECLARE(CCTK_INT,ah_found_flag,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_INT,ah_initial_find_flag,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_origin_x,(ah_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_origin_y,(ah_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_origin_z,(ah_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,ah_radius,(X0ah_radius,X1ah_radius,X2ah_radius,ah_radius_length))&&\
CCTK_DECLARE(CCTK_INT,ah_really_initial_find_flag,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_INT,ah_search_flag,(ah_flags_length))&&\
CCTK_DECLARE(CCTK_REAL,ahmask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahmask_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahmask_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define AHFINDERDIRECT_PRIVATE_FARGUMENTS \
X0ah_radius,X1ah_radius,X2ah_radius,ah_centroid_length,ah_flags_length,ah_origin_length,ah_radius_length,ah_centroid_iteration,ah_centroid_iteration_p,ah_centroid_t,ah_centroid_t_p,ah_centroid_valid,ah_centroid_valid_p,ah_centroid_x,ah_centroid_x_p,ah_centroid_y,ah_centroid_y_p,ah_centroid_z,ah_centroid_z_p,ah_found_flag,ah_initial_find_flag,ah_origin_x,ah_origin_y,ah_origin_z,ah_radius,ah_really_initial_find_flag,ah_search_flag,ahmask,ahmask_p,ahmask_p_p

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDERDIRECT_PRIVATE_CARGUMENTS \
static int cctki_vi_ah_centroid_iteration = -100; \
if (cctki_vi_ah_centroid_iteration == -100) cctki_vi_ah_centroid_iteration = CCTK_VarIndex("AHFinderDirect::ah_centroid_iteration[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_centroid_iteration, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_iteration)); \
static int cctki_vi_ah_centroid_iteration_p = -100; \
if (cctki_vi_ah_centroid_iteration_p == -100) cctki_vi_ah_centroid_iteration_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_iteration_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_centroid_iteration_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_iteration_p)); \
static int cctki_vi_ah_centroid_t = -100; \
if (cctki_vi_ah_centroid_t == -100) cctki_vi_ah_centroid_t = CCTK_VarIndex("AHFinderDirect::ah_centroid_t[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_t, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_t)); \
static int cctki_vi_ah_centroid_t_p = -100; \
if (cctki_vi_ah_centroid_t_p == -100) cctki_vi_ah_centroid_t_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_t_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_t_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_t_p)); \
static int cctki_vi_ah_centroid_valid = -100; \
if (cctki_vi_ah_centroid_valid == -100) cctki_vi_ah_centroid_valid = CCTK_VarIndex("AHFinderDirect::ah_centroid_valid[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_centroid_valid, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_valid)); \
static int cctki_vi_ah_centroid_valid_p = -100; \
if (cctki_vi_ah_centroid_valid_p == -100) cctki_vi_ah_centroid_valid_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_valid_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_centroid_valid_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_valid_p)); \
static int cctki_vi_ah_centroid_x = -100; \
if (cctki_vi_ah_centroid_x == -100) cctki_vi_ah_centroid_x = CCTK_VarIndex("AHFinderDirect::ah_centroid_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_x)); \
static int cctki_vi_ah_centroid_x_p = -100; \
if (cctki_vi_ah_centroid_x_p == -100) cctki_vi_ah_centroid_x_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_x_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_x_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_x_p)); \
static int cctki_vi_ah_centroid_y = -100; \
if (cctki_vi_ah_centroid_y == -100) cctki_vi_ah_centroid_y = CCTK_VarIndex("AHFinderDirect::ah_centroid_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_y)); \
static int cctki_vi_ah_centroid_y_p = -100; \
if (cctki_vi_ah_centroid_y_p == -100) cctki_vi_ah_centroid_y_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_y_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_y_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_y_p)); \
static int cctki_vi_ah_centroid_z = -100; \
if (cctki_vi_ah_centroid_z == -100) cctki_vi_ah_centroid_z = CCTK_VarIndex("AHFinderDirect::ah_centroid_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_z)); \
static int cctki_vi_ah_centroid_z_p = -100; \
if (cctki_vi_ah_centroid_z_p == -100) cctki_vi_ah_centroid_z_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_z_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_centroid_z_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_centroid_z_p)); \
static int cctki_vi_ah_found_flag = -100; \
if (cctki_vi_ah_found_flag == -100) cctki_vi_ah_found_flag = CCTK_VarIndex("AHFinderDirect::ah_found_flag[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_found_flag, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_found_flag)); \
static int cctki_vi_ah_initial_find_flag = -100; \
if (cctki_vi_ah_initial_find_flag == -100) cctki_vi_ah_initial_find_flag = CCTK_VarIndex("AHFinderDirect::ah_initial_find_flag[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_initial_find_flag, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_initial_find_flag)); \
static int cctki_vi_ah_origin_x = -100; \
if (cctki_vi_ah_origin_x == -100) cctki_vi_ah_origin_x = CCTK_VarIndex("AHFinderDirect::ah_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_origin_x)); \
static int cctki_vi_ah_origin_y = -100; \
if (cctki_vi_ah_origin_y == -100) cctki_vi_ah_origin_y = CCTK_VarIndex("AHFinderDirect::ah_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_origin_y)); \
static int cctki_vi_ah_origin_z = -100; \
if (cctki_vi_ah_origin_z == -100) cctki_vi_ah_origin_z = CCTK_VarIndex("AHFinderDirect::ah_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_origin_z)); \
static int cctki_vi_ah_radius = -100; \
if (cctki_vi_ah_radius == -100) cctki_vi_ah_radius = CCTK_VarIndex("AHFinderDirect::ah_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ah_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_radius)); \
static int cctki_vi_ah_really_initial_find_flag = -100; \
if (cctki_vi_ah_really_initial_find_flag == -100) cctki_vi_ah_really_initial_find_flag = CCTK_VarIndex("AHFinderDirect::ah_really_initial_find_flag[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_really_initial_find_flag, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_really_initial_find_flag)); \
static int cctki_vi_ah_search_flag = -100; \
if (cctki_vi_ah_search_flag == -100) cctki_vi_ah_search_flag = CCTK_VarIndex("AHFinderDirect::ah_search_flag[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, ah_search_flag, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ah_search_flag)); \
static int cctki_vi_ahmask = -100; \
if (cctki_vi_ahmask == -100) cctki_vi_ahmask = CCTK_VarIndex("AHFinderDirect::ahmask"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahmask, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahmask)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahmask_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_ahmask)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahmask_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_ahmask));

#define DECLARE_AHFINDERDIRECT_PRIVATE_C2F \
static int CCTKARGNUM_ah_centroid_iteration = -1; \
static int CCTKGROUPNUM_ah_flags = -1; \
static int CCTKARGNUM_ah_centroid_iteration_p = -1; \
static int CCTKARGNUM_ah_centroid_t = -1; \
static int CCTKGROUPNUM_ah_centroid = -1; \
static int CCTKARGNUM_ah_centroid_t_p = -1; \
static int CCTKARGNUM_ah_centroid_valid = -1; \
static int CCTKARGNUM_ah_centroid_valid_p = -1; \
static int CCTKARGNUM_ah_centroid_x = -1; \
static int CCTKARGNUM_ah_centroid_x_p = -1; \
static int CCTKARGNUM_ah_centroid_y = -1; \
static int CCTKARGNUM_ah_centroid_y_p = -1; \
static int CCTKARGNUM_ah_centroid_z = -1; \
static int CCTKARGNUM_ah_centroid_z_p = -1; \
static int CCTKARGNUM_ah_found_flag = -1; \
static int CCTKARGNUM_ah_initial_find_flag = -1; \
static int CCTKARGNUM_ah_origin_x = -1; \
static int CCTKGROUPNUM_ah_origin = -1; \
static int CCTKARGNUM_ah_origin_y = -1; \
static int CCTKARGNUM_ah_origin_z = -1; \
static int CCTKARGNUM_ah_radius = -1; \
static int CCTKGROUPNUM_ah_radius = -1; \
static int CCTKARGNUM_ah_really_initial_find_flag = -1; \
static int CCTKARGNUM_ah_search_flag = -1; \
static int CCTKARGNUM_ahmask = -1; \
static int CCTKGROUPNUM_ahmask = -1;

#define INITIALISE_AHFINDERDIRECT_PRIVATE_C2F \
if(CCTKARGNUM_ah_centroid_iteration == -1) CCTKARGNUM_ah_centroid_iteration = CCTK_VarIndex("AHFinderDirect::ah_centroid_iteration[0]"); \
if(CCTKGROUPNUM_ah_flags == -1) CCTKGROUPNUM_ah_flags = CCTK_GroupIndex("AHFinderDirect::ah_flags"); \
if(CCTKARGNUM_ah_centroid_iteration_p == -1) CCTKARGNUM_ah_centroid_iteration_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_iteration_p[0]"); \
if(CCTKARGNUM_ah_centroid_t == -1) CCTKARGNUM_ah_centroid_t = CCTK_VarIndex("AHFinderDirect::ah_centroid_t[0]"); \
if(CCTKGROUPNUM_ah_centroid == -1) CCTKGROUPNUM_ah_centroid = CCTK_GroupIndex("AHFinderDirect::ah_centroid"); \
if(CCTKARGNUM_ah_centroid_t_p == -1) CCTKARGNUM_ah_centroid_t_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_t_p[0]"); \
if(CCTKARGNUM_ah_centroid_valid == -1) CCTKARGNUM_ah_centroid_valid = CCTK_VarIndex("AHFinderDirect::ah_centroid_valid[0]"); \
if(CCTKARGNUM_ah_centroid_valid_p == -1) CCTKARGNUM_ah_centroid_valid_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_valid_p[0]"); \
if(CCTKARGNUM_ah_centroid_x == -1) CCTKARGNUM_ah_centroid_x = CCTK_VarIndex("AHFinderDirect::ah_centroid_x[0]"); \
if(CCTKARGNUM_ah_centroid_x_p == -1) CCTKARGNUM_ah_centroid_x_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_x_p[0]"); \
if(CCTKARGNUM_ah_centroid_y == -1) CCTKARGNUM_ah_centroid_y = CCTK_VarIndex("AHFinderDirect::ah_centroid_y[0]"); \
if(CCTKARGNUM_ah_centroid_y_p == -1) CCTKARGNUM_ah_centroid_y_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_y_p[0]"); \
if(CCTKARGNUM_ah_centroid_z == -1) CCTKARGNUM_ah_centroid_z = CCTK_VarIndex("AHFinderDirect::ah_centroid_z[0]"); \
if(CCTKARGNUM_ah_centroid_z_p == -1) CCTKARGNUM_ah_centroid_z_p = CCTK_VarIndex("AHFinderDirect::ah_centroid_z_p[0]"); \
if(CCTKARGNUM_ah_found_flag == -1) CCTKARGNUM_ah_found_flag = CCTK_VarIndex("AHFinderDirect::ah_found_flag[0]"); \
if(CCTKARGNUM_ah_initial_find_flag == -1) CCTKARGNUM_ah_initial_find_flag = CCTK_VarIndex("AHFinderDirect::ah_initial_find_flag[0]"); \
if(CCTKARGNUM_ah_origin_x == -1) CCTKARGNUM_ah_origin_x = CCTK_VarIndex("AHFinderDirect::ah_origin_x[0]"); \
if(CCTKGROUPNUM_ah_origin == -1) CCTKGROUPNUM_ah_origin = CCTK_GroupIndex("AHFinderDirect::ah_origin"); \
if(CCTKARGNUM_ah_origin_y == -1) CCTKARGNUM_ah_origin_y = CCTK_VarIndex("AHFinderDirect::ah_origin_y[0]"); \
if(CCTKARGNUM_ah_origin_z == -1) CCTKARGNUM_ah_origin_z = CCTK_VarIndex("AHFinderDirect::ah_origin_z[0]"); \
if(CCTKARGNUM_ah_radius == -1) CCTKARGNUM_ah_radius = CCTK_VarIndex("AHFinderDirect::ah_radius[0]"); \
if(CCTKGROUPNUM_ah_radius == -1) CCTKGROUPNUM_ah_radius = CCTK_GroupIndex("AHFinderDirect::ah_radius"); \
if(CCTKARGNUM_ah_really_initial_find_flag == -1) CCTKARGNUM_ah_really_initial_find_flag = CCTK_VarIndex("AHFinderDirect::ah_really_initial_find_flag[0]"); \
if(CCTKARGNUM_ah_search_flag == -1) CCTKARGNUM_ah_search_flag = CCTK_VarIndex("AHFinderDirect::ah_search_flag[0]"); \
if(CCTKARGNUM_ahmask == -1) CCTKARGNUM_ahmask = CCTK_VarIndex("AHFinderDirect::ahmask"); \
if(CCTKGROUPNUM_ahmask == -1) CCTKGROUPNUM_ahmask = CCTK_GroupIndex("AHFinderDirect::ahmask");

#define AHFINDERDIRECT_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_INT *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_AHFINDERDIRECT_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(ah_radius, 0),\
PASS_GROUPSIZE(ah_radius, 1),\
PASS_GROUPSIZE(ah_radius, 2),\
PASS_GROUPLEN(AHFinderDirect, ah_centroid),\
PASS_GROUPLEN(AHFinderDirect, ah_flags),\
PASS_GROUPLEN(AHFinderDirect, ah_origin),\
PASS_GROUPLEN(AHFinderDirect, ah_radius),\
(CCTK_INT *)(PASS_REFERENCE(ah_centroid_iteration, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_centroid_iteration_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_t, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_t_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_centroid_valid, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_centroid_valid_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_x_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_y_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_centroid_z_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_found_flag, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_initial_find_flag, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ah_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_really_initial_find_flag, 0)),\
(CCTK_INT *)(PASS_REFERENCE(ah_search_flag, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahmask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahmask, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(ahmask, 2))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_AHFINDERDIRECT_PROTECTED_FARGUMENTS \


#define AHFINDERDIRECT_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDERDIRECT_PROTECTED_CARGUMENTS \


#define DECLARE_AHFINDERDIRECT_PROTECTED_C2F \


#define INITIALISE_AHFINDERDIRECT_PROTECTED_C2F \


#define AHFINDERDIRECT_PROTECTED_C2F_PROTO \


#define PASS_AHFINDERDIRECT_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_AHFINDERDIRECT_PUBLIC_FARGUMENTS \
INTEGER X0sf_radius&&\
INTEGER X1sf_radius&&\
INTEGER sf_active_length&&\
INTEGER sf_coordinate_descriptors_length&&\
INTEGER sf_info_length&&\
INTEGER sf_maxreflevel_length&&\
INTEGER sf_minreflevel_length&&\
INTEGER sf_origin_length&&\
INTEGER sf_radius_length&&\
INTEGER sf_shape_descriptors_length&&\
INTEGER sf_valid_length&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_INT,conformal_state,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,emask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psix,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psizz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,sf_active,(sf_active_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_area,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_maxreflevel,(sf_maxreflevel_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_mean_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_minreflevel,(sf_minreflevel_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghostsphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghoststheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_ntheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_x,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_y,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_z,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xx,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_zz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_radius,(X0sf_radius,X1sf_radius,sf_radius_length))&&\
CCTK_DECLARE(CCTK_INT,sf_valid,(sf_valid_length))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_INT,space_mask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define AHFINDERDIRECT_PUBLIC_FARGUMENTS \
X0sf_radius,X1sf_radius,sf_active_length,sf_coordinate_descriptors_length,sf_info_length,sf_maxreflevel_length,sf_minreflevel_length,sf_origin_length,sf_radius_length,sf_shape_descriptors_length,sf_valid_length,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,conformal_state,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,emask,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,psi,psix,psixx,psixy,psixz,psiy,psiyy,psiyz,psiz,psizz,r,sf_active,sf_area,sf_centroid_x,sf_centroid_y,sf_centroid_z,sf_delta_phi,sf_delta_theta,sf_max_radius,sf_max_x,sf_max_y,sf_max_z,sf_maxreflevel,sf_mean_radius,sf_min_radius,sf_min_x,sf_min_y,sf_min_z,sf_minreflevel,sf_nghostsphi,sf_nghoststheta,sf_nphi,sf_ntheta,sf_origin_phi,sf_origin_theta,sf_origin_x,sf_origin_y,sf_origin_z,sf_quadrupole_xx,sf_quadrupole_xy,sf_quadrupole_xz,sf_quadrupole_yy,sf_quadrupole_yz,sf_quadrupole_zz,sf_radius,sf_valid,shift_state,space_mask,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDERDIRECT_PUBLIC_CARGUMENTS \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_conformal_state = -100; \
if (cctki_vi_conformal_state == -100) cctki_vi_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, conformal_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_conformal_state)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_emask = -100; \
if (cctki_vi_emask == -100) cctki_vi_emask = CCTK_VarIndex("SPACEMASK::emask"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, emask, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_emask)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_psi = -100; \
if (cctki_vi_psi == -100) cctki_vi_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psi)); \
static int cctki_vi_psix = -100; \
if (cctki_vi_psix == -100) cctki_vi_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psix, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psix)); \
static int cctki_vi_psixx = -100; \
if (cctki_vi_psixx == -100) cctki_vi_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixx)); \
static int cctki_vi_psixy = -100; \
if (cctki_vi_psixy == -100) cctki_vi_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixy)); \
static int cctki_vi_psixz = -100; \
if (cctki_vi_psixz == -100) cctki_vi_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixz)); \
static int cctki_vi_psiy = -100; \
if (cctki_vi_psiy == -100) cctki_vi_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiy)); \
static int cctki_vi_psiyy = -100; \
if (cctki_vi_psiyy == -100) cctki_vi_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyy)); \
static int cctki_vi_psiyz = -100; \
if (cctki_vi_psiyz == -100) cctki_vi_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyz)); \
static int cctki_vi_psiz = -100; \
if (cctki_vi_psiz == -100) cctki_vi_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiz)); \
static int cctki_vi_psizz = -100; \
if (cctki_vi_psizz == -100) cctki_vi_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psizz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psizz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_sf_active = -100; \
if (cctki_vi_sf_active == -100) cctki_vi_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_active, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_active)); \
static int cctki_vi_sf_area = -100; \
if (cctki_vi_sf_area == -100) cctki_vi_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_area)); \
static int cctki_vi_sf_centroid_x = -100; \
if (cctki_vi_sf_centroid_x == -100) cctki_vi_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_x)); \
static int cctki_vi_sf_centroid_y = -100; \
if (cctki_vi_sf_centroid_y == -100) cctki_vi_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_y)); \
static int cctki_vi_sf_centroid_z = -100; \
if (cctki_vi_sf_centroid_z == -100) cctki_vi_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_z)); \
static int cctki_vi_sf_delta_phi = -100; \
if (cctki_vi_sf_delta_phi == -100) cctki_vi_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_phi)); \
static int cctki_vi_sf_delta_theta = -100; \
if (cctki_vi_sf_delta_theta == -100) cctki_vi_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_theta)); \
static int cctki_vi_sf_max_radius = -100; \
if (cctki_vi_sf_max_radius == -100) cctki_vi_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_radius)); \
static int cctki_vi_sf_max_x = -100; \
if (cctki_vi_sf_max_x == -100) cctki_vi_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_x)); \
static int cctki_vi_sf_max_y = -100; \
if (cctki_vi_sf_max_y == -100) cctki_vi_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_y)); \
static int cctki_vi_sf_max_z = -100; \
if (cctki_vi_sf_max_z == -100) cctki_vi_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_z)); \
static int cctki_vi_sf_maxreflevel = -100; \
if (cctki_vi_sf_maxreflevel == -100) cctki_vi_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_maxreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_maxreflevel)); \
static int cctki_vi_sf_mean_radius = -100; \
if (cctki_vi_sf_mean_radius == -100) cctki_vi_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_mean_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_mean_radius)); \
static int cctki_vi_sf_min_radius = -100; \
if (cctki_vi_sf_min_radius == -100) cctki_vi_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_radius)); \
static int cctki_vi_sf_min_x = -100; \
if (cctki_vi_sf_min_x == -100) cctki_vi_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_x)); \
static int cctki_vi_sf_min_y = -100; \
if (cctki_vi_sf_min_y == -100) cctki_vi_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_y)); \
static int cctki_vi_sf_min_z = -100; \
if (cctki_vi_sf_min_z == -100) cctki_vi_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_z)); \
static int cctki_vi_sf_minreflevel = -100; \
if (cctki_vi_sf_minreflevel == -100) cctki_vi_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_minreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_minreflevel)); \
static int cctki_vi_sf_nghostsphi = -100; \
if (cctki_vi_sf_nghostsphi == -100) cctki_vi_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghostsphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghostsphi)); \
static int cctki_vi_sf_nghoststheta = -100; \
if (cctki_vi_sf_nghoststheta == -100) cctki_vi_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghoststheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghoststheta)); \
static int cctki_vi_sf_nphi = -100; \
if (cctki_vi_sf_nphi == -100) cctki_vi_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nphi)); \
static int cctki_vi_sf_ntheta = -100; \
if (cctki_vi_sf_ntheta == -100) cctki_vi_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_ntheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_ntheta)); \
static int cctki_vi_sf_origin_phi = -100; \
if (cctki_vi_sf_origin_phi == -100) cctki_vi_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_phi)); \
static int cctki_vi_sf_origin_theta = -100; \
if (cctki_vi_sf_origin_theta == -100) cctki_vi_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_theta)); \
static int cctki_vi_sf_origin_x = -100; \
if (cctki_vi_sf_origin_x == -100) cctki_vi_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_x)); \
static int cctki_vi_sf_origin_y = -100; \
if (cctki_vi_sf_origin_y == -100) cctki_vi_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_y)); \
static int cctki_vi_sf_origin_z = -100; \
if (cctki_vi_sf_origin_z == -100) cctki_vi_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_z)); \
static int cctki_vi_sf_quadrupole_xx = -100; \
if (cctki_vi_sf_quadrupole_xx == -100) cctki_vi_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xx)); \
static int cctki_vi_sf_quadrupole_xy = -100; \
if (cctki_vi_sf_quadrupole_xy == -100) cctki_vi_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xy)); \
static int cctki_vi_sf_quadrupole_xz = -100; \
if (cctki_vi_sf_quadrupole_xz == -100) cctki_vi_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xz)); \
static int cctki_vi_sf_quadrupole_yy = -100; \
if (cctki_vi_sf_quadrupole_yy == -100) cctki_vi_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yy)); \
static int cctki_vi_sf_quadrupole_yz = -100; \
if (cctki_vi_sf_quadrupole_yz == -100) cctki_vi_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yz)); \
static int cctki_vi_sf_quadrupole_zz = -100; \
if (cctki_vi_sf_quadrupole_zz == -100) cctki_vi_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_zz)); \
static int cctki_vi_sf_radius = -100; \
if (cctki_vi_sf_radius == -100) cctki_vi_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_radius)); \
static int cctki_vi_sf_valid = -100; \
if (cctki_vi_sf_valid == -100) cctki_vi_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_valid, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_valid)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_space_mask = -100; \
if (cctki_vi_space_mask == -100) cctki_vi_space_mask = CCTK_VarIndex("SPACEMASK::space_mask"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, space_mask, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_space_mask)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_AHFINDERDIRECT_PUBLIC_C2F \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_conformal_state = -1; \
static int CCTKGROUPNUM_conformal_state = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_emask = -1; \
static int CCTKGROUPNUM_mask = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKGROUPNUM_confac = -1; \
static int CCTKARGNUM_psix = -1; \
static int CCTKGROUPNUM_confac_1derivs = -1; \
static int CCTKARGNUM_psixx = -1; \
static int CCTKGROUPNUM_confac_2derivs = -1; \
static int CCTKARGNUM_psixy = -1; \
static int CCTKARGNUM_psixz = -1; \
static int CCTKARGNUM_psiy = -1; \
static int CCTKARGNUM_psiyy = -1; \
static int CCTKARGNUM_psiyz = -1; \
static int CCTKARGNUM_psiz = -1; \
static int CCTKARGNUM_psizz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_sf_active = -1; \
static int CCTKGROUPNUM_sf_active = -1; \
static int CCTKARGNUM_sf_area = -1; \
static int CCTKGROUPNUM_sf_info = -1; \
static int CCTKARGNUM_sf_centroid_x = -1; \
static int CCTKARGNUM_sf_centroid_y = -1; \
static int CCTKARGNUM_sf_centroid_z = -1; \
static int CCTKARGNUM_sf_delta_phi = -1; \
static int CCTKGROUPNUM_sf_coordinate_descriptors = -1; \
static int CCTKARGNUM_sf_delta_theta = -1; \
static int CCTKARGNUM_sf_max_radius = -1; \
static int CCTKARGNUM_sf_max_x = -1; \
static int CCTKARGNUM_sf_max_y = -1; \
static int CCTKARGNUM_sf_max_z = -1; \
static int CCTKARGNUM_sf_maxreflevel = -1; \
static int CCTKGROUPNUM_sf_maxreflevel = -1; \
static int CCTKARGNUM_sf_mean_radius = -1; \
static int CCTKARGNUM_sf_min_radius = -1; \
static int CCTKARGNUM_sf_min_x = -1; \
static int CCTKARGNUM_sf_min_y = -1; \
static int CCTKARGNUM_sf_min_z = -1; \
static int CCTKARGNUM_sf_minreflevel = -1; \
static int CCTKGROUPNUM_sf_minreflevel = -1; \
static int CCTKARGNUM_sf_nghostsphi = -1; \
static int CCTKGROUPNUM_sf_shape_descriptors = -1; \
static int CCTKARGNUM_sf_nghoststheta = -1; \
static int CCTKARGNUM_sf_nphi = -1; \
static int CCTKARGNUM_sf_ntheta = -1; \
static int CCTKARGNUM_sf_origin_phi = -1; \
static int CCTKARGNUM_sf_origin_theta = -1; \
static int CCTKARGNUM_sf_origin_x = -1; \
static int CCTKGROUPNUM_sf_origin = -1; \
static int CCTKARGNUM_sf_origin_y = -1; \
static int CCTKARGNUM_sf_origin_z = -1; \
static int CCTKARGNUM_sf_quadrupole_xx = -1; \
static int CCTKARGNUM_sf_quadrupole_xy = -1; \
static int CCTKARGNUM_sf_quadrupole_xz = -1; \
static int CCTKARGNUM_sf_quadrupole_yy = -1; \
static int CCTKARGNUM_sf_quadrupole_yz = -1; \
static int CCTKARGNUM_sf_quadrupole_zz = -1; \
static int CCTKARGNUM_sf_radius = -1; \
static int CCTKGROUPNUM_sf_radius = -1; \
static int CCTKARGNUM_sf_valid = -1; \
static int CCTKGROUPNUM_sf_valid = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_space_mask = -1; \
static int CCTKGROUPNUM_space_mask_group = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_AHFINDERDIRECT_PUBLIC_C2F \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_conformal_state == -1) CCTKARGNUM_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKGROUPNUM_conformal_state == -1) CCTKGROUPNUM_conformal_state = CCTK_GroupIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_emask == -1) CCTKARGNUM_emask = CCTK_VarIndex("SPACEMASK::emask"); \
if(CCTKGROUPNUM_mask == -1) CCTKGROUPNUM_mask = CCTK_GroupIndex("SPACEMASK::mask"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
if(CCTKGROUPNUM_confac == -1) CCTKGROUPNUM_confac = CCTK_GroupIndex("STATICCONFORMAL::confac"); \
if(CCTKARGNUM_psix == -1) CCTKARGNUM_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
if(CCTKGROUPNUM_confac_1derivs == -1) CCTKGROUPNUM_confac_1derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_1derivs"); \
if(CCTKARGNUM_psixx == -1) CCTKARGNUM_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
if(CCTKGROUPNUM_confac_2derivs == -1) CCTKGROUPNUM_confac_2derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_2derivs"); \
if(CCTKARGNUM_psixy == -1) CCTKARGNUM_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
if(CCTKARGNUM_psixz == -1) CCTKARGNUM_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
if(CCTKARGNUM_psiy == -1) CCTKARGNUM_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
if(CCTKARGNUM_psiyy == -1) CCTKARGNUM_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
if(CCTKARGNUM_psiyz == -1) CCTKARGNUM_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
if(CCTKARGNUM_psiz == -1) CCTKARGNUM_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
if(CCTKARGNUM_psizz == -1) CCTKARGNUM_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_sf_active == -1) CCTKARGNUM_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
if(CCTKGROUPNUM_sf_active == -1) CCTKGROUPNUM_sf_active = CCTK_GroupIndex("SPHERICALSURFACE::sf_active"); \
if(CCTKARGNUM_sf_area == -1) CCTKARGNUM_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
if(CCTKGROUPNUM_sf_info == -1) CCTKGROUPNUM_sf_info = CCTK_GroupIndex("SPHERICALSURFACE::sf_info"); \
if(CCTKARGNUM_sf_centroid_x == -1) CCTKARGNUM_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
if(CCTKARGNUM_sf_centroid_y == -1) CCTKARGNUM_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
if(CCTKARGNUM_sf_centroid_z == -1) CCTKARGNUM_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
if(CCTKARGNUM_sf_delta_phi == -1) CCTKARGNUM_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
if(CCTKGROUPNUM_sf_coordinate_descriptors == -1) CCTKGROUPNUM_sf_coordinate_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_coordinate_descriptors"); \
if(CCTKARGNUM_sf_delta_theta == -1) CCTKARGNUM_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
if(CCTKARGNUM_sf_max_radius == -1) CCTKARGNUM_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
if(CCTKARGNUM_sf_max_x == -1) CCTKARGNUM_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
if(CCTKARGNUM_sf_max_y == -1) CCTKARGNUM_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
if(CCTKARGNUM_sf_max_z == -1) CCTKARGNUM_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
if(CCTKARGNUM_sf_maxreflevel == -1) CCTKARGNUM_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
if(CCTKGROUPNUM_sf_maxreflevel == -1) CCTKGROUPNUM_sf_maxreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_maxreflevel"); \
if(CCTKARGNUM_sf_mean_radius == -1) CCTKARGNUM_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
if(CCTKARGNUM_sf_min_radius == -1) CCTKARGNUM_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
if(CCTKARGNUM_sf_min_x == -1) CCTKARGNUM_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
if(CCTKARGNUM_sf_min_y == -1) CCTKARGNUM_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
if(CCTKARGNUM_sf_min_z == -1) CCTKARGNUM_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
if(CCTKARGNUM_sf_minreflevel == -1) CCTKARGNUM_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
if(CCTKGROUPNUM_sf_minreflevel == -1) CCTKGROUPNUM_sf_minreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_minreflevel"); \
if(CCTKARGNUM_sf_nghostsphi == -1) CCTKARGNUM_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
if(CCTKGROUPNUM_sf_shape_descriptors == -1) CCTKGROUPNUM_sf_shape_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_shape_descriptors"); \
if(CCTKARGNUM_sf_nghoststheta == -1) CCTKARGNUM_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
if(CCTKARGNUM_sf_nphi == -1) CCTKARGNUM_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
if(CCTKARGNUM_sf_ntheta == -1) CCTKARGNUM_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
if(CCTKARGNUM_sf_origin_phi == -1) CCTKARGNUM_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
if(CCTKARGNUM_sf_origin_theta == -1) CCTKARGNUM_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
if(CCTKARGNUM_sf_origin_x == -1) CCTKARGNUM_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
if(CCTKGROUPNUM_sf_origin == -1) CCTKGROUPNUM_sf_origin = CCTK_GroupIndex("SPHERICALSURFACE::sf_origin"); \
if(CCTKARGNUM_sf_origin_y == -1) CCTKARGNUM_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
if(CCTKARGNUM_sf_origin_z == -1) CCTKARGNUM_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
if(CCTKARGNUM_sf_quadrupole_xx == -1) CCTKARGNUM_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
if(CCTKARGNUM_sf_quadrupole_xy == -1) CCTKARGNUM_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
if(CCTKARGNUM_sf_quadrupole_xz == -1) CCTKARGNUM_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
if(CCTKARGNUM_sf_quadrupole_yy == -1) CCTKARGNUM_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
if(CCTKARGNUM_sf_quadrupole_yz == -1) CCTKARGNUM_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
if(CCTKARGNUM_sf_quadrupole_zz == -1) CCTKARGNUM_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
if(CCTKARGNUM_sf_radius == -1) CCTKARGNUM_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
if(CCTKGROUPNUM_sf_radius == -1) CCTKGROUPNUM_sf_radius = CCTK_GroupIndex("SPHERICALSURFACE::sf_radius"); \
if(CCTKARGNUM_sf_valid == -1) CCTKARGNUM_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
if(CCTKGROUPNUM_sf_valid == -1) CCTKGROUPNUM_sf_valid = CCTK_GroupIndex("SPHERICALSURFACE::sf_valid"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_space_mask == -1) CCTKARGNUM_space_mask = CCTK_VarIndex("SPACEMASK::space_mask"); \
if(CCTKGROUPNUM_space_mask_group == -1) CCTKGROUPNUM_space_mask_group = CCTK_GroupIndex("SPACEMASK::space_mask_group"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define AHFINDERDIRECT_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int

#define PASS_AHFINDERDIRECT_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(sf_radius, 0),\
PASS_GROUPSIZE(sf_radius, 1),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_active),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_coordinate_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_info),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_maxreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_minreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_origin),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_radius),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_shape_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_valid),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(conformal_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(emask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psix, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psizz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_active, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_area, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_maxreflevel, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_mean_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_minreflevel, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghostsphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghoststheta, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_ntheta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_zz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_valid, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(space_mask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define AHFINDERDIRECT_FARGUMENTS _CCTK_FARGUMENTS, AHFINDERDIRECT_PRIVATE_FARGUMENTS, AHFINDERDIRECT_PUBLIC_FARGUMENTS

#define DECLARE_AHFINDERDIRECT_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_AHFINDERDIRECT_PRIVATE_FARGUMENTS DECLARE_AHFINDERDIRECT_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDERDIRECT_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_AHFINDERDIRECT_PRIVATE_CARGUMENTS DECLARE_AHFINDERDIRECT_PUBLIC_CARGUMENTS

#define AHFINDERDIRECT_C2F_PROTO _CCTK_C2F_PROTO, AHFINDERDIRECT_PRIVATE_C2F_PROTO, AHFINDERDIRECT_PUBLIC_C2F_PROTO

#define PASS_AHFINDERDIRECT_C2F(GH) _PASS_CCTK_C2F(GH), PASS_AHFINDERDIRECT_PRIVATE_C2F(GH), PASS_AHFINDERDIRECT_PUBLIC_C2F(GH)

#define DECLARE_AHFINDERDIRECT_C2F _DECLARE_CCTK_C2F DECLARE_AHFINDERDIRECT_PRIVATE_C2F DECLARE_AHFINDERDIRECT_PUBLIC_C2F

#define INITIALISE_AHFINDERDIRECT_C2F _INITIALISE_CCTK_C2F INITIALISE_AHFINDERDIRECT_PRIVATE_C2F INITIALISE_AHFINDERDIRECT_PUBLIC_C2F

#define AHFINDERDIRECT_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
