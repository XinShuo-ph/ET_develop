/*@@
   @header  ML_WaveToy_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn ML_WaveToy
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_ML_WAVETOY_PRIVATE_FARGUMENTS \


#define ML_WAVETOY_PRIVATE_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ML_WAVETOY_PRIVATE_CARGUMENTS \


#define DECLARE_ML_WAVETOY_PRIVATE_C2F \


#define INITIALISE_ML_WAVETOY_PRIVATE_C2F \


#define ML_WAVETOY_PRIVATE_C2F_PROTO \


#define PASS_ML_WAVETOY_PRIVATE_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_ML_WAVETOY_PROTECTED_FARGUMENTS \


#define ML_WAVETOY_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ML_WAVETOY_PROTECTED_CARGUMENTS \


#define DECLARE_ML_WAVETOY_PROTECTED_C2F \


#define INITIALISE_ML_WAVETOY_PROTECTED_C2F \


#define ML_WAVETOY_PROTECTED_C2F_PROTO \


#define PASS_ML_WAVETOY_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_ML_WAVETOY_PUBLIC_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_REAL,eps,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rho_p_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhorhs,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhorhs_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhorhs_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,rhorhs_p_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,u,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,u_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,u_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,u_p_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,urhs,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,urhs_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,urhs_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,urhs_p_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define ML_WAVETOY_PUBLIC_FARGUMENTS \
coarse_dx,coarse_dy,coarse_dz,eps,r,rho,rho_p,rho_p_p,rho_p_p_p,rhorhs,rhorhs_p,rhorhs_p_p,rhorhs_p_p_p,u,u_p,u_p_p,u_p_p_p,urhs,urhs_p,urhs_p_p,urhs_p_p_p,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ML_WAVETOY_PUBLIC_CARGUMENTS \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_eps = -100; \
if (cctki_vi_eps == -100) cctki_vi_eps = CCTK_VarIndex("ML_WaveToy::eps"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eps, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eps)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_rho = -100; \
if (cctki_vi_rho == -100) cctki_vi_rho = CCTK_VarIndex("ML_WaveToy::rho"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rho)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_rho)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_rho)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rho_p_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 3, cctki_vi_rho)); \
static int cctki_vi_rhorhs = -100; \
if (cctki_vi_rhorhs == -100) cctki_vi_rhorhs = CCTK_VarIndex("ML_WaveToy::rhorhs"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhorhs, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_rhorhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhorhs_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_rhorhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhorhs_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_rhorhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, rhorhs_p_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 3, cctki_vi_rhorhs)); \
static int cctki_vi_u = -100; \
if (cctki_vi_u == -100) cctki_vi_u = CCTK_VarIndex("ML_WaveToy::u"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, u, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_u)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, u_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_u)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, u_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_u)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, u_p_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 3, cctki_vi_u)); \
static int cctki_vi_urhs = -100; \
if (cctki_vi_urhs == -100) cctki_vi_urhs = CCTK_VarIndex("ML_WaveToy::urhs"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, urhs, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_urhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, urhs_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_urhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, urhs_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_urhs)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, urhs_p_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 3, cctki_vi_urhs)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_ML_WAVETOY_PUBLIC_C2F \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_eps = -1; \
static int CCTKGROUPNUM_WT_eps = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_rho = -1; \
static int CCTKGROUPNUM_WT_rho = -1; \
static int CCTKARGNUM_rhorhs = -1; \
static int CCTKGROUPNUM_WT_rhorhs = -1; \
static int CCTKARGNUM_u = -1; \
static int CCTKGROUPNUM_WT_u = -1; \
static int CCTKARGNUM_urhs = -1; \
static int CCTKGROUPNUM_WT_urhs = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_ML_WAVETOY_PUBLIC_C2F \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_eps == -1) CCTKARGNUM_eps = CCTK_VarIndex("ML_WaveToy::eps"); \
if(CCTKGROUPNUM_WT_eps == -1) CCTKGROUPNUM_WT_eps = CCTK_GroupIndex("ML_WaveToy::WT_eps"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_rho == -1) CCTKARGNUM_rho = CCTK_VarIndex("ML_WaveToy::rho"); \
if(CCTKGROUPNUM_WT_rho == -1) CCTKGROUPNUM_WT_rho = CCTK_GroupIndex("ML_WaveToy::WT_rho"); \
if(CCTKARGNUM_rhorhs == -1) CCTKARGNUM_rhorhs = CCTK_VarIndex("ML_WaveToy::rhorhs"); \
if(CCTKGROUPNUM_WT_rhorhs == -1) CCTKGROUPNUM_WT_rhorhs = CCTK_GroupIndex("ML_WaveToy::WT_rhorhs"); \
if(CCTKARGNUM_u == -1) CCTKARGNUM_u = CCTK_VarIndex("ML_WaveToy::u"); \
if(CCTKGROUPNUM_WT_u == -1) CCTKGROUPNUM_WT_u = CCTK_GroupIndex("ML_WaveToy::WT_u"); \
if(CCTKARGNUM_urhs == -1) CCTKARGNUM_urhs = CCTK_VarIndex("ML_WaveToy::urhs"); \
if(CCTKGROUPNUM_WT_urhs == -1) CCTKGROUPNUM_WT_urhs = CCTK_GroupIndex("ML_WaveToy::WT_urhs"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define ML_WAVETOY_PUBLIC_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_ML_WAVETOY_PUBLIC_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eps, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(rho, 3)),\
(CCTK_REAL *)(PASS_REFERENCE(rhorhs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(rhorhs, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(rhorhs, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(rhorhs, 3)),\
(CCTK_REAL *)(PASS_REFERENCE(u, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(u, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(u, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(u, 3)),\
(CCTK_REAL *)(PASS_REFERENCE(urhs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(urhs, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(urhs, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(urhs, 3)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define ML_WAVETOY_FARGUMENTS _CCTK_FARGUMENTS, ML_WAVETOY_PUBLIC_FARGUMENTS

#define DECLARE_ML_WAVETOY_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_ML_WAVETOY_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_ML_WAVETOY_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_ML_WAVETOY_PUBLIC_CARGUMENTS

#define ML_WAVETOY_C2F_PROTO _CCTK_C2F_PROTO, ML_WAVETOY_PUBLIC_C2F_PROTO

#define PASS_ML_WAVETOY_C2F(GH) _PASS_CCTK_C2F(GH), PASS_ML_WAVETOY_PUBLIC_C2F(GH)

#define DECLARE_ML_WAVETOY_C2F _DECLARE_CCTK_C2F DECLARE_ML_WAVETOY_PUBLIC_C2F

#define INITIALISE_ML_WAVETOY_C2F _INITIALISE_CCTK_C2F INITIALISE_ML_WAVETOY_PUBLIC_C2F

#define ML_WAVETOY_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
