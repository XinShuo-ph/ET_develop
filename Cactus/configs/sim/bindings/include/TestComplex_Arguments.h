/*@@
   @header  TestComplex_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn TestComplex
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_TESTCOMPLEX_PRIVATE_FARGUMENTS \
INTEGER X0carrays1d&&\
INTEGER X0carrays2d&&\
INTEGER X0carrays3d&&\
INTEGER X1carrays2d&&\
INTEGER X1carrays3d&&\
INTEGER X2carrays3d&&\
CCTK_DECLARE(CCTK_COMPLEX,acomp1d,(X0carrays1d))&&\
CCTK_DECLARE(CCTK_COMPLEX,acomp2d,(X0carrays2d,X1carrays2d))&&\
CCTK_DECLARE(CCTK_COMPLEX,acomp3d,(X0carrays3d,X1carrays3d,X2carrays3d))&&\
CCTK_DECLARE(CCTK_COMPLEX,comp3d,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_COMPLEX,comp3d_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,imaginary_part,)&&\
CCTK_DECLARE(CCTK_REAL,real_part,)&&\
CCTK_DECLARE(CCTK_COMPLEX,scomp,)&&\


#define TESTCOMPLEX_PRIVATE_FARGUMENTS \
X0carrays1d,X0carrays2d,X0carrays3d,X1carrays2d,X1carrays3d,X2carrays3d,acomp1d,acomp2d,acomp3d,comp3d,comp3d_p,imaginary_part,real_part,scomp

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTCOMPLEX_PRIVATE_CARGUMENTS \
static int cctki_vi_acomp1d = -100; \
if (cctki_vi_acomp1d == -100) cctki_vi_acomp1d = CCTK_VarIndex("TestComplex::acomp1d"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, acomp1d, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_acomp1d)); \
static int cctki_vi_acomp2d = -100; \
if (cctki_vi_acomp2d == -100) cctki_vi_acomp2d = CCTK_VarIndex("TestComplex::acomp2d"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, acomp2d, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_acomp2d)); \
static int cctki_vi_acomp3d = -100; \
if (cctki_vi_acomp3d == -100) cctki_vi_acomp3d = CCTK_VarIndex("TestComplex::acomp3d"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, acomp3d, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_acomp3d)); \
static int cctki_vi_comp3d = -100; \
if (cctki_vi_comp3d == -100) cctki_vi_comp3d = CCTK_VarIndex("TestComplex::comp3d"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, comp3d, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_comp3d)); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, comp3d_p, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_comp3d)); \
static int cctki_vi_imaginary_part = -100; \
if (cctki_vi_imaginary_part == -100) cctki_vi_imaginary_part = CCTK_VarIndex("TestComplex::imaginary_part"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, imaginary_part, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_imaginary_part)); \
static int cctki_vi_real_part = -100; \
if (cctki_vi_real_part == -100) cctki_vi_real_part = CCTK_VarIndex("TestComplex::real_part"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, real_part, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_real_part)); \
static int cctki_vi_scomp = -100; \
if (cctki_vi_scomp == -100) cctki_vi_scomp = CCTK_VarIndex("TestComplex::scomp"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, scomp, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_scomp));

#define DECLARE_TESTCOMPLEX_PRIVATE_C2F \
static int CCTKARGNUM_acomp1d = -1; \
static int CCTKGROUPNUM_carrays1d = -1; \
static int CCTKARGNUM_acomp2d = -1; \
static int CCTKGROUPNUM_carrays2d = -1; \
static int CCTKARGNUM_acomp3d = -1; \
static int CCTKGROUPNUM_carrays3d = -1; \
static int CCTKARGNUM_comp3d = -1; \
static int CCTKGROUPNUM_cvars3d = -1; \
static int CCTKARGNUM_imaginary_part = -1; \
static int CCTKGROUPNUM_cmplx_output = -1; \
static int CCTKARGNUM_real_part = -1; \
static int CCTKARGNUM_scomp = -1; \
static int CCTKGROUPNUM_cscalars = -1;

#define INITIALISE_TESTCOMPLEX_PRIVATE_C2F \
if(CCTKARGNUM_acomp1d == -1) CCTKARGNUM_acomp1d = CCTK_VarIndex("TestComplex::acomp1d"); \
if(CCTKGROUPNUM_carrays1d == -1) CCTKGROUPNUM_carrays1d = CCTK_GroupIndex("TestComplex::carrays1d"); \
if(CCTKARGNUM_acomp2d == -1) CCTKARGNUM_acomp2d = CCTK_VarIndex("TestComplex::acomp2d"); \
if(CCTKGROUPNUM_carrays2d == -1) CCTKGROUPNUM_carrays2d = CCTK_GroupIndex("TestComplex::carrays2d"); \
if(CCTKARGNUM_acomp3d == -1) CCTKARGNUM_acomp3d = CCTK_VarIndex("TestComplex::acomp3d"); \
if(CCTKGROUPNUM_carrays3d == -1) CCTKGROUPNUM_carrays3d = CCTK_GroupIndex("TestComplex::carrays3d"); \
if(CCTKARGNUM_comp3d == -1) CCTKARGNUM_comp3d = CCTK_VarIndex("TestComplex::comp3d"); \
if(CCTKGROUPNUM_cvars3d == -1) CCTKGROUPNUM_cvars3d = CCTK_GroupIndex("TestComplex::cvars3d"); \
if(CCTKARGNUM_imaginary_part == -1) CCTKARGNUM_imaginary_part = CCTK_VarIndex("TestComplex::imaginary_part"); \
if(CCTKGROUPNUM_cmplx_output == -1) CCTKGROUPNUM_cmplx_output = CCTK_GroupIndex("TestComplex::cmplx_output"); \
if(CCTKARGNUM_real_part == -1) CCTKARGNUM_real_part = CCTK_VarIndex("TestComplex::real_part"); \
if(CCTKARGNUM_scomp == -1) CCTKARGNUM_scomp = CCTK_VarIndex("TestComplex::scomp"); \
if(CCTKGROUPNUM_cscalars == -1) CCTKGROUPNUM_cscalars = CCTK_GroupIndex("TestComplex::cscalars");

#define TESTCOMPLEX_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_COMPLEX *

#define PASS_TESTCOMPLEX_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(carrays1d, 0),\
PASS_GROUPSIZE(carrays2d, 0),\
PASS_GROUPSIZE(carrays3d, 0),\
PASS_GROUPSIZE(carrays2d, 1),\
PASS_GROUPSIZE(carrays3d, 1),\
PASS_GROUPSIZE(carrays3d, 2),\
(CCTK_COMPLEX *)(PASS_REFERENCE(acomp1d, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(acomp2d, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(acomp3d, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(comp3d, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(comp3d, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(imaginary_part, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(real_part, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(scomp, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTCOMPLEX_PROTECTED_FARGUMENTS \


#define TESTCOMPLEX_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTCOMPLEX_PROTECTED_CARGUMENTS \


#define DECLARE_TESTCOMPLEX_PROTECTED_C2F \


#define INITIALISE_TESTCOMPLEX_PROTECTED_C2F \


#define TESTCOMPLEX_PROTECTED_C2F_PROTO \


#define PASS_TESTCOMPLEX_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_TESTCOMPLEX_PUBLIC_FARGUMENTS \


#define TESTCOMPLEX_PUBLIC_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTCOMPLEX_PUBLIC_CARGUMENTS \


#define DECLARE_TESTCOMPLEX_PUBLIC_C2F \


#define INITIALISE_TESTCOMPLEX_PUBLIC_C2F \


#define TESTCOMPLEX_PUBLIC_C2F_PROTO \


#define PASS_TESTCOMPLEX_PUBLIC_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define TESTCOMPLEX_FARGUMENTS _CCTK_FARGUMENTS, TESTCOMPLEX_PRIVATE_FARGUMENTS

#define DECLARE_TESTCOMPLEX_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_TESTCOMPLEX_PRIVATE_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_TESTCOMPLEX_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_TESTCOMPLEX_PRIVATE_CARGUMENTS

#define TESTCOMPLEX_C2F_PROTO _CCTK_C2F_PROTO, TESTCOMPLEX_PRIVATE_C2F_PROTO

#define PASS_TESTCOMPLEX_C2F(GH) _PASS_CCTK_C2F(GH), PASS_TESTCOMPLEX_PRIVATE_C2F(GH)

#define DECLARE_TESTCOMPLEX_C2F _DECLARE_CCTK_C2F DECLARE_TESTCOMPLEX_PRIVATE_C2F

#define INITIALISE_TESTCOMPLEX_C2F _INITIALISE_CCTK_C2F INITIALISE_TESTCOMPLEX_PRIVATE_C2F

#define TESTCOMPLEX_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
