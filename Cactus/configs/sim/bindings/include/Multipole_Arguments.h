/*@@
   @header  Multipole_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn Multipole
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_MULTIPOLE_PRIVATE_FARGUMENTS \


#define MULTIPOLE_PRIVATE_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_MULTIPOLE_PRIVATE_CARGUMENTS \


#define DECLARE_MULTIPOLE_PRIVATE_C2F \


#define INITIALISE_MULTIPOLE_PRIVATE_C2F \


#define MULTIPOLE_PRIVATE_C2F_PROTO \


#define PASS_MULTIPOLE_PRIVATE_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_MULTIPOLE_PROTECTED_FARGUMENTS \


#define MULTIPOLE_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_MULTIPOLE_PROTECTED_CARGUMENTS \


#define DECLARE_MULTIPOLE_PROTECTED_C2F \


#define INITIALISE_MULTIPOLE_PROTECTED_C2F \


#define MULTIPOLE_PROTECTED_C2F_PROTO \


#define PASS_MULTIPOLE_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_MULTIPOLE_PUBLIC_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_REAL,harmonic_im,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,harmonic_re,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,test_driscollhealy_pi_symmetry,)&&\
CCTK_DECLARE(CCTK_REAL,test_midpoint_convergence_order,)&&\
CCTK_DECLARE(CCTK_REAL,test_midpoint_pi_symmetry,)&&\
CCTK_DECLARE(CCTK_REAL,test_midpoint_result_high,)&&\
CCTK_DECLARE(CCTK_REAL,test_midpoint_result_low,)&&\
CCTK_DECLARE(CCTK_REAL,test_simpson_convergence_order,)&&\
CCTK_DECLARE(CCTK_REAL,test_simpson_pi_symmetry,)&&\
CCTK_DECLARE(CCTK_REAL,test_simpson_result_high,)&&\
CCTK_DECLARE(CCTK_REAL,test_simpson_result_low,)&&\
CCTK_DECLARE(CCTK_REAL,test_trapezoidal_convergence_order,)&&\
CCTK_DECLARE(CCTK_REAL,test_trapezoidal_pi_symmetry,)&&\
CCTK_DECLARE(CCTK_REAL,test_trapezoidal_result_high,)&&\
CCTK_DECLARE(CCTK_REAL,test_trapezoidal_result_low,)&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define MULTIPOLE_PUBLIC_FARGUMENTS \
coarse_dx,coarse_dy,coarse_dz,harmonic_im,harmonic_re,r,test_driscollhealy_pi_symmetry,test_midpoint_convergence_order,test_midpoint_pi_symmetry,test_midpoint_result_high,test_midpoint_result_low,test_simpson_convergence_order,test_simpson_pi_symmetry,test_simpson_result_high,test_simpson_result_low,test_trapezoidal_convergence_order,test_trapezoidal_pi_symmetry,test_trapezoidal_result_high,test_trapezoidal_result_low,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_MULTIPOLE_PUBLIC_CARGUMENTS \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_harmonic_im = -100; \
if (cctki_vi_harmonic_im == -100) cctki_vi_harmonic_im = CCTK_VarIndex("multipole::harmonic_im"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, harmonic_im, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_harmonic_im)); \
static int cctki_vi_harmonic_re = -100; \
if (cctki_vi_harmonic_re == -100) cctki_vi_harmonic_re = CCTK_VarIndex("multipole::harmonic_re"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, harmonic_re, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_harmonic_re)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_test_driscollhealy_pi_symmetry = -100; \
if (cctki_vi_test_driscollhealy_pi_symmetry == -100) cctki_vi_test_driscollhealy_pi_symmetry = CCTK_VarIndex("multipole::test_driscollhealy_pi_symmetry"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_driscollhealy_pi_symmetry, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_driscollhealy_pi_symmetry)); \
static int cctki_vi_test_midpoint_convergence_order = -100; \
if (cctki_vi_test_midpoint_convergence_order == -100) cctki_vi_test_midpoint_convergence_order = CCTK_VarIndex("multipole::test_midpoint_convergence_order"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_midpoint_convergence_order, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_midpoint_convergence_order)); \
static int cctki_vi_test_midpoint_pi_symmetry = -100; \
if (cctki_vi_test_midpoint_pi_symmetry == -100) cctki_vi_test_midpoint_pi_symmetry = CCTK_VarIndex("multipole::test_midpoint_pi_symmetry"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_midpoint_pi_symmetry, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_midpoint_pi_symmetry)); \
static int cctki_vi_test_midpoint_result_high = -100; \
if (cctki_vi_test_midpoint_result_high == -100) cctki_vi_test_midpoint_result_high = CCTK_VarIndex("multipole::test_midpoint_result_high"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_midpoint_result_high, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_midpoint_result_high)); \
static int cctki_vi_test_midpoint_result_low = -100; \
if (cctki_vi_test_midpoint_result_low == -100) cctki_vi_test_midpoint_result_low = CCTK_VarIndex("multipole::test_midpoint_result_low"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_midpoint_result_low, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_midpoint_result_low)); \
static int cctki_vi_test_simpson_convergence_order = -100; \
if (cctki_vi_test_simpson_convergence_order == -100) cctki_vi_test_simpson_convergence_order = CCTK_VarIndex("multipole::test_simpson_convergence_order"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_simpson_convergence_order, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_simpson_convergence_order)); \
static int cctki_vi_test_simpson_pi_symmetry = -100; \
if (cctki_vi_test_simpson_pi_symmetry == -100) cctki_vi_test_simpson_pi_symmetry = CCTK_VarIndex("multipole::test_simpson_pi_symmetry"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_simpson_pi_symmetry, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_simpson_pi_symmetry)); \
static int cctki_vi_test_simpson_result_high = -100; \
if (cctki_vi_test_simpson_result_high == -100) cctki_vi_test_simpson_result_high = CCTK_VarIndex("multipole::test_simpson_result_high"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_simpson_result_high, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_simpson_result_high)); \
static int cctki_vi_test_simpson_result_low = -100; \
if (cctki_vi_test_simpson_result_low == -100) cctki_vi_test_simpson_result_low = CCTK_VarIndex("multipole::test_simpson_result_low"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_simpson_result_low, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_simpson_result_low)); \
static int cctki_vi_test_trapezoidal_convergence_order = -100; \
if (cctki_vi_test_trapezoidal_convergence_order == -100) cctki_vi_test_trapezoidal_convergence_order = CCTK_VarIndex("multipole::test_trapezoidal_convergence_order"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_trapezoidal_convergence_order, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_trapezoidal_convergence_order)); \
static int cctki_vi_test_trapezoidal_pi_symmetry = -100; \
if (cctki_vi_test_trapezoidal_pi_symmetry == -100) cctki_vi_test_trapezoidal_pi_symmetry = CCTK_VarIndex("multipole::test_trapezoidal_pi_symmetry"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_trapezoidal_pi_symmetry, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_trapezoidal_pi_symmetry)); \
static int cctki_vi_test_trapezoidal_result_high = -100; \
if (cctki_vi_test_trapezoidal_result_high == -100) cctki_vi_test_trapezoidal_result_high = CCTK_VarIndex("multipole::test_trapezoidal_result_high"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_trapezoidal_result_high, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_trapezoidal_result_high)); \
static int cctki_vi_test_trapezoidal_result_low = -100; \
if (cctki_vi_test_trapezoidal_result_low == -100) cctki_vi_test_trapezoidal_result_low = CCTK_VarIndex("multipole::test_trapezoidal_result_low"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, test_trapezoidal_result_low, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_test_trapezoidal_result_low)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_MULTIPOLE_PUBLIC_C2F \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_harmonic_im = -1; \
static int CCTKGROUPNUM_harmonics = -1; \
static int CCTKARGNUM_harmonic_re = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_test_driscollhealy_pi_symmetry = -1; \
static int CCTKGROUPNUM_test_integration_symmetries = -1; \
static int CCTKARGNUM_test_midpoint_convergence_order = -1; \
static int CCTKGROUPNUM_test_integration_convergence_orders = -1; \
static int CCTKARGNUM_test_midpoint_pi_symmetry = -1; \
static int CCTKARGNUM_test_midpoint_result_high = -1; \
static int CCTKGROUPNUM_test_integration_results = -1; \
static int CCTKARGNUM_test_midpoint_result_low = -1; \
static int CCTKARGNUM_test_simpson_convergence_order = -1; \
static int CCTKARGNUM_test_simpson_pi_symmetry = -1; \
static int CCTKARGNUM_test_simpson_result_high = -1; \
static int CCTKARGNUM_test_simpson_result_low = -1; \
static int CCTKARGNUM_test_trapezoidal_convergence_order = -1; \
static int CCTKARGNUM_test_trapezoidal_pi_symmetry = -1; \
static int CCTKARGNUM_test_trapezoidal_result_high = -1; \
static int CCTKARGNUM_test_trapezoidal_result_low = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_MULTIPOLE_PUBLIC_C2F \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_harmonic_im == -1) CCTKARGNUM_harmonic_im = CCTK_VarIndex("multipole::harmonic_im"); \
if(CCTKGROUPNUM_harmonics == -1) CCTKGROUPNUM_harmonics = CCTK_GroupIndex("multipole::harmonics"); \
if(CCTKARGNUM_harmonic_re == -1) CCTKARGNUM_harmonic_re = CCTK_VarIndex("multipole::harmonic_re"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_test_driscollhealy_pi_symmetry == -1) CCTKARGNUM_test_driscollhealy_pi_symmetry = CCTK_VarIndex("multipole::test_driscollhealy_pi_symmetry"); \
if(CCTKGROUPNUM_test_integration_symmetries == -1) CCTKGROUPNUM_test_integration_symmetries = CCTK_GroupIndex("multipole::test_integration_symmetries"); \
if(CCTKARGNUM_test_midpoint_convergence_order == -1) CCTKARGNUM_test_midpoint_convergence_order = CCTK_VarIndex("multipole::test_midpoint_convergence_order"); \
if(CCTKGROUPNUM_test_integration_convergence_orders == -1) CCTKGROUPNUM_test_integration_convergence_orders = CCTK_GroupIndex("multipole::test_integration_convergence_orders"); \
if(CCTKARGNUM_test_midpoint_pi_symmetry == -1) CCTKARGNUM_test_midpoint_pi_symmetry = CCTK_VarIndex("multipole::test_midpoint_pi_symmetry"); \
if(CCTKARGNUM_test_midpoint_result_high == -1) CCTKARGNUM_test_midpoint_result_high = CCTK_VarIndex("multipole::test_midpoint_result_high"); \
if(CCTKGROUPNUM_test_integration_results == -1) CCTKGROUPNUM_test_integration_results = CCTK_GroupIndex("multipole::test_integration_results"); \
if(CCTKARGNUM_test_midpoint_result_low == -1) CCTKARGNUM_test_midpoint_result_low = CCTK_VarIndex("multipole::test_midpoint_result_low"); \
if(CCTKARGNUM_test_simpson_convergence_order == -1) CCTKARGNUM_test_simpson_convergence_order = CCTK_VarIndex("multipole::test_simpson_convergence_order"); \
if(CCTKARGNUM_test_simpson_pi_symmetry == -1) CCTKARGNUM_test_simpson_pi_symmetry = CCTK_VarIndex("multipole::test_simpson_pi_symmetry"); \
if(CCTKARGNUM_test_simpson_result_high == -1) CCTKARGNUM_test_simpson_result_high = CCTK_VarIndex("multipole::test_simpson_result_high"); \
if(CCTKARGNUM_test_simpson_result_low == -1) CCTKARGNUM_test_simpson_result_low = CCTK_VarIndex("multipole::test_simpson_result_low"); \
if(CCTKARGNUM_test_trapezoidal_convergence_order == -1) CCTKARGNUM_test_trapezoidal_convergence_order = CCTK_VarIndex("multipole::test_trapezoidal_convergence_order"); \
if(CCTKARGNUM_test_trapezoidal_pi_symmetry == -1) CCTKARGNUM_test_trapezoidal_pi_symmetry = CCTK_VarIndex("multipole::test_trapezoidal_pi_symmetry"); \
if(CCTKARGNUM_test_trapezoidal_result_high == -1) CCTKARGNUM_test_trapezoidal_result_high = CCTK_VarIndex("multipole::test_trapezoidal_result_high"); \
if(CCTKARGNUM_test_trapezoidal_result_low == -1) CCTKARGNUM_test_trapezoidal_result_low = CCTK_VarIndex("multipole::test_trapezoidal_result_low"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define MULTIPOLE_PUBLIC_C2F_PROTO \
CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_MULTIPOLE_PUBLIC_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(harmonic_im, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(harmonic_re, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_driscollhealy_pi_symmetry, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_midpoint_convergence_order, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_midpoint_pi_symmetry, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_midpoint_result_high, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_midpoint_result_low, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_simpson_convergence_order, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_simpson_pi_symmetry, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_simpson_result_high, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_simpson_result_low, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_trapezoidal_convergence_order, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_trapezoidal_pi_symmetry, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_trapezoidal_result_high, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(test_trapezoidal_result_low, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define MULTIPOLE_FARGUMENTS _CCTK_FARGUMENTS, MULTIPOLE_PUBLIC_FARGUMENTS

#define DECLARE_MULTIPOLE_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_MULTIPOLE_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_MULTIPOLE_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_MULTIPOLE_PUBLIC_CARGUMENTS

#define MULTIPOLE_C2F_PROTO _CCTK_C2F_PROTO, MULTIPOLE_PUBLIC_C2F_PROTO

#define PASS_MULTIPOLE_C2F(GH) _PASS_CCTK_C2F(GH), PASS_MULTIPOLE_PUBLIC_C2F(GH)

#define DECLARE_MULTIPOLE_C2F _DECLARE_CCTK_C2F DECLARE_MULTIPOLE_PUBLIC_C2F

#define INITIALISE_MULTIPOLE_C2F _INITIALISE_CCTK_C2F INITIALISE_MULTIPOLE_PUBLIC_C2F

#define MULTIPOLE_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
