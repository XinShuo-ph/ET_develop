/*@@
   @header  AHFinder_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn AHFinder
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_AHFINDER_PRIVATE_FARGUMENTS \
INTEGER X0ahfinder_gaussian&&\
INTEGER X0out_1d_legen&&\
INTEGER X0out_2d_legen&&\
INTEGER X1ahfinder_gaussian&&\
INTEGER X1out_2d_legen&&\
CCTK_DECLARE(CCTK_REAL,ahf_centroid_x,)&&\
CCTK_DECLARE(CCTK_REAL,ahf_centroid_y,)&&\
CCTK_DECLARE(CCTK_REAL,ahf_centroid_z,)&&\
CCTK_DECLARE(CCTK_REAL,ahf_exp3,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgauss,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgradn,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgradx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgrady,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgradz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgrid3,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,drift_first,)&&\
CCTK_DECLARE(CCTK_REAL,gaussian,(X0ahfinder_gaussian,X1ahfinder_gaussian))&&\
CCTK_DECLARE(CCTK_REAL,out_area,)&&\
CCTK_DECLARE(CCTK_REAL,out_asymx,)&&\
CCTK_DECLARE(CCTK_REAL,out_asymy,)&&\
CCTK_DECLARE(CCTK_REAL,out_asymz,)&&\
CCTK_DECLARE(CCTK_REAL,out_c0,(X0out_1d_legen))&&\
CCTK_DECLARE(CCTK_REAL,out_cc,(X0out_2d_legen,X1out_2d_legen))&&\
CCTK_DECLARE(CCTK_REAL,out_centerx,)&&\
CCTK_DECLARE(CCTK_REAL,out_centery,)&&\
CCTK_DECLARE(CCTK_REAL,out_centerz,)&&\
CCTK_DECLARE(CCTK_REAL,out_cs,(X0out_2d_legen,X1out_2d_legen))&&\
CCTK_DECLARE(CCTK_REAL,out_mass,)&&\
CCTK_DECLARE(CCTK_REAL,out_meridian1,)&&\
CCTK_DECLARE(CCTK_REAL,out_meridian2,)&&\
CCTK_DECLARE(CCTK_REAL,out_perimeter,)&&\
CCTK_DECLARE(CCTK_REAL,out_radius,)&&\
CCTK_DECLARE(CCTK_INT,triggervar,)&&\


#define AHFINDER_PRIVATE_FARGUMENTS \
X0ahfinder_gaussian,X0out_1d_legen,X0out_2d_legen,X1ahfinder_gaussian,X1out_2d_legen,ahf_centroid_x,ahf_centroid_y,ahf_centroid_z,ahf_exp3,ahfgauss,ahfgradn,ahfgradx,ahfgrady,ahfgradz,ahfgrid3,drift_first,gaussian,out_area,out_asymx,out_asymy,out_asymz,out_c0,out_cc,out_centerx,out_centery,out_centerz,out_cs,out_mass,out_meridian1,out_meridian2,out_perimeter,out_radius,triggervar

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDER_PRIVATE_CARGUMENTS \
static int cctki_vi_ahf_centroid_x = -100; \
if (cctki_vi_ahf_centroid_x == -100) cctki_vi_ahf_centroid_x = CCTK_VarIndex("AHFinder::ahf_centroid_x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahf_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahf_centroid_x)); \
static int cctki_vi_ahf_centroid_y = -100; \
if (cctki_vi_ahf_centroid_y == -100) cctki_vi_ahf_centroid_y = CCTK_VarIndex("AHFinder::ahf_centroid_y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahf_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahf_centroid_y)); \
static int cctki_vi_ahf_centroid_z = -100; \
if (cctki_vi_ahf_centroid_z == -100) cctki_vi_ahf_centroid_z = CCTK_VarIndex("AHFinder::ahf_centroid_z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahf_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahf_centroid_z)); \
static int cctki_vi_ahf_exp3 = -100; \
if (cctki_vi_ahf_exp3 == -100) cctki_vi_ahf_exp3 = CCTK_VarIndex("AHFinder::ahf_exp3"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahf_exp3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahf_exp3)); \
static int cctki_vi_ahfgauss = -100; \
if (cctki_vi_ahfgauss == -100) cctki_vi_ahfgauss = CCTK_VarIndex("AHFinder::ahfgauss"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgauss, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgauss)); \
static int cctki_vi_ahfgradn = -100; \
if (cctki_vi_ahfgradn == -100) cctki_vi_ahfgradn = CCTK_VarIndex("AHFinder::ahfgradn"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgradn, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgradn)); \
static int cctki_vi_ahfgradx = -100; \
if (cctki_vi_ahfgradx == -100) cctki_vi_ahfgradx = CCTK_VarIndex("AHFinder::ahfgradx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgradx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgradx)); \
static int cctki_vi_ahfgrady = -100; \
if (cctki_vi_ahfgrady == -100) cctki_vi_ahfgrady = CCTK_VarIndex("AHFinder::ahfgrady"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgrady, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgrady)); \
static int cctki_vi_ahfgradz = -100; \
if (cctki_vi_ahfgradz == -100) cctki_vi_ahfgradz = CCTK_VarIndex("AHFinder::ahfgradz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgradz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgradz)); \
static int cctki_vi_ahfgrid3 = -100; \
if (cctki_vi_ahfgrid3 == -100) cctki_vi_ahfgrid3 = CCTK_VarIndex("AHFinder::ahfgrid3"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgrid3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgrid3)); \
static int cctki_vi_drift_first = -100; \
if (cctki_vi_drift_first == -100) cctki_vi_drift_first = CCTK_VarIndex("AHFinder::drift_first"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, drift_first, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_drift_first)); \
static int cctki_vi_gaussian = -100; \
if (cctki_vi_gaussian == -100) cctki_vi_gaussian = CCTK_VarIndex("AHFinder::gaussian"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gaussian, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gaussian)); \
static int cctki_vi_out_area = -100; \
if (cctki_vi_out_area == -100) cctki_vi_out_area = CCTK_VarIndex("AHFinder::out_area"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_area)); \
static int cctki_vi_out_asymx = -100; \
if (cctki_vi_out_asymx == -100) cctki_vi_out_asymx = CCTK_VarIndex("AHFinder::out_asymx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_asymx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_asymx)); \
static int cctki_vi_out_asymy = -100; \
if (cctki_vi_out_asymy == -100) cctki_vi_out_asymy = CCTK_VarIndex("AHFinder::out_asymy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_asymy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_asymy)); \
static int cctki_vi_out_asymz = -100; \
if (cctki_vi_out_asymz == -100) cctki_vi_out_asymz = CCTK_VarIndex("AHFinder::out_asymz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_asymz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_asymz)); \
static int cctki_vi_out_c0 = -100; \
if (cctki_vi_out_c0 == -100) cctki_vi_out_c0 = CCTK_VarIndex("AHFinder::out_c0"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_c0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_c0)); \
static int cctki_vi_out_cc = -100; \
if (cctki_vi_out_cc == -100) cctki_vi_out_cc = CCTK_VarIndex("AHFinder::out_cc"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_cc, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_cc)); \
static int cctki_vi_out_centerx = -100; \
if (cctki_vi_out_centerx == -100) cctki_vi_out_centerx = CCTK_VarIndex("AHFinder::out_centerx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_centerx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_centerx)); \
static int cctki_vi_out_centery = -100; \
if (cctki_vi_out_centery == -100) cctki_vi_out_centery = CCTK_VarIndex("AHFinder::out_centery"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_centery, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_centery)); \
static int cctki_vi_out_centerz = -100; \
if (cctki_vi_out_centerz == -100) cctki_vi_out_centerz = CCTK_VarIndex("AHFinder::out_centerz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_centerz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_centerz)); \
static int cctki_vi_out_cs = -100; \
if (cctki_vi_out_cs == -100) cctki_vi_out_cs = CCTK_VarIndex("AHFinder::out_cs"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_cs, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_cs)); \
static int cctki_vi_out_mass = -100; \
if (cctki_vi_out_mass == -100) cctki_vi_out_mass = CCTK_VarIndex("AHFinder::out_mass"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_mass)); \
static int cctki_vi_out_meridian1 = -100; \
if (cctki_vi_out_meridian1 == -100) cctki_vi_out_meridian1 = CCTK_VarIndex("AHFinder::out_meridian1"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_meridian1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_meridian1)); \
static int cctki_vi_out_meridian2 = -100; \
if (cctki_vi_out_meridian2 == -100) cctki_vi_out_meridian2 = CCTK_VarIndex("AHFinder::out_meridian2"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_meridian2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_meridian2)); \
static int cctki_vi_out_perimeter = -100; \
if (cctki_vi_out_perimeter == -100) cctki_vi_out_perimeter = CCTK_VarIndex("AHFinder::out_perimeter"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_perimeter, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_perimeter)); \
static int cctki_vi_out_radius = -100; \
if (cctki_vi_out_radius == -100) cctki_vi_out_radius = CCTK_VarIndex("AHFinder::out_radius"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, out_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_out_radius)); \
static int cctki_vi_triggervar = -100; \
if (cctki_vi_triggervar == -100) cctki_vi_triggervar = CCTK_VarIndex("AHFinder::triggervar"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, triggervar, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_triggervar));

#define DECLARE_AHFINDER_PRIVATE_C2F \
static int CCTKARGNUM_ahf_centroid_x = -1; \
static int CCTKGROUPNUM_ahf_centroid = -1; \
static int CCTKARGNUM_ahf_centroid_y = -1; \
static int CCTKARGNUM_ahf_centroid_z = -1; \
static int CCTKARGNUM_ahf_exp3 = -1; \
static int CCTKGROUPNUM_find3grid = -1; \
static int CCTKARGNUM_ahfgauss = -1; \
static int CCTKGROUPNUM_ahfinder_gauss = -1; \
static int CCTKARGNUM_ahfgradn = -1; \
static int CCTKGROUPNUM_ahfgradient = -1; \
static int CCTKARGNUM_ahfgradx = -1; \
static int CCTKARGNUM_ahfgrady = -1; \
static int CCTKARGNUM_ahfgradz = -1; \
static int CCTKARGNUM_ahfgrid3 = -1; \
static int CCTKARGNUM_drift_first = -1; \
static int CCTKGROUPNUM_drift_check = -1; \
static int CCTKARGNUM_gaussian = -1; \
static int CCTKGROUPNUM_ahfinder_gaussian = -1; \
static int CCTKARGNUM_out_area = -1; \
static int CCTKGROUPNUM_out_scalars = -1; \
static int CCTKARGNUM_out_asymx = -1; \
static int CCTKARGNUM_out_asymy = -1; \
static int CCTKARGNUM_out_asymz = -1; \
static int CCTKARGNUM_out_c0 = -1; \
static int CCTKGROUPNUM_out_1d_legen = -1; \
static int CCTKARGNUM_out_cc = -1; \
static int CCTKGROUPNUM_out_2d_legen = -1; \
static int CCTKARGNUM_out_centerx = -1; \
static int CCTKARGNUM_out_centery = -1; \
static int CCTKARGNUM_out_centerz = -1; \
static int CCTKARGNUM_out_cs = -1; \
static int CCTKARGNUM_out_mass = -1; \
static int CCTKARGNUM_out_meridian1 = -1; \
static int CCTKARGNUM_out_meridian2 = -1; \
static int CCTKARGNUM_out_perimeter = -1; \
static int CCTKARGNUM_out_radius = -1; \
static int CCTKARGNUM_triggervar = -1; \
static int CCTKGROUPNUM_triggergroup = -1;

#define INITIALISE_AHFINDER_PRIVATE_C2F \
if(CCTKARGNUM_ahf_centroid_x == -1) CCTKARGNUM_ahf_centroid_x = CCTK_VarIndex("AHFinder::ahf_centroid_x"); \
if(CCTKGROUPNUM_ahf_centroid == -1) CCTKGROUPNUM_ahf_centroid = CCTK_GroupIndex("AHFinder::ahf_centroid"); \
if(CCTKARGNUM_ahf_centroid_y == -1) CCTKARGNUM_ahf_centroid_y = CCTK_VarIndex("AHFinder::ahf_centroid_y"); \
if(CCTKARGNUM_ahf_centroid_z == -1) CCTKARGNUM_ahf_centroid_z = CCTK_VarIndex("AHFinder::ahf_centroid_z"); \
if(CCTKARGNUM_ahf_exp3 == -1) CCTKARGNUM_ahf_exp3 = CCTK_VarIndex("AHFinder::ahf_exp3"); \
if(CCTKGROUPNUM_find3grid == -1) CCTKGROUPNUM_find3grid = CCTK_GroupIndex("AHFinder::find3grid"); \
if(CCTKARGNUM_ahfgauss == -1) CCTKARGNUM_ahfgauss = CCTK_VarIndex("AHFinder::ahfgauss"); \
if(CCTKGROUPNUM_ahfinder_gauss == -1) CCTKGROUPNUM_ahfinder_gauss = CCTK_GroupIndex("AHFinder::ahfinder_gauss"); \
if(CCTKARGNUM_ahfgradn == -1) CCTKARGNUM_ahfgradn = CCTK_VarIndex("AHFinder::ahfgradn"); \
if(CCTKGROUPNUM_ahfgradient == -1) CCTKGROUPNUM_ahfgradient = CCTK_GroupIndex("AHFinder::ahfgradient"); \
if(CCTKARGNUM_ahfgradx == -1) CCTKARGNUM_ahfgradx = CCTK_VarIndex("AHFinder::ahfgradx"); \
if(CCTKARGNUM_ahfgrady == -1) CCTKARGNUM_ahfgrady = CCTK_VarIndex("AHFinder::ahfgrady"); \
if(CCTKARGNUM_ahfgradz == -1) CCTKARGNUM_ahfgradz = CCTK_VarIndex("AHFinder::ahfgradz"); \
if(CCTKARGNUM_ahfgrid3 == -1) CCTKARGNUM_ahfgrid3 = CCTK_VarIndex("AHFinder::ahfgrid3"); \
if(CCTKARGNUM_drift_first == -1) CCTKARGNUM_drift_first = CCTK_VarIndex("AHFinder::drift_first"); \
if(CCTKGROUPNUM_drift_check == -1) CCTKGROUPNUM_drift_check = CCTK_GroupIndex("AHFinder::drift_check"); \
if(CCTKARGNUM_gaussian == -1) CCTKARGNUM_gaussian = CCTK_VarIndex("AHFinder::gaussian"); \
if(CCTKGROUPNUM_ahfinder_gaussian == -1) CCTKGROUPNUM_ahfinder_gaussian = CCTK_GroupIndex("AHFinder::ahfinder_gaussian"); \
if(CCTKARGNUM_out_area == -1) CCTKARGNUM_out_area = CCTK_VarIndex("AHFinder::out_area"); \
if(CCTKGROUPNUM_out_scalars == -1) CCTKGROUPNUM_out_scalars = CCTK_GroupIndex("AHFinder::out_scalars"); \
if(CCTKARGNUM_out_asymx == -1) CCTKARGNUM_out_asymx = CCTK_VarIndex("AHFinder::out_asymx"); \
if(CCTKARGNUM_out_asymy == -1) CCTKARGNUM_out_asymy = CCTK_VarIndex("AHFinder::out_asymy"); \
if(CCTKARGNUM_out_asymz == -1) CCTKARGNUM_out_asymz = CCTK_VarIndex("AHFinder::out_asymz"); \
if(CCTKARGNUM_out_c0 == -1) CCTKARGNUM_out_c0 = CCTK_VarIndex("AHFinder::out_c0"); \
if(CCTKGROUPNUM_out_1d_legen == -1) CCTKGROUPNUM_out_1d_legen = CCTK_GroupIndex("AHFinder::out_1d_legen"); \
if(CCTKARGNUM_out_cc == -1) CCTKARGNUM_out_cc = CCTK_VarIndex("AHFinder::out_cc"); \
if(CCTKGROUPNUM_out_2d_legen == -1) CCTKGROUPNUM_out_2d_legen = CCTK_GroupIndex("AHFinder::out_2d_legen"); \
if(CCTKARGNUM_out_centerx == -1) CCTKARGNUM_out_centerx = CCTK_VarIndex("AHFinder::out_centerx"); \
if(CCTKARGNUM_out_centery == -1) CCTKARGNUM_out_centery = CCTK_VarIndex("AHFinder::out_centery"); \
if(CCTKARGNUM_out_centerz == -1) CCTKARGNUM_out_centerz = CCTK_VarIndex("AHFinder::out_centerz"); \
if(CCTKARGNUM_out_cs == -1) CCTKARGNUM_out_cs = CCTK_VarIndex("AHFinder::out_cs"); \
if(CCTKARGNUM_out_mass == -1) CCTKARGNUM_out_mass = CCTK_VarIndex("AHFinder::out_mass"); \
if(CCTKARGNUM_out_meridian1 == -1) CCTKARGNUM_out_meridian1 = CCTK_VarIndex("AHFinder::out_meridian1"); \
if(CCTKARGNUM_out_meridian2 == -1) CCTKARGNUM_out_meridian2 = CCTK_VarIndex("AHFinder::out_meridian2"); \
if(CCTKARGNUM_out_perimeter == -1) CCTKARGNUM_out_perimeter = CCTK_VarIndex("AHFinder::out_perimeter"); \
if(CCTKARGNUM_out_radius == -1) CCTKARGNUM_out_radius = CCTK_VarIndex("AHFinder::out_radius"); \
if(CCTKARGNUM_triggervar == -1) CCTKARGNUM_triggervar = CCTK_VarIndex("AHFinder::triggervar"); \
if(CCTKGROUPNUM_triggergroup == -1) CCTKGROUPNUM_triggergroup = CCTK_GroupIndex("AHFinder::triggergroup");

#define AHFINDER_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *

#define PASS_AHFINDER_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(ahfinder_gaussian, 0),\
PASS_GROUPSIZE(out_1d_legen, 0),\
PASS_GROUPSIZE(out_2d_legen, 0),\
PASS_GROUPSIZE(ahfinder_gaussian, 1),\
PASS_GROUPSIZE(out_2d_legen, 1),\
(CCTK_REAL *)(PASS_REFERENCE(ahf_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahf_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahf_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahf_exp3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgauss, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgradn, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgradx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgrady, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgradz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgrid3, 0)),\
(CCTK_INT *)(PASS_REFERENCE(drift_first, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gaussian, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_area, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_asymx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_asymy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_asymz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_c0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_cc, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_centerx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_centery, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_centerz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_cs, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_meridian1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_meridian2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_perimeter, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(out_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(triggervar, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_AHFINDER_PROTECTED_FARGUMENTS \


#define AHFINDER_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDER_PROTECTED_CARGUMENTS \


#define DECLARE_AHFINDER_PROTECTED_C2F \


#define INITIALISE_AHFINDER_PROTECTED_C2F \


#define AHFINDER_PROTECTED_C2F_PROTO \


#define PASS_AHFINDER_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_AHFINDER_PUBLIC_FARGUMENTS \
CCTK_DECLARE(CCTK_REAL,ahf_exp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahfgrid,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,ahmask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_INT,conformal_state,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_xmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_xmin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_ymax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_ymin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_zmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole1_zmin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_xmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_xmin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_ymax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_ymin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_zmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole2_zmin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_xmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_xmin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_ymax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_ymin,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_zmax,)&&\
CCTK_DECLARE(CCTK_REAL,dhole3_zmin,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,emask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,local_spatial_order,)&&\
CCTK_DECLARE(CCTK_REAL,psi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psix,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psizz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_INT,space_mask,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define AHFINDER_PUBLIC_FARGUMENTS \
ahf_exp,ahfgrid,ahmask,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,conformal_state,dhole1_xmax,dhole1_xmin,dhole1_ymax,dhole1_ymin,dhole1_zmax,dhole1_zmin,dhole2_xmax,dhole2_xmin,dhole2_ymax,dhole2_ymin,dhole2_zmax,dhole2_zmin,dhole3_xmax,dhole3_xmin,dhole3_ymax,dhole3_ymin,dhole3_zmax,dhole3_zmin,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,emask,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,local_spatial_order,psi,psix,psixx,psixy,psixz,psiy,psiyy,psiyz,psiz,psizz,r,shift_state,space_mask,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDER_PUBLIC_CARGUMENTS \
static int cctki_vi_ahf_exp = -100; \
if (cctki_vi_ahf_exp == -100) cctki_vi_ahf_exp = CCTK_VarIndex("AHFinder::ahf_exp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahf_exp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahf_exp)); \
static int cctki_vi_ahfgrid = -100; \
if (cctki_vi_ahfgrid == -100) cctki_vi_ahfgrid = CCTK_VarIndex("AHFinder::ahfgrid"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahfgrid, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahfgrid)); \
static int cctki_vi_ahmask = -100; \
if (cctki_vi_ahmask == -100) cctki_vi_ahmask = CCTK_VarIndex("AHFinder::ahmask"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, ahmask, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_ahmask)); \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_conformal_state = -100; \
if (cctki_vi_conformal_state == -100) cctki_vi_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, conformal_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_conformal_state)); \
static int cctki_vi_dhole1_xmax = -100; \
if (cctki_vi_dhole1_xmax == -100) cctki_vi_dhole1_xmax = CCTK_VarIndex("AHFinder::dhole1_xmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_xmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_xmax)); \
static int cctki_vi_dhole1_xmin = -100; \
if (cctki_vi_dhole1_xmin == -100) cctki_vi_dhole1_xmin = CCTK_VarIndex("AHFinder::dhole1_xmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_xmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_xmin)); \
static int cctki_vi_dhole1_ymax = -100; \
if (cctki_vi_dhole1_ymax == -100) cctki_vi_dhole1_ymax = CCTK_VarIndex("AHFinder::dhole1_ymax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_ymax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_ymax)); \
static int cctki_vi_dhole1_ymin = -100; \
if (cctki_vi_dhole1_ymin == -100) cctki_vi_dhole1_ymin = CCTK_VarIndex("AHFinder::dhole1_ymin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_ymin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_ymin)); \
static int cctki_vi_dhole1_zmax = -100; \
if (cctki_vi_dhole1_zmax == -100) cctki_vi_dhole1_zmax = CCTK_VarIndex("AHFinder::dhole1_zmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_zmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_zmax)); \
static int cctki_vi_dhole1_zmin = -100; \
if (cctki_vi_dhole1_zmin == -100) cctki_vi_dhole1_zmin = CCTK_VarIndex("AHFinder::dhole1_zmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole1_zmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole1_zmin)); \
static int cctki_vi_dhole2_xmax = -100; \
if (cctki_vi_dhole2_xmax == -100) cctki_vi_dhole2_xmax = CCTK_VarIndex("AHFinder::dhole2_xmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_xmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_xmax)); \
static int cctki_vi_dhole2_xmin = -100; \
if (cctki_vi_dhole2_xmin == -100) cctki_vi_dhole2_xmin = CCTK_VarIndex("AHFinder::dhole2_xmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_xmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_xmin)); \
static int cctki_vi_dhole2_ymax = -100; \
if (cctki_vi_dhole2_ymax == -100) cctki_vi_dhole2_ymax = CCTK_VarIndex("AHFinder::dhole2_ymax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_ymax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_ymax)); \
static int cctki_vi_dhole2_ymin = -100; \
if (cctki_vi_dhole2_ymin == -100) cctki_vi_dhole2_ymin = CCTK_VarIndex("AHFinder::dhole2_ymin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_ymin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_ymin)); \
static int cctki_vi_dhole2_zmax = -100; \
if (cctki_vi_dhole2_zmax == -100) cctki_vi_dhole2_zmax = CCTK_VarIndex("AHFinder::dhole2_zmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_zmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_zmax)); \
static int cctki_vi_dhole2_zmin = -100; \
if (cctki_vi_dhole2_zmin == -100) cctki_vi_dhole2_zmin = CCTK_VarIndex("AHFinder::dhole2_zmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole2_zmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole2_zmin)); \
static int cctki_vi_dhole3_xmax = -100; \
if (cctki_vi_dhole3_xmax == -100) cctki_vi_dhole3_xmax = CCTK_VarIndex("AHFinder::dhole3_xmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_xmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_xmax)); \
static int cctki_vi_dhole3_xmin = -100; \
if (cctki_vi_dhole3_xmin == -100) cctki_vi_dhole3_xmin = CCTK_VarIndex("AHFinder::dhole3_xmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_xmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_xmin)); \
static int cctki_vi_dhole3_ymax = -100; \
if (cctki_vi_dhole3_ymax == -100) cctki_vi_dhole3_ymax = CCTK_VarIndex("AHFinder::dhole3_ymax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_ymax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_ymax)); \
static int cctki_vi_dhole3_ymin = -100; \
if (cctki_vi_dhole3_ymin == -100) cctki_vi_dhole3_ymin = CCTK_VarIndex("AHFinder::dhole3_ymin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_ymin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_ymin)); \
static int cctki_vi_dhole3_zmax = -100; \
if (cctki_vi_dhole3_zmax == -100) cctki_vi_dhole3_zmax = CCTK_VarIndex("AHFinder::dhole3_zmax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_zmax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_zmax)); \
static int cctki_vi_dhole3_zmin = -100; \
if (cctki_vi_dhole3_zmin == -100) cctki_vi_dhole3_zmin = CCTK_VarIndex("AHFinder::dhole3_zmin"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dhole3_zmin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dhole3_zmin)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_emask = -100; \
if (cctki_vi_emask == -100) cctki_vi_emask = CCTK_VarIndex("SPACEMASK::emask"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, emask, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_emask)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_local_spatial_order = -100; \
if (cctki_vi_local_spatial_order == -100) cctki_vi_local_spatial_order = CCTK_VarIndex("ADMMACROS::local_spatial_order"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, local_spatial_order, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_local_spatial_order)); \
static int cctki_vi_psi = -100; \
if (cctki_vi_psi == -100) cctki_vi_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psi)); \
static int cctki_vi_psix = -100; \
if (cctki_vi_psix == -100) cctki_vi_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psix, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psix)); \
static int cctki_vi_psixx = -100; \
if (cctki_vi_psixx == -100) cctki_vi_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixx)); \
static int cctki_vi_psixy = -100; \
if (cctki_vi_psixy == -100) cctki_vi_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixy)); \
static int cctki_vi_psixz = -100; \
if (cctki_vi_psixz == -100) cctki_vi_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixz)); \
static int cctki_vi_psiy = -100; \
if (cctki_vi_psiy == -100) cctki_vi_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiy)); \
static int cctki_vi_psiyy = -100; \
if (cctki_vi_psiyy == -100) cctki_vi_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyy)); \
static int cctki_vi_psiyz = -100; \
if (cctki_vi_psiyz == -100) cctki_vi_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyz)); \
static int cctki_vi_psiz = -100; \
if (cctki_vi_psiz == -100) cctki_vi_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiz)); \
static int cctki_vi_psizz = -100; \
if (cctki_vi_psizz == -100) cctki_vi_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psizz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psizz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_space_mask = -100; \
if (cctki_vi_space_mask == -100) cctki_vi_space_mask = CCTK_VarIndex("SPACEMASK::space_mask"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, space_mask, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_space_mask)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_AHFINDER_PUBLIC_C2F \
static int CCTKARGNUM_ahf_exp = -1; \
static int CCTKGROUPNUM_ahfinderexp = -1; \
static int CCTKARGNUM_ahfgrid = -1; \
static int CCTKGROUPNUM_ahfindergrid = -1; \
static int CCTKARGNUM_ahmask = -1; \
static int CCTKGROUPNUM_ahfmask = -1; \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_conformal_state = -1; \
static int CCTKGROUPNUM_conformal_state = -1; \
static int CCTKARGNUM_dhole1_xmax = -1; \
static int CCTKGROUPNUM_hole1_bounds = -1; \
static int CCTKARGNUM_dhole1_xmin = -1; \
static int CCTKARGNUM_dhole1_ymax = -1; \
static int CCTKARGNUM_dhole1_ymin = -1; \
static int CCTKARGNUM_dhole1_zmax = -1; \
static int CCTKARGNUM_dhole1_zmin = -1; \
static int CCTKARGNUM_dhole2_xmax = -1; \
static int CCTKGROUPNUM_hole2_bounds = -1; \
static int CCTKARGNUM_dhole2_xmin = -1; \
static int CCTKARGNUM_dhole2_ymax = -1; \
static int CCTKARGNUM_dhole2_ymin = -1; \
static int CCTKARGNUM_dhole2_zmax = -1; \
static int CCTKARGNUM_dhole2_zmin = -1; \
static int CCTKARGNUM_dhole3_xmax = -1; \
static int CCTKGROUPNUM_hole3_bounds = -1; \
static int CCTKARGNUM_dhole3_xmin = -1; \
static int CCTKARGNUM_dhole3_ymax = -1; \
static int CCTKARGNUM_dhole3_ymin = -1; \
static int CCTKARGNUM_dhole3_zmax = -1; \
static int CCTKARGNUM_dhole3_zmin = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_emask = -1; \
static int CCTKGROUPNUM_mask = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_local_spatial_order = -1; \
static int CCTKGROUPNUM_local_spatial_order = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKGROUPNUM_confac = -1; \
static int CCTKARGNUM_psix = -1; \
static int CCTKGROUPNUM_confac_1derivs = -1; \
static int CCTKARGNUM_psixx = -1; \
static int CCTKGROUPNUM_confac_2derivs = -1; \
static int CCTKARGNUM_psixy = -1; \
static int CCTKARGNUM_psixz = -1; \
static int CCTKARGNUM_psiy = -1; \
static int CCTKARGNUM_psiyy = -1; \
static int CCTKARGNUM_psiyz = -1; \
static int CCTKARGNUM_psiz = -1; \
static int CCTKARGNUM_psizz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_space_mask = -1; \
static int CCTKGROUPNUM_space_mask_group = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_AHFINDER_PUBLIC_C2F \
if(CCTKARGNUM_ahf_exp == -1) CCTKARGNUM_ahf_exp = CCTK_VarIndex("AHFinder::ahf_exp"); \
if(CCTKGROUPNUM_ahfinderexp == -1) CCTKGROUPNUM_ahfinderexp = CCTK_GroupIndex("AHFinder::ahfinderexp"); \
if(CCTKARGNUM_ahfgrid == -1) CCTKARGNUM_ahfgrid = CCTK_VarIndex("AHFinder::ahfgrid"); \
if(CCTKGROUPNUM_ahfindergrid == -1) CCTKGROUPNUM_ahfindergrid = CCTK_GroupIndex("AHFinder::ahfindergrid"); \
if(CCTKARGNUM_ahmask == -1) CCTKARGNUM_ahmask = CCTK_VarIndex("AHFinder::ahmask"); \
if(CCTKGROUPNUM_ahfmask == -1) CCTKGROUPNUM_ahfmask = CCTK_GroupIndex("AHFinder::ahfmask"); \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_conformal_state == -1) CCTKARGNUM_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKGROUPNUM_conformal_state == -1) CCTKGROUPNUM_conformal_state = CCTK_GroupIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKARGNUM_dhole1_xmax == -1) CCTKARGNUM_dhole1_xmax = CCTK_VarIndex("AHFinder::dhole1_xmax"); \
if(CCTKGROUPNUM_hole1_bounds == -1) CCTKGROUPNUM_hole1_bounds = CCTK_GroupIndex("AHFinder::hole1_bounds"); \
if(CCTKARGNUM_dhole1_xmin == -1) CCTKARGNUM_dhole1_xmin = CCTK_VarIndex("AHFinder::dhole1_xmin"); \
if(CCTKARGNUM_dhole1_ymax == -1) CCTKARGNUM_dhole1_ymax = CCTK_VarIndex("AHFinder::dhole1_ymax"); \
if(CCTKARGNUM_dhole1_ymin == -1) CCTKARGNUM_dhole1_ymin = CCTK_VarIndex("AHFinder::dhole1_ymin"); \
if(CCTKARGNUM_dhole1_zmax == -1) CCTKARGNUM_dhole1_zmax = CCTK_VarIndex("AHFinder::dhole1_zmax"); \
if(CCTKARGNUM_dhole1_zmin == -1) CCTKARGNUM_dhole1_zmin = CCTK_VarIndex("AHFinder::dhole1_zmin"); \
if(CCTKARGNUM_dhole2_xmax == -1) CCTKARGNUM_dhole2_xmax = CCTK_VarIndex("AHFinder::dhole2_xmax"); \
if(CCTKGROUPNUM_hole2_bounds == -1) CCTKGROUPNUM_hole2_bounds = CCTK_GroupIndex("AHFinder::hole2_bounds"); \
if(CCTKARGNUM_dhole2_xmin == -1) CCTKARGNUM_dhole2_xmin = CCTK_VarIndex("AHFinder::dhole2_xmin"); \
if(CCTKARGNUM_dhole2_ymax == -1) CCTKARGNUM_dhole2_ymax = CCTK_VarIndex("AHFinder::dhole2_ymax"); \
if(CCTKARGNUM_dhole2_ymin == -1) CCTKARGNUM_dhole2_ymin = CCTK_VarIndex("AHFinder::dhole2_ymin"); \
if(CCTKARGNUM_dhole2_zmax == -1) CCTKARGNUM_dhole2_zmax = CCTK_VarIndex("AHFinder::dhole2_zmax"); \
if(CCTKARGNUM_dhole2_zmin == -1) CCTKARGNUM_dhole2_zmin = CCTK_VarIndex("AHFinder::dhole2_zmin"); \
if(CCTKARGNUM_dhole3_xmax == -1) CCTKARGNUM_dhole3_xmax = CCTK_VarIndex("AHFinder::dhole3_xmax"); \
if(CCTKGROUPNUM_hole3_bounds == -1) CCTKGROUPNUM_hole3_bounds = CCTK_GroupIndex("AHFinder::hole3_bounds"); \
if(CCTKARGNUM_dhole3_xmin == -1) CCTKARGNUM_dhole3_xmin = CCTK_VarIndex("AHFinder::dhole3_xmin"); \
if(CCTKARGNUM_dhole3_ymax == -1) CCTKARGNUM_dhole3_ymax = CCTK_VarIndex("AHFinder::dhole3_ymax"); \
if(CCTKARGNUM_dhole3_ymin == -1) CCTKARGNUM_dhole3_ymin = CCTK_VarIndex("AHFinder::dhole3_ymin"); \
if(CCTKARGNUM_dhole3_zmax == -1) CCTKARGNUM_dhole3_zmax = CCTK_VarIndex("AHFinder::dhole3_zmax"); \
if(CCTKARGNUM_dhole3_zmin == -1) CCTKARGNUM_dhole3_zmin = CCTK_VarIndex("AHFinder::dhole3_zmin"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_emask == -1) CCTKARGNUM_emask = CCTK_VarIndex("SPACEMASK::emask"); \
if(CCTKGROUPNUM_mask == -1) CCTKGROUPNUM_mask = CCTK_GroupIndex("SPACEMASK::mask"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_local_spatial_order == -1) CCTKARGNUM_local_spatial_order = CCTK_VarIndex("ADMMACROS::local_spatial_order"); \
if(CCTKGROUPNUM_local_spatial_order == -1) CCTKGROUPNUM_local_spatial_order = CCTK_GroupIndex("ADMMACROS::local_spatial_order"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
if(CCTKGROUPNUM_confac == -1) CCTKGROUPNUM_confac = CCTK_GroupIndex("STATICCONFORMAL::confac"); \
if(CCTKARGNUM_psix == -1) CCTKARGNUM_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
if(CCTKGROUPNUM_confac_1derivs == -1) CCTKGROUPNUM_confac_1derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_1derivs"); \
if(CCTKARGNUM_psixx == -1) CCTKARGNUM_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
if(CCTKGROUPNUM_confac_2derivs == -1) CCTKGROUPNUM_confac_2derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_2derivs"); \
if(CCTKARGNUM_psixy == -1) CCTKARGNUM_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
if(CCTKARGNUM_psixz == -1) CCTKARGNUM_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
if(CCTKARGNUM_psiy == -1) CCTKARGNUM_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
if(CCTKARGNUM_psiyy == -1) CCTKARGNUM_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
if(CCTKARGNUM_psiyz == -1) CCTKARGNUM_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
if(CCTKARGNUM_psiz == -1) CCTKARGNUM_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
if(CCTKARGNUM_psizz == -1) CCTKARGNUM_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_space_mask == -1) CCTKARGNUM_space_mask = CCTK_VarIndex("SPACEMASK::space_mask"); \
if(CCTKGROUPNUM_space_mask_group == -1) CCTKGROUPNUM_space_mask_group = CCTK_GroupIndex("SPACEMASK::space_mask_group"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define AHFINDER_PUBLIC_C2F_PROTO \


#define PASS_AHFINDER_PUBLIC_C2F(GH) \
(CCTK_REAL *)(PASS_REFERENCE(ahf_exp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahfgrid, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(ahmask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(conformal_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_xmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_xmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_ymax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_ymin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_zmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole1_zmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_xmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_xmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_ymax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_ymin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_zmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole2_zmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_xmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_xmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_ymax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_ymin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_zmax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dhole3_zmin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(emask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(local_spatial_order, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psix, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psizz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(space_mask, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define AHFINDER_FARGUMENTS _CCTK_FARGUMENTS, AHFINDER_PRIVATE_FARGUMENTS, AHFINDER_PUBLIC_FARGUMENTS

#define DECLARE_AHFINDER_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_AHFINDER_PRIVATE_FARGUMENTS DECLARE_AHFINDER_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_AHFINDER_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_AHFINDER_PRIVATE_CARGUMENTS DECLARE_AHFINDER_PUBLIC_CARGUMENTS

#define AHFINDER_C2F_PROTO _CCTK_C2F_PROTO, AHFINDER_PRIVATE_C2F_PROTO, AHFINDER_PUBLIC_C2F_PROTO

#define PASS_AHFINDER_C2F(GH) _PASS_CCTK_C2F(GH), PASS_AHFINDER_PRIVATE_C2F(GH), PASS_AHFINDER_PUBLIC_C2F(GH)

#define DECLARE_AHFINDER_C2F _DECLARE_CCTK_C2F DECLARE_AHFINDER_PRIVATE_C2F DECLARE_AHFINDER_PUBLIC_C2F

#define INITIALISE_AHFINDER_C2F _INITIALISE_CCTK_C2F INITIALISE_AHFINDER_PRIVATE_C2F INITIALISE_AHFINDER_PUBLIC_C2F

#define AHFINDER_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
