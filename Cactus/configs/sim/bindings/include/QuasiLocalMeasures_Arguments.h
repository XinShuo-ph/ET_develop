/*@@
   @header  QuasiLocalMeasures_Arguments.h
   @author  Automatically generated by GridFuncStuff.pl
   @desc
            Defines macros to declare/define/pass function arguments
            in calls from C to Fortran for thorn QuasiLocalMeasures
   @enddesc
 @@*/


#ifdef FCODE
#define DECLARE_QUASILOCALMEASURES_PRIVATE_FARGUMENTS \
INTEGER X0qlm_3determinant&&\
INTEGER X0qlm_coordinates&&\
INTEGER X0qlm_coordinates_p&&\
INTEGER X0qlm_invariant_coordinates&&\
INTEGER X0qlm_killed_twometric&&\
INTEGER X0qlm_killing_vector&&\
INTEGER X0qlm_newman_penrose&&\
INTEGER X0qlm_ricci_scalars&&\
INTEGER X0qlm_shapes&&\
INTEGER X0qlm_shapes_p&&\
INTEGER X0qlm_tetrad_l&&\
INTEGER X0qlm_tetrad_m&&\
INTEGER X0qlm_tetrad_n&&\
INTEGER X0qlm_twometric&&\
INTEGER X0qlm_weyl_scalars&&\
INTEGER X1qlm_3determinant&&\
INTEGER X1qlm_coordinates&&\
INTEGER X1qlm_coordinates_p&&\
INTEGER X1qlm_invariant_coordinates&&\
INTEGER X1qlm_killed_twometric&&\
INTEGER X1qlm_killing_vector&&\
INTEGER X1qlm_newman_penrose&&\
INTEGER X1qlm_ricci_scalars&&\
INTEGER X1qlm_shapes&&\
INTEGER X1qlm_shapes_p&&\
INTEGER X1qlm_tetrad_l&&\
INTEGER X1qlm_tetrad_m&&\
INTEGER X1qlm_tetrad_n&&\
INTEGER X1qlm_twometric&&\
INTEGER X1qlm_weyl_scalars&&\
INTEGER qlm_3determinant_length&&\
INTEGER qlm_coordinates_length&&\
INTEGER qlm_coordinates_p_length&&\
INTEGER qlm_grid_int_length&&\
INTEGER qlm_grid_real_length&&\
INTEGER qlm_grid_real_p_length&&\
INTEGER qlm_invariant_coordinates_length&&\
INTEGER qlm_killed_twometric_length&&\
INTEGER qlm_killing_vector_length&&\
INTEGER qlm_multipole_moments_length&&\
INTEGER qlm_newman_penrose_length&&\
INTEGER qlm_ricci_scalars_length&&\
INTEGER qlm_scalars_length&&\
INTEGER qlm_scalars_p_length&&\
INTEGER qlm_shapes_length&&\
INTEGER qlm_shapes_p_length&&\
INTEGER qlm_state_length&&\
INTEGER qlm_state_p_length&&\
INTEGER qlm_tetrad_l_length&&\
INTEGER qlm_tetrad_m_length&&\
INTEGER qlm_tetrad_n_length&&\
INTEGER qlm_twometric_length&&\
INTEGER qlm_weyl_scalars_length&&\
CCTK_DECLARE(CCTK_REAL,qlm_3det,(X0qlm_3determinant,X1qlm_3determinant,qlm_3determinant_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_angular_momentum_x,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_angular_momentum_y,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_angular_momentum_z,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_energy,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_momentum_x,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_momentum_y,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_adm_momentum_z,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_area,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_calc_error,(qlm_state_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_chi,(X0qlm_killing_vector,X1qlm_killing_vector,qlm_killing_vector_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_coordspinx,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_coordspiny,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_coordspinz,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_cvspin,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_delta_phi,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_delta_theta,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_equatorial_circumference,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_killing_vector,(qlm_state_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_killing_vector_p,(qlm_state_p_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_killing_vector_p_p,(qlm_state_p_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_valid_data,(qlm_state_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_valid_data_p,(qlm_state_p_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_have_valid_data_p_p,(qlm_state_p_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_i,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_inv_z,(X0qlm_invariant_coordinates,X1qlm_invariant_coordinates,qlm_invariant_coordinates_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_irreducible_mass,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_iteration,(qlm_state_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_j,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_killing_eigenvalue_im,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_killing_eigenvalue_re,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_l0,(X0qlm_tetrad_l,X1qlm_tetrad_l,qlm_tetrad_l_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_l1,(X0qlm_tetrad_l,X1qlm_tetrad_l,qlm_tetrad_l_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_l2,(X0qlm_tetrad_l,X1qlm_tetrad_l,qlm_tetrad_l_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_l3,(X0qlm_tetrad_l,X1qlm_tetrad_l,qlm_tetrad_l_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_lambda,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_lie_n_theta_l,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_lqpp,(X0qlm_killed_twometric,X1qlm_killed_twometric,qlm_killed_twometric_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_lqtp,(X0qlm_killed_twometric,X1qlm_killed_twometric,qlm_killed_twometric_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_lqtt,(X0qlm_killed_twometric,X1qlm_killed_twometric,qlm_killed_twometric_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_m0,(X0qlm_tetrad_m,X1qlm_tetrad_m,qlm_tetrad_m_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_m1,(X0qlm_tetrad_m,X1qlm_tetrad_m,qlm_tetrad_m_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_m2,(X0qlm_tetrad_m,X1qlm_tetrad_m,qlm_tetrad_m_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_m3,(X0qlm_tetrad_m,X1qlm_tetrad_m,qlm_tetrad_m_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mass,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mass_guess,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j0,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j1,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j2,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j3,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j4,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j5,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j6,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j7,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_j8,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m0,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m1,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m2,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m3,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m4,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m5,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m6,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m7,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_mp_m8,(qlm_multipole_moments_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_n0,(X0qlm_tetrad_n,X1qlm_tetrad_n,qlm_tetrad_n_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_n1,(X0qlm_tetrad_n,X1qlm_tetrad_n,qlm_tetrad_n_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_n2,(X0qlm_tetrad_n,X1qlm_tetrad_n,qlm_tetrad_n_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_n3,(X0qlm_tetrad_n,X1qlm_tetrad_n,qlm_tetrad_n_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_nghostsphi,(qlm_grid_int_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_nghoststheta,(qlm_grid_int_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npalpha,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npbeta,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npepsilon,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npgamma,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_nphi,(qlm_grid_int_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npkappa,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_nplambda,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npmu,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npnu,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_nppi,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_nprho,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_npsigma,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_npspin,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_nptau,(X0qlm_newman_penrose,X1qlm_newman_penrose,qlm_newman_penrose_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_ntheta,(qlm_grid_int_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_phi,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_theta,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_x,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_x_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_x_p_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_y,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_y_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_y_p_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_z,(qlm_grid_real_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_z_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_origin_z_p_p,(qlm_grid_real_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi00,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi01,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi02,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi10,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi11,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi12,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi20,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi21,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_phi22,(X0qlm_ricci_scalars,X1qlm_ricci_scalars,qlm_ricci_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_polar_circumference_0,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_polar_circumference_pi_2,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_psi0,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_psi1,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_psi2,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_psi3,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_psi4,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_qpp,(X0qlm_twometric,X1qlm_twometric,qlm_twometric_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_qtp,(X0qlm_twometric,X1qlm_twometric,qlm_twometric_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_qtt,(X0qlm_twometric,X1qlm_twometric,qlm_twometric_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_radius,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_radius_p,(qlm_scalars_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_radius_p_p,(qlm_scalars_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_rsc,(X0qlm_twometric,X1qlm_twometric,qlm_twometric_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_s,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_COMPLEX,qlm_sdiff,(X0qlm_weyl_scalars,X1qlm_weyl_scalars,qlm_weyl_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_shape,(X0qlm_shapes,X1qlm_shapes,qlm_shapes_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_shape_p,(X0qlm_shapes_p,X1qlm_shapes_p,qlm_shapes_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_shape_p_p,(X0qlm_shapes_p,X1qlm_shapes_p,qlm_shapes_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_spin,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_spin_guess,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_time,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_time_p,(qlm_scalars_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_time_p_p,(qlm_scalars_p_length))&&\
CCTK_DECLARE(CCTK_INT,qlm_timederiv_order,(qlm_state_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_angular_momentum_x,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_angular_momentum_y,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_angular_momentum_z,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_energy,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_momentum_x,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_momentum_y,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_w_momentum_z,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_wsspin,(qlm_scalars_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_x,(X0qlm_coordinates,X1qlm_coordinates,qlm_coordinates_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_x_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_x_p_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_xi_p,(X0qlm_killing_vector,X1qlm_killing_vector,qlm_killing_vector_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_xi_t,(X0qlm_killing_vector,X1qlm_killing_vector,qlm_killing_vector_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_y,(X0qlm_coordinates,X1qlm_coordinates,qlm_coordinates_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_y_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_y_p_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_z,(X0qlm_coordinates,X1qlm_coordinates,qlm_coordinates_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_z_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\
CCTK_DECLARE(CCTK_REAL,qlm_z_p_p,(X0qlm_coordinates_p,X1qlm_coordinates_p,qlm_coordinates_p_length))&&\


#define QUASILOCALMEASURES_PRIVATE_FARGUMENTS \
X0qlm_3determinant,X0qlm_coordinates,X0qlm_coordinates_p,X0qlm_invariant_coordinates,X0qlm_killed_twometric,X0qlm_killing_vector,X0qlm_newman_penrose,X0qlm_ricci_scalars,X0qlm_shapes,X0qlm_shapes_p,X0qlm_tetrad_l,X0qlm_tetrad_m,X0qlm_tetrad_n,X0qlm_twometric,X0qlm_weyl_scalars,X1qlm_3determinant,X1qlm_coordinates,X1qlm_coordinates_p,X1qlm_invariant_coordinates,X1qlm_killed_twometric,X1qlm_killing_vector,X1qlm_newman_penrose,X1qlm_ricci_scalars,X1qlm_shapes,X1qlm_shapes_p,X1qlm_tetrad_l,X1qlm_tetrad_m,X1qlm_tetrad_n,X1qlm_twometric,X1qlm_weyl_scalars,qlm_3determinant_length,qlm_coordinates_length,qlm_coordinates_p_length,qlm_grid_int_length,qlm_grid_real_length,qlm_grid_real_p_length,qlm_invariant_coordinates_length,qlm_killed_twometric_length,qlm_killing_vector_length,qlm_multipole_moments_length,qlm_newman_penrose_length,qlm_ricci_scalars_length,qlm_scalars_length,qlm_scalars_p_length,qlm_shapes_length,qlm_shapes_p_length,qlm_state_length,qlm_state_p_length,qlm_tetrad_l_length,qlm_tetrad_m_length,qlm_tetrad_n_length,qlm_twometric_length,qlm_weyl_scalars_length,qlm_3det,qlm_adm_angular_momentum_x,qlm_adm_angular_momentum_y,qlm_adm_angular_momentum_z,qlm_adm_energy,qlm_adm_momentum_x,qlm_adm_momentum_y,qlm_adm_momentum_z,qlm_area,qlm_calc_error,qlm_chi,qlm_coordspinx,qlm_coordspiny,qlm_coordspinz,qlm_cvspin,qlm_delta_phi,qlm_delta_theta,qlm_equatorial_circumference,qlm_have_killing_vector,qlm_have_killing_vector_p,qlm_have_killing_vector_p_p,qlm_have_valid_data,qlm_have_valid_data_p,qlm_have_valid_data_p_p,qlm_i,qlm_inv_z,qlm_irreducible_mass,qlm_iteration,qlm_j,qlm_killing_eigenvalue_im,qlm_killing_eigenvalue_re,qlm_l0,qlm_l1,qlm_l2,qlm_l3,qlm_lambda,qlm_lie_n_theta_l,qlm_lqpp,qlm_lqtp,qlm_lqtt,qlm_m0,qlm_m1,qlm_m2,qlm_m3,qlm_mass,qlm_mass_guess,qlm_mp_j0,qlm_mp_j1,qlm_mp_j2,qlm_mp_j3,qlm_mp_j4,qlm_mp_j5,qlm_mp_j6,qlm_mp_j7,qlm_mp_j8,qlm_mp_m0,qlm_mp_m1,qlm_mp_m2,qlm_mp_m3,qlm_mp_m4,qlm_mp_m5,qlm_mp_m6,qlm_mp_m7,qlm_mp_m8,qlm_n0,qlm_n1,qlm_n2,qlm_n3,qlm_nghostsphi,qlm_nghoststheta,qlm_npalpha,qlm_npbeta,qlm_npepsilon,qlm_npgamma,qlm_nphi,qlm_npkappa,qlm_nplambda,qlm_npmu,qlm_npnu,qlm_nppi,qlm_nprho,qlm_npsigma,qlm_npspin,qlm_nptau,qlm_ntheta,qlm_origin_phi,qlm_origin_theta,qlm_origin_x,qlm_origin_x_p,qlm_origin_x_p_p,qlm_origin_y,qlm_origin_y_p,qlm_origin_y_p_p,qlm_origin_z,qlm_origin_z_p,qlm_origin_z_p_p,qlm_phi00,qlm_phi01,qlm_phi02,qlm_phi10,qlm_phi11,qlm_phi12,qlm_phi20,qlm_phi21,qlm_phi22,qlm_polar_circumference_0,qlm_polar_circumference_pi_2,qlm_psi0,qlm_psi1,qlm_psi2,qlm_psi3,qlm_psi4,qlm_qpp,qlm_qtp,qlm_qtt,qlm_radius,qlm_radius_p,qlm_radius_p_p,qlm_rsc,qlm_s,qlm_sdiff,qlm_shape,qlm_shape_p,qlm_shape_p_p,qlm_spin,qlm_spin_guess,qlm_time,qlm_time_p,qlm_time_p_p,qlm_timederiv_order,qlm_w_angular_momentum_x,qlm_w_angular_momentum_y,qlm_w_angular_momentum_z,qlm_w_energy,qlm_w_momentum_x,qlm_w_momentum_y,qlm_w_momentum_z,qlm_wsspin,qlm_x,qlm_x_p,qlm_x_p_p,qlm_xi_p,qlm_xi_t,qlm_y,qlm_y_p,qlm_y_p_p,qlm_z,qlm_z_p,qlm_z_p_p

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_QUASILOCALMEASURES_PRIVATE_CARGUMENTS \
static int cctki_vi_qlm_3det = -100; \
if (cctki_vi_qlm_3det == -100) cctki_vi_qlm_3det = CCTK_VarIndex("QuasiLocalMeasures::qlm_3det[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_3det, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_3det)); \
static int cctki_vi_qlm_adm_angular_momentum_x = -100; \
if (cctki_vi_qlm_adm_angular_momentum_x == -100) cctki_vi_qlm_adm_angular_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_angular_momentum_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_angular_momentum_x)); \
static int cctki_vi_qlm_adm_angular_momentum_y = -100; \
if (cctki_vi_qlm_adm_angular_momentum_y == -100) cctki_vi_qlm_adm_angular_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_angular_momentum_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_angular_momentum_y)); \
static int cctki_vi_qlm_adm_angular_momentum_z = -100; \
if (cctki_vi_qlm_adm_angular_momentum_z == -100) cctki_vi_qlm_adm_angular_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_angular_momentum_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_angular_momentum_z)); \
static int cctki_vi_qlm_adm_energy = -100; \
if (cctki_vi_qlm_adm_energy == -100) cctki_vi_qlm_adm_energy = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_energy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_energy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_energy)); \
static int cctki_vi_qlm_adm_momentum_x = -100; \
if (cctki_vi_qlm_adm_momentum_x == -100) cctki_vi_qlm_adm_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_momentum_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_momentum_x)); \
static int cctki_vi_qlm_adm_momentum_y = -100; \
if (cctki_vi_qlm_adm_momentum_y == -100) cctki_vi_qlm_adm_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_momentum_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_momentum_y)); \
static int cctki_vi_qlm_adm_momentum_z = -100; \
if (cctki_vi_qlm_adm_momentum_z == -100) cctki_vi_qlm_adm_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_adm_momentum_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_adm_momentum_z)); \
static int cctki_vi_qlm_area = -100; \
if (cctki_vi_qlm_area == -100) cctki_vi_qlm_area = CCTK_VarIndex("QuasiLocalMeasures::qlm_area[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_area)); \
static int cctki_vi_qlm_calc_error = -100; \
if (cctki_vi_qlm_calc_error == -100) cctki_vi_qlm_calc_error = CCTK_VarIndex("QuasiLocalMeasures::qlm_calc_error[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_calc_error, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_calc_error)); \
static int cctki_vi_qlm_chi = -100; \
if (cctki_vi_qlm_chi == -100) cctki_vi_qlm_chi = CCTK_VarIndex("QuasiLocalMeasures::qlm_chi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_chi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_chi)); \
static int cctki_vi_qlm_coordspinx = -100; \
if (cctki_vi_qlm_coordspinx == -100) cctki_vi_qlm_coordspinx = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspinx[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_coordspinx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_coordspinx)); \
static int cctki_vi_qlm_coordspiny = -100; \
if (cctki_vi_qlm_coordspiny == -100) cctki_vi_qlm_coordspiny = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspiny[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_coordspiny, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_coordspiny)); \
static int cctki_vi_qlm_coordspinz = -100; \
if (cctki_vi_qlm_coordspinz == -100) cctki_vi_qlm_coordspinz = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspinz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_coordspinz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_coordspinz)); \
static int cctki_vi_qlm_cvspin = -100; \
if (cctki_vi_qlm_cvspin == -100) cctki_vi_qlm_cvspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_cvspin[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_cvspin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_cvspin)); \
static int cctki_vi_qlm_delta_phi = -100; \
if (cctki_vi_qlm_delta_phi == -100) cctki_vi_qlm_delta_phi = CCTK_VarIndex("QuasiLocalMeasures::qlm_delta_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_delta_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_delta_phi)); \
static int cctki_vi_qlm_delta_theta = -100; \
if (cctki_vi_qlm_delta_theta == -100) cctki_vi_qlm_delta_theta = CCTK_VarIndex("QuasiLocalMeasures::qlm_delta_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_delta_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_delta_theta)); \
static int cctki_vi_qlm_equatorial_circumference = -100; \
if (cctki_vi_qlm_equatorial_circumference == -100) cctki_vi_qlm_equatorial_circumference = CCTK_VarIndex("QuasiLocalMeasures::qlm_equatorial_circumference[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_equatorial_circumference, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_equatorial_circumference)); \
static int cctki_vi_qlm_have_killing_vector = -100; \
if (cctki_vi_qlm_have_killing_vector == -100) cctki_vi_qlm_have_killing_vector = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_killing_vector, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_killing_vector)); \
static int cctki_vi_qlm_have_killing_vector_p = -100; \
if (cctki_vi_qlm_have_killing_vector_p == -100) cctki_vi_qlm_have_killing_vector_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_killing_vector_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_killing_vector_p)); \
static int cctki_vi_qlm_have_killing_vector_p_p = -100; \
if (cctki_vi_qlm_have_killing_vector_p_p == -100) cctki_vi_qlm_have_killing_vector_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_killing_vector_p_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_killing_vector_p_p)); \
static int cctki_vi_qlm_have_valid_data = -100; \
if (cctki_vi_qlm_have_valid_data == -100) cctki_vi_qlm_have_valid_data = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_valid_data, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_valid_data)); \
static int cctki_vi_qlm_have_valid_data_p = -100; \
if (cctki_vi_qlm_have_valid_data_p == -100) cctki_vi_qlm_have_valid_data_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_valid_data_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_valid_data_p)); \
static int cctki_vi_qlm_have_valid_data_p_p = -100; \
if (cctki_vi_qlm_have_valid_data_p_p == -100) cctki_vi_qlm_have_valid_data_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_have_valid_data_p_p, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_have_valid_data_p_p)); \
static int cctki_vi_qlm_i = -100; \
if (cctki_vi_qlm_i == -100) cctki_vi_qlm_i = CCTK_VarIndex("QuasiLocalMeasures::qlm_i[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_i, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_i)); \
static int cctki_vi_qlm_inv_z = -100; \
if (cctki_vi_qlm_inv_z == -100) cctki_vi_qlm_inv_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_inv_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_inv_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_inv_z)); \
static int cctki_vi_qlm_irreducible_mass = -100; \
if (cctki_vi_qlm_irreducible_mass == -100) cctki_vi_qlm_irreducible_mass = CCTK_VarIndex("QuasiLocalMeasures::qlm_irreducible_mass[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_irreducible_mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_irreducible_mass)); \
static int cctki_vi_qlm_iteration = -100; \
if (cctki_vi_qlm_iteration == -100) cctki_vi_qlm_iteration = CCTK_VarIndex("QuasiLocalMeasures::qlm_iteration[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_iteration, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_iteration)); \
static int cctki_vi_qlm_j = -100; \
if (cctki_vi_qlm_j == -100) cctki_vi_qlm_j = CCTK_VarIndex("QuasiLocalMeasures::qlm_j[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_j, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_j)); \
static int cctki_vi_qlm_killing_eigenvalue_im = -100; \
if (cctki_vi_qlm_killing_eigenvalue_im == -100) cctki_vi_qlm_killing_eigenvalue_im = CCTK_VarIndex("QuasiLocalMeasures::qlm_killing_eigenvalue_im[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_killing_eigenvalue_im, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_killing_eigenvalue_im)); \
static int cctki_vi_qlm_killing_eigenvalue_re = -100; \
if (cctki_vi_qlm_killing_eigenvalue_re == -100) cctki_vi_qlm_killing_eigenvalue_re = CCTK_VarIndex("QuasiLocalMeasures::qlm_killing_eigenvalue_re[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_killing_eigenvalue_re, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_killing_eigenvalue_re)); \
static int cctki_vi_qlm_l0 = -100; \
if (cctki_vi_qlm_l0 == -100) cctki_vi_qlm_l0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_l0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_l0)); \
static int cctki_vi_qlm_l1 = -100; \
if (cctki_vi_qlm_l1 == -100) cctki_vi_qlm_l1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l1[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_l1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_l1)); \
static int cctki_vi_qlm_l2 = -100; \
if (cctki_vi_qlm_l2 == -100) cctki_vi_qlm_l2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_l2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_l2)); \
static int cctki_vi_qlm_l3 = -100; \
if (cctki_vi_qlm_l3 == -100) cctki_vi_qlm_l3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l3[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_l3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_l3)); \
static int cctki_vi_qlm_lambda = -100; \
if (cctki_vi_qlm_lambda == -100) cctki_vi_qlm_lambda = CCTK_VarIndex("QuasiLocalMeasures::qlm_lambda[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_lambda, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_lambda)); \
static int cctki_vi_qlm_lie_n_theta_l = -100; \
if (cctki_vi_qlm_lie_n_theta_l == -100) cctki_vi_qlm_lie_n_theta_l = CCTK_VarIndex("QuasiLocalMeasures::qlm_lie_n_theta_l[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_lie_n_theta_l, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_lie_n_theta_l)); \
static int cctki_vi_qlm_lqpp = -100; \
if (cctki_vi_qlm_lqpp == -100) cctki_vi_qlm_lqpp = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqpp[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_lqpp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_lqpp)); \
static int cctki_vi_qlm_lqtp = -100; \
if (cctki_vi_qlm_lqtp == -100) cctki_vi_qlm_lqtp = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqtp[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_lqtp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_lqtp)); \
static int cctki_vi_qlm_lqtt = -100; \
if (cctki_vi_qlm_lqtt == -100) cctki_vi_qlm_lqtt = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqtt[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_lqtt, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_lqtt)); \
static int cctki_vi_qlm_m0 = -100; \
if (cctki_vi_qlm_m0 == -100) cctki_vi_qlm_m0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m0[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_m0, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_m0)); \
static int cctki_vi_qlm_m1 = -100; \
if (cctki_vi_qlm_m1 == -100) cctki_vi_qlm_m1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m1[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_m1, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_m1)); \
static int cctki_vi_qlm_m2 = -100; \
if (cctki_vi_qlm_m2 == -100) cctki_vi_qlm_m2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m2[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_m2, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_m2)); \
static int cctki_vi_qlm_m3 = -100; \
if (cctki_vi_qlm_m3 == -100) cctki_vi_qlm_m3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m3[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_m3, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_m3)); \
static int cctki_vi_qlm_mass = -100; \
if (cctki_vi_qlm_mass == -100) cctki_vi_qlm_mass = CCTK_VarIndex("QuasiLocalMeasures::qlm_mass[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mass, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mass)); \
static int cctki_vi_qlm_mass_guess = -100; \
if (cctki_vi_qlm_mass_guess == -100) cctki_vi_qlm_mass_guess = CCTK_VarIndex("QuasiLocalMeasures::qlm_mass_guess[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mass_guess, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mass_guess)); \
static int cctki_vi_qlm_mp_j0 = -100; \
if (cctki_vi_qlm_mp_j0 == -100) cctki_vi_qlm_mp_j0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j0)); \
static int cctki_vi_qlm_mp_j1 = -100; \
if (cctki_vi_qlm_mp_j1 == -100) cctki_vi_qlm_mp_j1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j1[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j1)); \
static int cctki_vi_qlm_mp_j2 = -100; \
if (cctki_vi_qlm_mp_j2 == -100) cctki_vi_qlm_mp_j2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j2)); \
static int cctki_vi_qlm_mp_j3 = -100; \
if (cctki_vi_qlm_mp_j3 == -100) cctki_vi_qlm_mp_j3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j3[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j3)); \
static int cctki_vi_qlm_mp_j4 = -100; \
if (cctki_vi_qlm_mp_j4 == -100) cctki_vi_qlm_mp_j4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j4[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j4, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j4)); \
static int cctki_vi_qlm_mp_j5 = -100; \
if (cctki_vi_qlm_mp_j5 == -100) cctki_vi_qlm_mp_j5 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j5[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j5, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j5)); \
static int cctki_vi_qlm_mp_j6 = -100; \
if (cctki_vi_qlm_mp_j6 == -100) cctki_vi_qlm_mp_j6 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j6[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j6, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j6)); \
static int cctki_vi_qlm_mp_j7 = -100; \
if (cctki_vi_qlm_mp_j7 == -100) cctki_vi_qlm_mp_j7 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j7[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j7, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j7)); \
static int cctki_vi_qlm_mp_j8 = -100; \
if (cctki_vi_qlm_mp_j8 == -100) cctki_vi_qlm_mp_j8 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j8[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_j8, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_j8)); \
static int cctki_vi_qlm_mp_m0 = -100; \
if (cctki_vi_qlm_mp_m0 == -100) cctki_vi_qlm_mp_m0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m0)); \
static int cctki_vi_qlm_mp_m1 = -100; \
if (cctki_vi_qlm_mp_m1 == -100) cctki_vi_qlm_mp_m1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m1[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m1)); \
static int cctki_vi_qlm_mp_m2 = -100; \
if (cctki_vi_qlm_mp_m2 == -100) cctki_vi_qlm_mp_m2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m2)); \
static int cctki_vi_qlm_mp_m3 = -100; \
if (cctki_vi_qlm_mp_m3 == -100) cctki_vi_qlm_mp_m3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m3[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m3)); \
static int cctki_vi_qlm_mp_m4 = -100; \
if (cctki_vi_qlm_mp_m4 == -100) cctki_vi_qlm_mp_m4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m4[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m4, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m4)); \
static int cctki_vi_qlm_mp_m5 = -100; \
if (cctki_vi_qlm_mp_m5 == -100) cctki_vi_qlm_mp_m5 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m5[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m5, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m5)); \
static int cctki_vi_qlm_mp_m6 = -100; \
if (cctki_vi_qlm_mp_m6 == -100) cctki_vi_qlm_mp_m6 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m6[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m6, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m6)); \
static int cctki_vi_qlm_mp_m7 = -100; \
if (cctki_vi_qlm_mp_m7 == -100) cctki_vi_qlm_mp_m7 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m7[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m7, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m7)); \
static int cctki_vi_qlm_mp_m8 = -100; \
if (cctki_vi_qlm_mp_m8 == -100) cctki_vi_qlm_mp_m8 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m8[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_mp_m8, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_mp_m8)); \
static int cctki_vi_qlm_n0 = -100; \
if (cctki_vi_qlm_n0 == -100) cctki_vi_qlm_n0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_n0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_n0)); \
static int cctki_vi_qlm_n1 = -100; \
if (cctki_vi_qlm_n1 == -100) cctki_vi_qlm_n1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n1[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_n1, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_n1)); \
static int cctki_vi_qlm_n2 = -100; \
if (cctki_vi_qlm_n2 == -100) cctki_vi_qlm_n2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_n2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_n2)); \
static int cctki_vi_qlm_n3 = -100; \
if (cctki_vi_qlm_n3 == -100) cctki_vi_qlm_n3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n3[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_n3, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_n3)); \
static int cctki_vi_qlm_nghostsphi = -100; \
if (cctki_vi_qlm_nghostsphi == -100) cctki_vi_qlm_nghostsphi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nghostsphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_nghostsphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nghostsphi)); \
static int cctki_vi_qlm_nghoststheta = -100; \
if (cctki_vi_qlm_nghoststheta == -100) cctki_vi_qlm_nghoststheta = CCTK_VarIndex("QuasiLocalMeasures::qlm_nghoststheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_nghoststheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nghoststheta)); \
static int cctki_vi_qlm_npalpha = -100; \
if (cctki_vi_qlm_npalpha == -100) cctki_vi_qlm_npalpha = CCTK_VarIndex("QuasiLocalMeasures::qlm_npalpha[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npalpha, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npalpha)); \
static int cctki_vi_qlm_npbeta = -100; \
if (cctki_vi_qlm_npbeta == -100) cctki_vi_qlm_npbeta = CCTK_VarIndex("QuasiLocalMeasures::qlm_npbeta[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npbeta, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npbeta)); \
static int cctki_vi_qlm_npepsilon = -100; \
if (cctki_vi_qlm_npepsilon == -100) cctki_vi_qlm_npepsilon = CCTK_VarIndex("QuasiLocalMeasures::qlm_npepsilon[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npepsilon, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npepsilon)); \
static int cctki_vi_qlm_npgamma = -100; \
if (cctki_vi_qlm_npgamma == -100) cctki_vi_qlm_npgamma = CCTK_VarIndex("QuasiLocalMeasures::qlm_npgamma[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npgamma, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npgamma)); \
static int cctki_vi_qlm_nphi = -100; \
if (cctki_vi_qlm_nphi == -100) cctki_vi_qlm_nphi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_nphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nphi)); \
static int cctki_vi_qlm_npkappa = -100; \
if (cctki_vi_qlm_npkappa == -100) cctki_vi_qlm_npkappa = CCTK_VarIndex("QuasiLocalMeasures::qlm_npkappa[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npkappa, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npkappa)); \
static int cctki_vi_qlm_nplambda = -100; \
if (cctki_vi_qlm_nplambda == -100) cctki_vi_qlm_nplambda = CCTK_VarIndex("QuasiLocalMeasures::qlm_nplambda[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_nplambda, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nplambda)); \
static int cctki_vi_qlm_npmu = -100; \
if (cctki_vi_qlm_npmu == -100) cctki_vi_qlm_npmu = CCTK_VarIndex("QuasiLocalMeasures::qlm_npmu[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npmu, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npmu)); \
static int cctki_vi_qlm_npnu = -100; \
if (cctki_vi_qlm_npnu == -100) cctki_vi_qlm_npnu = CCTK_VarIndex("QuasiLocalMeasures::qlm_npnu[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npnu, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npnu)); \
static int cctki_vi_qlm_nppi = -100; \
if (cctki_vi_qlm_nppi == -100) cctki_vi_qlm_nppi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nppi[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_nppi, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nppi)); \
static int cctki_vi_qlm_nprho = -100; \
if (cctki_vi_qlm_nprho == -100) cctki_vi_qlm_nprho = CCTK_VarIndex("QuasiLocalMeasures::qlm_nprho[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_nprho, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nprho)); \
static int cctki_vi_qlm_npsigma = -100; \
if (cctki_vi_qlm_npsigma == -100) cctki_vi_qlm_npsigma = CCTK_VarIndex("QuasiLocalMeasures::qlm_npsigma[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_npsigma, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npsigma)); \
static int cctki_vi_qlm_npspin = -100; \
if (cctki_vi_qlm_npspin == -100) cctki_vi_qlm_npspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_npspin[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_npspin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_npspin)); \
static int cctki_vi_qlm_nptau = -100; \
if (cctki_vi_qlm_nptau == -100) cctki_vi_qlm_nptau = CCTK_VarIndex("QuasiLocalMeasures::qlm_nptau[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_nptau, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_nptau)); \
static int cctki_vi_qlm_ntheta = -100; \
if (cctki_vi_qlm_ntheta == -100) cctki_vi_qlm_ntheta = CCTK_VarIndex("QuasiLocalMeasures::qlm_ntheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_ntheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_ntheta)); \
static int cctki_vi_qlm_origin_phi = -100; \
if (cctki_vi_qlm_origin_phi == -100) cctki_vi_qlm_origin_phi = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_phi)); \
static int cctki_vi_qlm_origin_theta = -100; \
if (cctki_vi_qlm_origin_theta == -100) cctki_vi_qlm_origin_theta = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_theta)); \
static int cctki_vi_qlm_origin_x = -100; \
if (cctki_vi_qlm_origin_x == -100) cctki_vi_qlm_origin_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_x)); \
static int cctki_vi_qlm_origin_x_p = -100; \
if (cctki_vi_qlm_origin_x_p == -100) cctki_vi_qlm_origin_x_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_x_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_x_p)); \
static int cctki_vi_qlm_origin_x_p_p = -100; \
if (cctki_vi_qlm_origin_x_p_p == -100) cctki_vi_qlm_origin_x_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_x_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_x_p_p)); \
static int cctki_vi_qlm_origin_y = -100; \
if (cctki_vi_qlm_origin_y == -100) cctki_vi_qlm_origin_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_y)); \
static int cctki_vi_qlm_origin_y_p = -100; \
if (cctki_vi_qlm_origin_y_p == -100) cctki_vi_qlm_origin_y_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_y_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_y_p)); \
static int cctki_vi_qlm_origin_y_p_p = -100; \
if (cctki_vi_qlm_origin_y_p_p == -100) cctki_vi_qlm_origin_y_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_y_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_y_p_p)); \
static int cctki_vi_qlm_origin_z = -100; \
if (cctki_vi_qlm_origin_z == -100) cctki_vi_qlm_origin_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_z)); \
static int cctki_vi_qlm_origin_z_p = -100; \
if (cctki_vi_qlm_origin_z_p == -100) cctki_vi_qlm_origin_z_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_z_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_z_p)); \
static int cctki_vi_qlm_origin_z_p_p = -100; \
if (cctki_vi_qlm_origin_z_p_p == -100) cctki_vi_qlm_origin_z_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_origin_z_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_origin_z_p_p)); \
static int cctki_vi_qlm_phi00 = -100; \
if (cctki_vi_qlm_phi00 == -100) cctki_vi_qlm_phi00 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi00[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi00, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi00)); \
static int cctki_vi_qlm_phi01 = -100; \
if (cctki_vi_qlm_phi01 == -100) cctki_vi_qlm_phi01 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi01[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi01, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi01)); \
static int cctki_vi_qlm_phi02 = -100; \
if (cctki_vi_qlm_phi02 == -100) cctki_vi_qlm_phi02 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi02[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi02, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi02)); \
static int cctki_vi_qlm_phi10 = -100; \
if (cctki_vi_qlm_phi10 == -100) cctki_vi_qlm_phi10 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi10[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi10, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi10)); \
static int cctki_vi_qlm_phi11 = -100; \
if (cctki_vi_qlm_phi11 == -100) cctki_vi_qlm_phi11 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi11[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi11, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi11)); \
static int cctki_vi_qlm_phi12 = -100; \
if (cctki_vi_qlm_phi12 == -100) cctki_vi_qlm_phi12 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi12[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi12, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi12)); \
static int cctki_vi_qlm_phi20 = -100; \
if (cctki_vi_qlm_phi20 == -100) cctki_vi_qlm_phi20 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi20[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi20, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi20)); \
static int cctki_vi_qlm_phi21 = -100; \
if (cctki_vi_qlm_phi21 == -100) cctki_vi_qlm_phi21 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi21[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi21, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi21)); \
static int cctki_vi_qlm_phi22 = -100; \
if (cctki_vi_qlm_phi22 == -100) cctki_vi_qlm_phi22 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi22[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_phi22, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_phi22)); \
static int cctki_vi_qlm_polar_circumference_0 = -100; \
if (cctki_vi_qlm_polar_circumference_0 == -100) cctki_vi_qlm_polar_circumference_0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_polar_circumference_0[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_polar_circumference_0, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_polar_circumference_0)); \
static int cctki_vi_qlm_polar_circumference_pi_2 = -100; \
if (cctki_vi_qlm_polar_circumference_pi_2 == -100) cctki_vi_qlm_polar_circumference_pi_2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_polar_circumference_pi_2[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_polar_circumference_pi_2, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_polar_circumference_pi_2)); \
static int cctki_vi_qlm_psi0 = -100; \
if (cctki_vi_qlm_psi0 == -100) cctki_vi_qlm_psi0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi0[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_psi0, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_psi0)); \
static int cctki_vi_qlm_psi1 = -100; \
if (cctki_vi_qlm_psi1 == -100) cctki_vi_qlm_psi1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi1[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_psi1, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_psi1)); \
static int cctki_vi_qlm_psi2 = -100; \
if (cctki_vi_qlm_psi2 == -100) cctki_vi_qlm_psi2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi2[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_psi2, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_psi2)); \
static int cctki_vi_qlm_psi3 = -100; \
if (cctki_vi_qlm_psi3 == -100) cctki_vi_qlm_psi3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi3[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_psi3, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_psi3)); \
static int cctki_vi_qlm_psi4 = -100; \
if (cctki_vi_qlm_psi4 == -100) cctki_vi_qlm_psi4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi4[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_psi4, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_psi4)); \
static int cctki_vi_qlm_qpp = -100; \
if (cctki_vi_qlm_qpp == -100) cctki_vi_qlm_qpp = CCTK_VarIndex("QuasiLocalMeasures::qlm_qpp[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_qpp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_qpp)); \
static int cctki_vi_qlm_qtp = -100; \
if (cctki_vi_qlm_qtp == -100) cctki_vi_qlm_qtp = CCTK_VarIndex("QuasiLocalMeasures::qlm_qtp[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_qtp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_qtp)); \
static int cctki_vi_qlm_qtt = -100; \
if (cctki_vi_qlm_qtt == -100) cctki_vi_qlm_qtt = CCTK_VarIndex("QuasiLocalMeasures::qlm_qtt[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_qtt, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_qtt)); \
static int cctki_vi_qlm_radius = -100; \
if (cctki_vi_qlm_radius == -100) cctki_vi_qlm_radius = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_radius)); \
static int cctki_vi_qlm_radius_p = -100; \
if (cctki_vi_qlm_radius_p == -100) cctki_vi_qlm_radius_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_radius_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_radius_p)); \
static int cctki_vi_qlm_radius_p_p = -100; \
if (cctki_vi_qlm_radius_p_p == -100) cctki_vi_qlm_radius_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_radius_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_radius_p_p)); \
static int cctki_vi_qlm_rsc = -100; \
if (cctki_vi_qlm_rsc == -100) cctki_vi_qlm_rsc = CCTK_VarIndex("QuasiLocalMeasures::qlm_rsc[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_rsc, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_rsc)); \
static int cctki_vi_qlm_s = -100; \
if (cctki_vi_qlm_s == -100) cctki_vi_qlm_s = CCTK_VarIndex("QuasiLocalMeasures::qlm_s[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_s, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_s)); \
static int cctki_vi_qlm_sdiff = -100; \
if (cctki_vi_qlm_sdiff == -100) cctki_vi_qlm_sdiff = CCTK_VarIndex("QuasiLocalMeasures::qlm_sdiff[0]"); \
CCTK_DECLARE_INIT (CCTK_COMPLEX * restrict const, qlm_sdiff, (CCTK_COMPLEX *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_sdiff)); \
static int cctki_vi_qlm_shape = -100; \
if (cctki_vi_qlm_shape == -100) cctki_vi_qlm_shape = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_shape, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_shape)); \
static int cctki_vi_qlm_shape_p = -100; \
if (cctki_vi_qlm_shape_p == -100) cctki_vi_qlm_shape_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_shape_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_shape_p)); \
static int cctki_vi_qlm_shape_p_p = -100; \
if (cctki_vi_qlm_shape_p_p == -100) cctki_vi_qlm_shape_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_shape_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_shape_p_p)); \
static int cctki_vi_qlm_spin = -100; \
if (cctki_vi_qlm_spin == -100) cctki_vi_qlm_spin = CCTK_VarIndex("QuasiLocalMeasures::qlm_spin[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_spin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_spin)); \
static int cctki_vi_qlm_spin_guess = -100; \
if (cctki_vi_qlm_spin_guess == -100) cctki_vi_qlm_spin_guess = CCTK_VarIndex("QuasiLocalMeasures::qlm_spin_guess[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_spin_guess, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_spin_guess)); \
static int cctki_vi_qlm_time = -100; \
if (cctki_vi_qlm_time == -100) cctki_vi_qlm_time = CCTK_VarIndex("QuasiLocalMeasures::qlm_time[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_time, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_time)); \
static int cctki_vi_qlm_time_p = -100; \
if (cctki_vi_qlm_time_p == -100) cctki_vi_qlm_time_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_time_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_time_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_time_p)); \
static int cctki_vi_qlm_time_p_p = -100; \
if (cctki_vi_qlm_time_p_p == -100) cctki_vi_qlm_time_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_time_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_time_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_time_p_p)); \
static int cctki_vi_qlm_timederiv_order = -100; \
if (cctki_vi_qlm_timederiv_order == -100) cctki_vi_qlm_timederiv_order = CCTK_VarIndex("QuasiLocalMeasures::qlm_timederiv_order[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, qlm_timederiv_order, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_timederiv_order)); \
static int cctki_vi_qlm_w_angular_momentum_x = -100; \
if (cctki_vi_qlm_w_angular_momentum_x == -100) cctki_vi_qlm_w_angular_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_angular_momentum_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_angular_momentum_x)); \
static int cctki_vi_qlm_w_angular_momentum_y = -100; \
if (cctki_vi_qlm_w_angular_momentum_y == -100) cctki_vi_qlm_w_angular_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_angular_momentum_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_angular_momentum_y)); \
static int cctki_vi_qlm_w_angular_momentum_z = -100; \
if (cctki_vi_qlm_w_angular_momentum_z == -100) cctki_vi_qlm_w_angular_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_angular_momentum_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_angular_momentum_z)); \
static int cctki_vi_qlm_w_energy = -100; \
if (cctki_vi_qlm_w_energy == -100) cctki_vi_qlm_w_energy = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_energy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_energy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_energy)); \
static int cctki_vi_qlm_w_momentum_x = -100; \
if (cctki_vi_qlm_w_momentum_x == -100) cctki_vi_qlm_w_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_momentum_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_momentum_x)); \
static int cctki_vi_qlm_w_momentum_y = -100; \
if (cctki_vi_qlm_w_momentum_y == -100) cctki_vi_qlm_w_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_momentum_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_momentum_y)); \
static int cctki_vi_qlm_w_momentum_z = -100; \
if (cctki_vi_qlm_w_momentum_z == -100) cctki_vi_qlm_w_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_w_momentum_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_w_momentum_z)); \
static int cctki_vi_qlm_wsspin = -100; \
if (cctki_vi_qlm_wsspin == -100) cctki_vi_qlm_wsspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_wsspin[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_wsspin, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_wsspin)); \
static int cctki_vi_qlm_x = -100; \
if (cctki_vi_qlm_x == -100) cctki_vi_qlm_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_x)); \
static int cctki_vi_qlm_x_p = -100; \
if (cctki_vi_qlm_x_p == -100) cctki_vi_qlm_x_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_x_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_x_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_x_p)); \
static int cctki_vi_qlm_x_p_p = -100; \
if (cctki_vi_qlm_x_p_p == -100) cctki_vi_qlm_x_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_x_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_x_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_x_p_p)); \
static int cctki_vi_qlm_xi_p = -100; \
if (cctki_vi_qlm_xi_p == -100) cctki_vi_qlm_xi_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_xi_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_xi_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_xi_p)); \
static int cctki_vi_qlm_xi_t = -100; \
if (cctki_vi_qlm_xi_t == -100) cctki_vi_qlm_xi_t = CCTK_VarIndex("QuasiLocalMeasures::qlm_xi_t[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_xi_t, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_xi_t)); \
static int cctki_vi_qlm_y = -100; \
if (cctki_vi_qlm_y == -100) cctki_vi_qlm_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_y)); \
static int cctki_vi_qlm_y_p = -100; \
if (cctki_vi_qlm_y_p == -100) cctki_vi_qlm_y_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_y_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_y_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_y_p)); \
static int cctki_vi_qlm_y_p_p = -100; \
if (cctki_vi_qlm_y_p_p == -100) cctki_vi_qlm_y_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_y_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_y_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_y_p_p)); \
static int cctki_vi_qlm_z = -100; \
if (cctki_vi_qlm_z == -100) cctki_vi_qlm_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_z)); \
static int cctki_vi_qlm_z_p = -100; \
if (cctki_vi_qlm_z_p == -100) cctki_vi_qlm_z_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_z_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_z_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_z_p)); \
static int cctki_vi_qlm_z_p_p = -100; \
if (cctki_vi_qlm_z_p_p == -100) cctki_vi_qlm_z_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_z_p_p[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, qlm_z_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_qlm_z_p_p));

#define DECLARE_QUASILOCALMEASURES_PRIVATE_C2F \
static int CCTKARGNUM_qlm_3det = -1; \
static int CCTKGROUPNUM_qlm_3determinant = -1; \
static int CCTKARGNUM_qlm_adm_angular_momentum_x = -1; \
static int CCTKGROUPNUM_qlm_scalars = -1; \
static int CCTKARGNUM_qlm_adm_angular_momentum_y = -1; \
static int CCTKARGNUM_qlm_adm_angular_momentum_z = -1; \
static int CCTKARGNUM_qlm_adm_energy = -1; \
static int CCTKARGNUM_qlm_adm_momentum_x = -1; \
static int CCTKARGNUM_qlm_adm_momentum_y = -1; \
static int CCTKARGNUM_qlm_adm_momentum_z = -1; \
static int CCTKARGNUM_qlm_area = -1; \
static int CCTKARGNUM_qlm_calc_error = -1; \
static int CCTKGROUPNUM_qlm_state = -1; \
static int CCTKARGNUM_qlm_chi = -1; \
static int CCTKGROUPNUM_qlm_killing_vector = -1; \
static int CCTKARGNUM_qlm_coordspinx = -1; \
static int CCTKARGNUM_qlm_coordspiny = -1; \
static int CCTKARGNUM_qlm_coordspinz = -1; \
static int CCTKARGNUM_qlm_cvspin = -1; \
static int CCTKARGNUM_qlm_delta_phi = -1; \
static int CCTKGROUPNUM_qlm_grid_real = -1; \
static int CCTKARGNUM_qlm_delta_theta = -1; \
static int CCTKARGNUM_qlm_equatorial_circumference = -1; \
static int CCTKARGNUM_qlm_have_killing_vector = -1; \
static int CCTKARGNUM_qlm_have_killing_vector_p = -1; \
static int CCTKGROUPNUM_qlm_state_p = -1; \
static int CCTKARGNUM_qlm_have_killing_vector_p_p = -1; \
static int CCTKARGNUM_qlm_have_valid_data = -1; \
static int CCTKARGNUM_qlm_have_valid_data_p = -1; \
static int CCTKARGNUM_qlm_have_valid_data_p_p = -1; \
static int CCTKARGNUM_qlm_i = -1; \
static int CCTKGROUPNUM_qlm_weyl_scalars = -1; \
static int CCTKARGNUM_qlm_inv_z = -1; \
static int CCTKGROUPNUM_qlm_invariant_coordinates = -1; \
static int CCTKARGNUM_qlm_irreducible_mass = -1; \
static int CCTKARGNUM_qlm_iteration = -1; \
static int CCTKARGNUM_qlm_j = -1; \
static int CCTKARGNUM_qlm_killing_eigenvalue_im = -1; \
static int CCTKARGNUM_qlm_killing_eigenvalue_re = -1; \
static int CCTKARGNUM_qlm_l0 = -1; \
static int CCTKGROUPNUM_qlm_tetrad_l = -1; \
static int CCTKARGNUM_qlm_l1 = -1; \
static int CCTKARGNUM_qlm_l2 = -1; \
static int CCTKARGNUM_qlm_l3 = -1; \
static int CCTKARGNUM_qlm_lambda = -1; \
static int CCTKGROUPNUM_qlm_ricci_scalars = -1; \
static int CCTKARGNUM_qlm_lie_n_theta_l = -1; \
static int CCTKARGNUM_qlm_lqpp = -1; \
static int CCTKGROUPNUM_qlm_killed_twometric = -1; \
static int CCTKARGNUM_qlm_lqtp = -1; \
static int CCTKARGNUM_qlm_lqtt = -1; \
static int CCTKARGNUM_qlm_m0 = -1; \
static int CCTKGROUPNUM_qlm_tetrad_m = -1; \
static int CCTKARGNUM_qlm_m1 = -1; \
static int CCTKARGNUM_qlm_m2 = -1; \
static int CCTKARGNUM_qlm_m3 = -1; \
static int CCTKARGNUM_qlm_mass = -1; \
static int CCTKARGNUM_qlm_mass_guess = -1; \
static int CCTKARGNUM_qlm_mp_j0 = -1; \
static int CCTKGROUPNUM_qlm_multipole_moments = -1; \
static int CCTKARGNUM_qlm_mp_j1 = -1; \
static int CCTKARGNUM_qlm_mp_j2 = -1; \
static int CCTKARGNUM_qlm_mp_j3 = -1; \
static int CCTKARGNUM_qlm_mp_j4 = -1; \
static int CCTKARGNUM_qlm_mp_j5 = -1; \
static int CCTKARGNUM_qlm_mp_j6 = -1; \
static int CCTKARGNUM_qlm_mp_j7 = -1; \
static int CCTKARGNUM_qlm_mp_j8 = -1; \
static int CCTKARGNUM_qlm_mp_m0 = -1; \
static int CCTKARGNUM_qlm_mp_m1 = -1; \
static int CCTKARGNUM_qlm_mp_m2 = -1; \
static int CCTKARGNUM_qlm_mp_m3 = -1; \
static int CCTKARGNUM_qlm_mp_m4 = -1; \
static int CCTKARGNUM_qlm_mp_m5 = -1; \
static int CCTKARGNUM_qlm_mp_m6 = -1; \
static int CCTKARGNUM_qlm_mp_m7 = -1; \
static int CCTKARGNUM_qlm_mp_m8 = -1; \
static int CCTKARGNUM_qlm_n0 = -1; \
static int CCTKGROUPNUM_qlm_tetrad_n = -1; \
static int CCTKARGNUM_qlm_n1 = -1; \
static int CCTKARGNUM_qlm_n2 = -1; \
static int CCTKARGNUM_qlm_n3 = -1; \
static int CCTKARGNUM_qlm_nghostsphi = -1; \
static int CCTKGROUPNUM_qlm_grid_int = -1; \
static int CCTKARGNUM_qlm_nghoststheta = -1; \
static int CCTKARGNUM_qlm_npalpha = -1; \
static int CCTKGROUPNUM_qlm_newman_penrose = -1; \
static int CCTKARGNUM_qlm_npbeta = -1; \
static int CCTKARGNUM_qlm_npepsilon = -1; \
static int CCTKARGNUM_qlm_npgamma = -1; \
static int CCTKARGNUM_qlm_nphi = -1; \
static int CCTKARGNUM_qlm_npkappa = -1; \
static int CCTKARGNUM_qlm_nplambda = -1; \
static int CCTKARGNUM_qlm_npmu = -1; \
static int CCTKARGNUM_qlm_npnu = -1; \
static int CCTKARGNUM_qlm_nppi = -1; \
static int CCTKARGNUM_qlm_nprho = -1; \
static int CCTKARGNUM_qlm_npsigma = -1; \
static int CCTKARGNUM_qlm_npspin = -1; \
static int CCTKARGNUM_qlm_nptau = -1; \
static int CCTKARGNUM_qlm_ntheta = -1; \
static int CCTKARGNUM_qlm_origin_phi = -1; \
static int CCTKARGNUM_qlm_origin_theta = -1; \
static int CCTKARGNUM_qlm_origin_x = -1; \
static int CCTKARGNUM_qlm_origin_x_p = -1; \
static int CCTKGROUPNUM_qlm_grid_real_p = -1; \
static int CCTKARGNUM_qlm_origin_x_p_p = -1; \
static int CCTKARGNUM_qlm_origin_y = -1; \
static int CCTKARGNUM_qlm_origin_y_p = -1; \
static int CCTKARGNUM_qlm_origin_y_p_p = -1; \
static int CCTKARGNUM_qlm_origin_z = -1; \
static int CCTKARGNUM_qlm_origin_z_p = -1; \
static int CCTKARGNUM_qlm_origin_z_p_p = -1; \
static int CCTKARGNUM_qlm_phi00 = -1; \
static int CCTKARGNUM_qlm_phi01 = -1; \
static int CCTKARGNUM_qlm_phi02 = -1; \
static int CCTKARGNUM_qlm_phi10 = -1; \
static int CCTKARGNUM_qlm_phi11 = -1; \
static int CCTKARGNUM_qlm_phi12 = -1; \
static int CCTKARGNUM_qlm_phi20 = -1; \
static int CCTKARGNUM_qlm_phi21 = -1; \
static int CCTKARGNUM_qlm_phi22 = -1; \
static int CCTKARGNUM_qlm_polar_circumference_0 = -1; \
static int CCTKARGNUM_qlm_polar_circumference_pi_2 = -1; \
static int CCTKARGNUM_qlm_psi0 = -1; \
static int CCTKARGNUM_qlm_psi1 = -1; \
static int CCTKARGNUM_qlm_psi2 = -1; \
static int CCTKARGNUM_qlm_psi3 = -1; \
static int CCTKARGNUM_qlm_psi4 = -1; \
static int CCTKARGNUM_qlm_qpp = -1; \
static int CCTKGROUPNUM_qlm_twometric = -1; \
static int CCTKARGNUM_qlm_qtp = -1; \
static int CCTKARGNUM_qlm_qtt = -1; \
static int CCTKARGNUM_qlm_radius = -1; \
static int CCTKARGNUM_qlm_radius_p = -1; \
static int CCTKGROUPNUM_qlm_scalars_p = -1; \
static int CCTKARGNUM_qlm_radius_p_p = -1; \
static int CCTKARGNUM_qlm_rsc = -1; \
static int CCTKARGNUM_qlm_s = -1; \
static int CCTKARGNUM_qlm_sdiff = -1; \
static int CCTKARGNUM_qlm_shape = -1; \
static int CCTKGROUPNUM_qlm_shapes = -1; \
static int CCTKARGNUM_qlm_shape_p = -1; \
static int CCTKGROUPNUM_qlm_shapes_p = -1; \
static int CCTKARGNUM_qlm_shape_p_p = -1; \
static int CCTKARGNUM_qlm_spin = -1; \
static int CCTKARGNUM_qlm_spin_guess = -1; \
static int CCTKARGNUM_qlm_time = -1; \
static int CCTKARGNUM_qlm_time_p = -1; \
static int CCTKARGNUM_qlm_time_p_p = -1; \
static int CCTKARGNUM_qlm_timederiv_order = -1; \
static int CCTKARGNUM_qlm_w_angular_momentum_x = -1; \
static int CCTKARGNUM_qlm_w_angular_momentum_y = -1; \
static int CCTKARGNUM_qlm_w_angular_momentum_z = -1; \
static int CCTKARGNUM_qlm_w_energy = -1; \
static int CCTKARGNUM_qlm_w_momentum_x = -1; \
static int CCTKARGNUM_qlm_w_momentum_y = -1; \
static int CCTKARGNUM_qlm_w_momentum_z = -1; \
static int CCTKARGNUM_qlm_wsspin = -1; \
static int CCTKARGNUM_qlm_x = -1; \
static int CCTKGROUPNUM_qlm_coordinates = -1; \
static int CCTKARGNUM_qlm_x_p = -1; \
static int CCTKGROUPNUM_qlm_coordinates_p = -1; \
static int CCTKARGNUM_qlm_x_p_p = -1; \
static int CCTKARGNUM_qlm_xi_p = -1; \
static int CCTKARGNUM_qlm_xi_t = -1; \
static int CCTKARGNUM_qlm_y = -1; \
static int CCTKARGNUM_qlm_y_p = -1; \
static int CCTKARGNUM_qlm_y_p_p = -1; \
static int CCTKARGNUM_qlm_z = -1; \
static int CCTKARGNUM_qlm_z_p = -1; \
static int CCTKARGNUM_qlm_z_p_p = -1;

#define INITIALISE_QUASILOCALMEASURES_PRIVATE_C2F \
if(CCTKARGNUM_qlm_3det == -1) CCTKARGNUM_qlm_3det = CCTK_VarIndex("QuasiLocalMeasures::qlm_3det[0]"); \
if(CCTKGROUPNUM_qlm_3determinant == -1) CCTKGROUPNUM_qlm_3determinant = CCTK_GroupIndex("QuasiLocalMeasures::qlm_3determinant"); \
if(CCTKARGNUM_qlm_adm_angular_momentum_x == -1) CCTKARGNUM_qlm_adm_angular_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_x[0]"); \
if(CCTKGROUPNUM_qlm_scalars == -1) CCTKGROUPNUM_qlm_scalars = CCTK_GroupIndex("QuasiLocalMeasures::qlm_scalars"); \
if(CCTKARGNUM_qlm_adm_angular_momentum_y == -1) CCTKARGNUM_qlm_adm_angular_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_y[0]"); \
if(CCTKARGNUM_qlm_adm_angular_momentum_z == -1) CCTKARGNUM_qlm_adm_angular_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_angular_momentum_z[0]"); \
if(CCTKARGNUM_qlm_adm_energy == -1) CCTKARGNUM_qlm_adm_energy = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_energy[0]"); \
if(CCTKARGNUM_qlm_adm_momentum_x == -1) CCTKARGNUM_qlm_adm_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_x[0]"); \
if(CCTKARGNUM_qlm_adm_momentum_y == -1) CCTKARGNUM_qlm_adm_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_y[0]"); \
if(CCTKARGNUM_qlm_adm_momentum_z == -1) CCTKARGNUM_qlm_adm_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_adm_momentum_z[0]"); \
if(CCTKARGNUM_qlm_area == -1) CCTKARGNUM_qlm_area = CCTK_VarIndex("QuasiLocalMeasures::qlm_area[0]"); \
if(CCTKARGNUM_qlm_calc_error == -1) CCTKARGNUM_qlm_calc_error = CCTK_VarIndex("QuasiLocalMeasures::qlm_calc_error[0]"); \
if(CCTKGROUPNUM_qlm_state == -1) CCTKGROUPNUM_qlm_state = CCTK_GroupIndex("QuasiLocalMeasures::qlm_state"); \
if(CCTKARGNUM_qlm_chi == -1) CCTKARGNUM_qlm_chi = CCTK_VarIndex("QuasiLocalMeasures::qlm_chi[0]"); \
if(CCTKGROUPNUM_qlm_killing_vector == -1) CCTKGROUPNUM_qlm_killing_vector = CCTK_GroupIndex("QuasiLocalMeasures::qlm_killing_vector"); \
if(CCTKARGNUM_qlm_coordspinx == -1) CCTKARGNUM_qlm_coordspinx = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspinx[0]"); \
if(CCTKARGNUM_qlm_coordspiny == -1) CCTKARGNUM_qlm_coordspiny = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspiny[0]"); \
if(CCTKARGNUM_qlm_coordspinz == -1) CCTKARGNUM_qlm_coordspinz = CCTK_VarIndex("QuasiLocalMeasures::qlm_coordspinz[0]"); \
if(CCTKARGNUM_qlm_cvspin == -1) CCTKARGNUM_qlm_cvspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_cvspin[0]"); \
if(CCTKARGNUM_qlm_delta_phi == -1) CCTKARGNUM_qlm_delta_phi = CCTK_VarIndex("QuasiLocalMeasures::qlm_delta_phi[0]"); \
if(CCTKGROUPNUM_qlm_grid_real == -1) CCTKGROUPNUM_qlm_grid_real = CCTK_GroupIndex("QuasiLocalMeasures::qlm_grid_real"); \
if(CCTKARGNUM_qlm_delta_theta == -1) CCTKARGNUM_qlm_delta_theta = CCTK_VarIndex("QuasiLocalMeasures::qlm_delta_theta[0]"); \
if(CCTKARGNUM_qlm_equatorial_circumference == -1) CCTKARGNUM_qlm_equatorial_circumference = CCTK_VarIndex("QuasiLocalMeasures::qlm_equatorial_circumference[0]"); \
if(CCTKARGNUM_qlm_have_killing_vector == -1) CCTKARGNUM_qlm_have_killing_vector = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector[0]"); \
if(CCTKARGNUM_qlm_have_killing_vector_p == -1) CCTKARGNUM_qlm_have_killing_vector_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector_p[0]"); \
if(CCTKGROUPNUM_qlm_state_p == -1) CCTKGROUPNUM_qlm_state_p = CCTK_GroupIndex("QuasiLocalMeasures::qlm_state_p"); \
if(CCTKARGNUM_qlm_have_killing_vector_p_p == -1) CCTKARGNUM_qlm_have_killing_vector_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_killing_vector_p_p[0]"); \
if(CCTKARGNUM_qlm_have_valid_data == -1) CCTKARGNUM_qlm_have_valid_data = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data[0]"); \
if(CCTKARGNUM_qlm_have_valid_data_p == -1) CCTKARGNUM_qlm_have_valid_data_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data_p[0]"); \
if(CCTKARGNUM_qlm_have_valid_data_p_p == -1) CCTKARGNUM_qlm_have_valid_data_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_have_valid_data_p_p[0]"); \
if(CCTKARGNUM_qlm_i == -1) CCTKARGNUM_qlm_i = CCTK_VarIndex("QuasiLocalMeasures::qlm_i[0]"); \
if(CCTKGROUPNUM_qlm_weyl_scalars == -1) CCTKGROUPNUM_qlm_weyl_scalars = CCTK_GroupIndex("QuasiLocalMeasures::qlm_weyl_scalars"); \
if(CCTKARGNUM_qlm_inv_z == -1) CCTKARGNUM_qlm_inv_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_inv_z[0]"); \
if(CCTKGROUPNUM_qlm_invariant_coordinates == -1) CCTKGROUPNUM_qlm_invariant_coordinates = CCTK_GroupIndex("QuasiLocalMeasures::qlm_invariant_coordinates"); \
if(CCTKARGNUM_qlm_irreducible_mass == -1) CCTKARGNUM_qlm_irreducible_mass = CCTK_VarIndex("QuasiLocalMeasures::qlm_irreducible_mass[0]"); \
if(CCTKARGNUM_qlm_iteration == -1) CCTKARGNUM_qlm_iteration = CCTK_VarIndex("QuasiLocalMeasures::qlm_iteration[0]"); \
if(CCTKARGNUM_qlm_j == -1) CCTKARGNUM_qlm_j = CCTK_VarIndex("QuasiLocalMeasures::qlm_j[0]"); \
if(CCTKARGNUM_qlm_killing_eigenvalue_im == -1) CCTKARGNUM_qlm_killing_eigenvalue_im = CCTK_VarIndex("QuasiLocalMeasures::qlm_killing_eigenvalue_im[0]"); \
if(CCTKARGNUM_qlm_killing_eigenvalue_re == -1) CCTKARGNUM_qlm_killing_eigenvalue_re = CCTK_VarIndex("QuasiLocalMeasures::qlm_killing_eigenvalue_re[0]"); \
if(CCTKARGNUM_qlm_l0 == -1) CCTKARGNUM_qlm_l0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l0[0]"); \
if(CCTKGROUPNUM_qlm_tetrad_l == -1) CCTKGROUPNUM_qlm_tetrad_l = CCTK_GroupIndex("QuasiLocalMeasures::qlm_tetrad_l"); \
if(CCTKARGNUM_qlm_l1 == -1) CCTKARGNUM_qlm_l1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l1[0]"); \
if(CCTKARGNUM_qlm_l2 == -1) CCTKARGNUM_qlm_l2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l2[0]"); \
if(CCTKARGNUM_qlm_l3 == -1) CCTKARGNUM_qlm_l3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_l3[0]"); \
if(CCTKARGNUM_qlm_lambda == -1) CCTKARGNUM_qlm_lambda = CCTK_VarIndex("QuasiLocalMeasures::qlm_lambda[0]"); \
if(CCTKGROUPNUM_qlm_ricci_scalars == -1) CCTKGROUPNUM_qlm_ricci_scalars = CCTK_GroupIndex("QuasiLocalMeasures::qlm_ricci_scalars"); \
if(CCTKARGNUM_qlm_lie_n_theta_l == -1) CCTKARGNUM_qlm_lie_n_theta_l = CCTK_VarIndex("QuasiLocalMeasures::qlm_lie_n_theta_l[0]"); \
if(CCTKARGNUM_qlm_lqpp == -1) CCTKARGNUM_qlm_lqpp = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqpp[0]"); \
if(CCTKGROUPNUM_qlm_killed_twometric == -1) CCTKGROUPNUM_qlm_killed_twometric = CCTK_GroupIndex("QuasiLocalMeasures::qlm_killed_twometric"); \
if(CCTKARGNUM_qlm_lqtp == -1) CCTKARGNUM_qlm_lqtp = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqtp[0]"); \
if(CCTKARGNUM_qlm_lqtt == -1) CCTKARGNUM_qlm_lqtt = CCTK_VarIndex("QuasiLocalMeasures::qlm_lqtt[0]"); \
if(CCTKARGNUM_qlm_m0 == -1) CCTKARGNUM_qlm_m0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m0[0]"); \
if(CCTKGROUPNUM_qlm_tetrad_m == -1) CCTKGROUPNUM_qlm_tetrad_m = CCTK_GroupIndex("QuasiLocalMeasures::qlm_tetrad_m"); \
if(CCTKARGNUM_qlm_m1 == -1) CCTKARGNUM_qlm_m1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m1[0]"); \
if(CCTKARGNUM_qlm_m2 == -1) CCTKARGNUM_qlm_m2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m2[0]"); \
if(CCTKARGNUM_qlm_m3 == -1) CCTKARGNUM_qlm_m3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_m3[0]"); \
if(CCTKARGNUM_qlm_mass == -1) CCTKARGNUM_qlm_mass = CCTK_VarIndex("QuasiLocalMeasures::qlm_mass[0]"); \
if(CCTKARGNUM_qlm_mass_guess == -1) CCTKARGNUM_qlm_mass_guess = CCTK_VarIndex("QuasiLocalMeasures::qlm_mass_guess[0]"); \
if(CCTKARGNUM_qlm_mp_j0 == -1) CCTKARGNUM_qlm_mp_j0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j0[0]"); \
if(CCTKGROUPNUM_qlm_multipole_moments == -1) CCTKGROUPNUM_qlm_multipole_moments = CCTK_GroupIndex("QuasiLocalMeasures::qlm_multipole_moments"); \
if(CCTKARGNUM_qlm_mp_j1 == -1) CCTKARGNUM_qlm_mp_j1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j1[0]"); \
if(CCTKARGNUM_qlm_mp_j2 == -1) CCTKARGNUM_qlm_mp_j2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j2[0]"); \
if(CCTKARGNUM_qlm_mp_j3 == -1) CCTKARGNUM_qlm_mp_j3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j3[0]"); \
if(CCTKARGNUM_qlm_mp_j4 == -1) CCTKARGNUM_qlm_mp_j4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j4[0]"); \
if(CCTKARGNUM_qlm_mp_j5 == -1) CCTKARGNUM_qlm_mp_j5 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j5[0]"); \
if(CCTKARGNUM_qlm_mp_j6 == -1) CCTKARGNUM_qlm_mp_j6 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j6[0]"); \
if(CCTKARGNUM_qlm_mp_j7 == -1) CCTKARGNUM_qlm_mp_j7 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j7[0]"); \
if(CCTKARGNUM_qlm_mp_j8 == -1) CCTKARGNUM_qlm_mp_j8 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_j8[0]"); \
if(CCTKARGNUM_qlm_mp_m0 == -1) CCTKARGNUM_qlm_mp_m0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m0[0]"); \
if(CCTKARGNUM_qlm_mp_m1 == -1) CCTKARGNUM_qlm_mp_m1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m1[0]"); \
if(CCTKARGNUM_qlm_mp_m2 == -1) CCTKARGNUM_qlm_mp_m2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m2[0]"); \
if(CCTKARGNUM_qlm_mp_m3 == -1) CCTKARGNUM_qlm_mp_m3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m3[0]"); \
if(CCTKARGNUM_qlm_mp_m4 == -1) CCTKARGNUM_qlm_mp_m4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m4[0]"); \
if(CCTKARGNUM_qlm_mp_m5 == -1) CCTKARGNUM_qlm_mp_m5 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m5[0]"); \
if(CCTKARGNUM_qlm_mp_m6 == -1) CCTKARGNUM_qlm_mp_m6 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m6[0]"); \
if(CCTKARGNUM_qlm_mp_m7 == -1) CCTKARGNUM_qlm_mp_m7 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m7[0]"); \
if(CCTKARGNUM_qlm_mp_m8 == -1) CCTKARGNUM_qlm_mp_m8 = CCTK_VarIndex("QuasiLocalMeasures::qlm_mp_m8[0]"); \
if(CCTKARGNUM_qlm_n0 == -1) CCTKARGNUM_qlm_n0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n0[0]"); \
if(CCTKGROUPNUM_qlm_tetrad_n == -1) CCTKGROUPNUM_qlm_tetrad_n = CCTK_GroupIndex("QuasiLocalMeasures::qlm_tetrad_n"); \
if(CCTKARGNUM_qlm_n1 == -1) CCTKARGNUM_qlm_n1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n1[0]"); \
if(CCTKARGNUM_qlm_n2 == -1) CCTKARGNUM_qlm_n2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n2[0]"); \
if(CCTKARGNUM_qlm_n3 == -1) CCTKARGNUM_qlm_n3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_n3[0]"); \
if(CCTKARGNUM_qlm_nghostsphi == -1) CCTKARGNUM_qlm_nghostsphi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nghostsphi[0]"); \
if(CCTKGROUPNUM_qlm_grid_int == -1) CCTKGROUPNUM_qlm_grid_int = CCTK_GroupIndex("QuasiLocalMeasures::qlm_grid_int"); \
if(CCTKARGNUM_qlm_nghoststheta == -1) CCTKARGNUM_qlm_nghoststheta = CCTK_VarIndex("QuasiLocalMeasures::qlm_nghoststheta[0]"); \
if(CCTKARGNUM_qlm_npalpha == -1) CCTKARGNUM_qlm_npalpha = CCTK_VarIndex("QuasiLocalMeasures::qlm_npalpha[0]"); \
if(CCTKGROUPNUM_qlm_newman_penrose == -1) CCTKGROUPNUM_qlm_newman_penrose = CCTK_GroupIndex("QuasiLocalMeasures::qlm_newman_penrose"); \
if(CCTKARGNUM_qlm_npbeta == -1) CCTKARGNUM_qlm_npbeta = CCTK_VarIndex("QuasiLocalMeasures::qlm_npbeta[0]"); \
if(CCTKARGNUM_qlm_npepsilon == -1) CCTKARGNUM_qlm_npepsilon = CCTK_VarIndex("QuasiLocalMeasures::qlm_npepsilon[0]"); \
if(CCTKARGNUM_qlm_npgamma == -1) CCTKARGNUM_qlm_npgamma = CCTK_VarIndex("QuasiLocalMeasures::qlm_npgamma[0]"); \
if(CCTKARGNUM_qlm_nphi == -1) CCTKARGNUM_qlm_nphi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nphi[0]"); \
if(CCTKARGNUM_qlm_npkappa == -1) CCTKARGNUM_qlm_npkappa = CCTK_VarIndex("QuasiLocalMeasures::qlm_npkappa[0]"); \
if(CCTKARGNUM_qlm_nplambda == -1) CCTKARGNUM_qlm_nplambda = CCTK_VarIndex("QuasiLocalMeasures::qlm_nplambda[0]"); \
if(CCTKARGNUM_qlm_npmu == -1) CCTKARGNUM_qlm_npmu = CCTK_VarIndex("QuasiLocalMeasures::qlm_npmu[0]"); \
if(CCTKARGNUM_qlm_npnu == -1) CCTKARGNUM_qlm_npnu = CCTK_VarIndex("QuasiLocalMeasures::qlm_npnu[0]"); \
if(CCTKARGNUM_qlm_nppi == -1) CCTKARGNUM_qlm_nppi = CCTK_VarIndex("QuasiLocalMeasures::qlm_nppi[0]"); \
if(CCTKARGNUM_qlm_nprho == -1) CCTKARGNUM_qlm_nprho = CCTK_VarIndex("QuasiLocalMeasures::qlm_nprho[0]"); \
if(CCTKARGNUM_qlm_npsigma == -1) CCTKARGNUM_qlm_npsigma = CCTK_VarIndex("QuasiLocalMeasures::qlm_npsigma[0]"); \
if(CCTKARGNUM_qlm_npspin == -1) CCTKARGNUM_qlm_npspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_npspin[0]"); \
if(CCTKARGNUM_qlm_nptau == -1) CCTKARGNUM_qlm_nptau = CCTK_VarIndex("QuasiLocalMeasures::qlm_nptau[0]"); \
if(CCTKARGNUM_qlm_ntheta == -1) CCTKARGNUM_qlm_ntheta = CCTK_VarIndex("QuasiLocalMeasures::qlm_ntheta[0]"); \
if(CCTKARGNUM_qlm_origin_phi == -1) CCTKARGNUM_qlm_origin_phi = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_phi[0]"); \
if(CCTKARGNUM_qlm_origin_theta == -1) CCTKARGNUM_qlm_origin_theta = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_theta[0]"); \
if(CCTKARGNUM_qlm_origin_x == -1) CCTKARGNUM_qlm_origin_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x[0]"); \
if(CCTKARGNUM_qlm_origin_x_p == -1) CCTKARGNUM_qlm_origin_x_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x_p[0]"); \
if(CCTKGROUPNUM_qlm_grid_real_p == -1) CCTKGROUPNUM_qlm_grid_real_p = CCTK_GroupIndex("QuasiLocalMeasures::qlm_grid_real_p"); \
if(CCTKARGNUM_qlm_origin_x_p_p == -1) CCTKARGNUM_qlm_origin_x_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_x_p_p[0]"); \
if(CCTKARGNUM_qlm_origin_y == -1) CCTKARGNUM_qlm_origin_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y[0]"); \
if(CCTKARGNUM_qlm_origin_y_p == -1) CCTKARGNUM_qlm_origin_y_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y_p[0]"); \
if(CCTKARGNUM_qlm_origin_y_p_p == -1) CCTKARGNUM_qlm_origin_y_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_y_p_p[0]"); \
if(CCTKARGNUM_qlm_origin_z == -1) CCTKARGNUM_qlm_origin_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z[0]"); \
if(CCTKARGNUM_qlm_origin_z_p == -1) CCTKARGNUM_qlm_origin_z_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z_p[0]"); \
if(CCTKARGNUM_qlm_origin_z_p_p == -1) CCTKARGNUM_qlm_origin_z_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_origin_z_p_p[0]"); \
if(CCTKARGNUM_qlm_phi00 == -1) CCTKARGNUM_qlm_phi00 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi00[0]"); \
if(CCTKARGNUM_qlm_phi01 == -1) CCTKARGNUM_qlm_phi01 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi01[0]"); \
if(CCTKARGNUM_qlm_phi02 == -1) CCTKARGNUM_qlm_phi02 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi02[0]"); \
if(CCTKARGNUM_qlm_phi10 == -1) CCTKARGNUM_qlm_phi10 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi10[0]"); \
if(CCTKARGNUM_qlm_phi11 == -1) CCTKARGNUM_qlm_phi11 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi11[0]"); \
if(CCTKARGNUM_qlm_phi12 == -1) CCTKARGNUM_qlm_phi12 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi12[0]"); \
if(CCTKARGNUM_qlm_phi20 == -1) CCTKARGNUM_qlm_phi20 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi20[0]"); \
if(CCTKARGNUM_qlm_phi21 == -1) CCTKARGNUM_qlm_phi21 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi21[0]"); \
if(CCTKARGNUM_qlm_phi22 == -1) CCTKARGNUM_qlm_phi22 = CCTK_VarIndex("QuasiLocalMeasures::qlm_phi22[0]"); \
if(CCTKARGNUM_qlm_polar_circumference_0 == -1) CCTKARGNUM_qlm_polar_circumference_0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_polar_circumference_0[0]"); \
if(CCTKARGNUM_qlm_polar_circumference_pi_2 == -1) CCTKARGNUM_qlm_polar_circumference_pi_2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_polar_circumference_pi_2[0]"); \
if(CCTKARGNUM_qlm_psi0 == -1) CCTKARGNUM_qlm_psi0 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi0[0]"); \
if(CCTKARGNUM_qlm_psi1 == -1) CCTKARGNUM_qlm_psi1 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi1[0]"); \
if(CCTKARGNUM_qlm_psi2 == -1) CCTKARGNUM_qlm_psi2 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi2[0]"); \
if(CCTKARGNUM_qlm_psi3 == -1) CCTKARGNUM_qlm_psi3 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi3[0]"); \
if(CCTKARGNUM_qlm_psi4 == -1) CCTKARGNUM_qlm_psi4 = CCTK_VarIndex("QuasiLocalMeasures::qlm_psi4[0]"); \
if(CCTKARGNUM_qlm_qpp == -1) CCTKARGNUM_qlm_qpp = CCTK_VarIndex("QuasiLocalMeasures::qlm_qpp[0]"); \
if(CCTKGROUPNUM_qlm_twometric == -1) CCTKGROUPNUM_qlm_twometric = CCTK_GroupIndex("QuasiLocalMeasures::qlm_twometric"); \
if(CCTKARGNUM_qlm_qtp == -1) CCTKARGNUM_qlm_qtp = CCTK_VarIndex("QuasiLocalMeasures::qlm_qtp[0]"); \
if(CCTKARGNUM_qlm_qtt == -1) CCTKARGNUM_qlm_qtt = CCTK_VarIndex("QuasiLocalMeasures::qlm_qtt[0]"); \
if(CCTKARGNUM_qlm_radius == -1) CCTKARGNUM_qlm_radius = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius[0]"); \
if(CCTKARGNUM_qlm_radius_p == -1) CCTKARGNUM_qlm_radius_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius_p[0]"); \
if(CCTKGROUPNUM_qlm_scalars_p == -1) CCTKGROUPNUM_qlm_scalars_p = CCTK_GroupIndex("QuasiLocalMeasures::qlm_scalars_p"); \
if(CCTKARGNUM_qlm_radius_p_p == -1) CCTKARGNUM_qlm_radius_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_radius_p_p[0]"); \
if(CCTKARGNUM_qlm_rsc == -1) CCTKARGNUM_qlm_rsc = CCTK_VarIndex("QuasiLocalMeasures::qlm_rsc[0]"); \
if(CCTKARGNUM_qlm_s == -1) CCTKARGNUM_qlm_s = CCTK_VarIndex("QuasiLocalMeasures::qlm_s[0]"); \
if(CCTKARGNUM_qlm_sdiff == -1) CCTKARGNUM_qlm_sdiff = CCTK_VarIndex("QuasiLocalMeasures::qlm_sdiff[0]"); \
if(CCTKARGNUM_qlm_shape == -1) CCTKARGNUM_qlm_shape = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape[0]"); \
if(CCTKGROUPNUM_qlm_shapes == -1) CCTKGROUPNUM_qlm_shapes = CCTK_GroupIndex("QuasiLocalMeasures::qlm_shapes"); \
if(CCTKARGNUM_qlm_shape_p == -1) CCTKARGNUM_qlm_shape_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape_p[0]"); \
if(CCTKGROUPNUM_qlm_shapes_p == -1) CCTKGROUPNUM_qlm_shapes_p = CCTK_GroupIndex("QuasiLocalMeasures::qlm_shapes_p"); \
if(CCTKARGNUM_qlm_shape_p_p == -1) CCTKARGNUM_qlm_shape_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_shape_p_p[0]"); \
if(CCTKARGNUM_qlm_spin == -1) CCTKARGNUM_qlm_spin = CCTK_VarIndex("QuasiLocalMeasures::qlm_spin[0]"); \
if(CCTKARGNUM_qlm_spin_guess == -1) CCTKARGNUM_qlm_spin_guess = CCTK_VarIndex("QuasiLocalMeasures::qlm_spin_guess[0]"); \
if(CCTKARGNUM_qlm_time == -1) CCTKARGNUM_qlm_time = CCTK_VarIndex("QuasiLocalMeasures::qlm_time[0]"); \
if(CCTKARGNUM_qlm_time_p == -1) CCTKARGNUM_qlm_time_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_time_p[0]"); \
if(CCTKARGNUM_qlm_time_p_p == -1) CCTKARGNUM_qlm_time_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_time_p_p[0]"); \
if(CCTKARGNUM_qlm_timederiv_order == -1) CCTKARGNUM_qlm_timederiv_order = CCTK_VarIndex("QuasiLocalMeasures::qlm_timederiv_order[0]"); \
if(CCTKARGNUM_qlm_w_angular_momentum_x == -1) CCTKARGNUM_qlm_w_angular_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_x[0]"); \
if(CCTKARGNUM_qlm_w_angular_momentum_y == -1) CCTKARGNUM_qlm_w_angular_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_y[0]"); \
if(CCTKARGNUM_qlm_w_angular_momentum_z == -1) CCTKARGNUM_qlm_w_angular_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_angular_momentum_z[0]"); \
if(CCTKARGNUM_qlm_w_energy == -1) CCTKARGNUM_qlm_w_energy = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_energy[0]"); \
if(CCTKARGNUM_qlm_w_momentum_x == -1) CCTKARGNUM_qlm_w_momentum_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_x[0]"); \
if(CCTKARGNUM_qlm_w_momentum_y == -1) CCTKARGNUM_qlm_w_momentum_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_y[0]"); \
if(CCTKARGNUM_qlm_w_momentum_z == -1) CCTKARGNUM_qlm_w_momentum_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_w_momentum_z[0]"); \
if(CCTKARGNUM_qlm_wsspin == -1) CCTKARGNUM_qlm_wsspin = CCTK_VarIndex("QuasiLocalMeasures::qlm_wsspin[0]"); \
if(CCTKARGNUM_qlm_x == -1) CCTKARGNUM_qlm_x = CCTK_VarIndex("QuasiLocalMeasures::qlm_x[0]"); \
if(CCTKGROUPNUM_qlm_coordinates == -1) CCTKGROUPNUM_qlm_coordinates = CCTK_GroupIndex("QuasiLocalMeasures::qlm_coordinates"); \
if(CCTKARGNUM_qlm_x_p == -1) CCTKARGNUM_qlm_x_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_x_p[0]"); \
if(CCTKGROUPNUM_qlm_coordinates_p == -1) CCTKGROUPNUM_qlm_coordinates_p = CCTK_GroupIndex("QuasiLocalMeasures::qlm_coordinates_p"); \
if(CCTKARGNUM_qlm_x_p_p == -1) CCTKARGNUM_qlm_x_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_x_p_p[0]"); \
if(CCTKARGNUM_qlm_xi_p == -1) CCTKARGNUM_qlm_xi_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_xi_p[0]"); \
if(CCTKARGNUM_qlm_xi_t == -1) CCTKARGNUM_qlm_xi_t = CCTK_VarIndex("QuasiLocalMeasures::qlm_xi_t[0]"); \
if(CCTKARGNUM_qlm_y == -1) CCTKARGNUM_qlm_y = CCTK_VarIndex("QuasiLocalMeasures::qlm_y[0]"); \
if(CCTKARGNUM_qlm_y_p == -1) CCTKARGNUM_qlm_y_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_y_p[0]"); \
if(CCTKARGNUM_qlm_y_p_p == -1) CCTKARGNUM_qlm_y_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_y_p_p[0]"); \
if(CCTKARGNUM_qlm_z == -1) CCTKARGNUM_qlm_z = CCTK_VarIndex("QuasiLocalMeasures::qlm_z[0]"); \
if(CCTKARGNUM_qlm_z_p == -1) CCTKARGNUM_qlm_z_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_z_p[0]"); \
if(CCTKARGNUM_qlm_z_p_p == -1) CCTKARGNUM_qlm_z_p_p = CCTK_VarIndex("QuasiLocalMeasures::qlm_z_p_p[0]");

#define QUASILOCALMEASURES_PRIVATE_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_INT *,CCTK_INT *,CCTK_INT *,CCTK_INT *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_INT *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_INT *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_COMPLEX *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_COMPLEX *,CCTK_COMPLEX *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_INT *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *,CCTK_REAL *

#define PASS_QUASILOCALMEASURES_PRIVATE_C2F(GH) \
PASS_GROUPSIZE(qlm_3determinant, 0),\
PASS_GROUPSIZE(qlm_coordinates, 0),\
PASS_GROUPSIZE(qlm_coordinates_p, 0),\
PASS_GROUPSIZE(qlm_invariant_coordinates, 0),\
PASS_GROUPSIZE(qlm_killed_twometric, 0),\
PASS_GROUPSIZE(qlm_killing_vector, 0),\
PASS_GROUPSIZE(qlm_newman_penrose, 0),\
PASS_GROUPSIZE(qlm_ricci_scalars, 0),\
PASS_GROUPSIZE(qlm_shapes, 0),\
PASS_GROUPSIZE(qlm_shapes_p, 0),\
PASS_GROUPSIZE(qlm_tetrad_l, 0),\
PASS_GROUPSIZE(qlm_tetrad_m, 0),\
PASS_GROUPSIZE(qlm_tetrad_n, 0),\
PASS_GROUPSIZE(qlm_twometric, 0),\
PASS_GROUPSIZE(qlm_weyl_scalars, 0),\
PASS_GROUPSIZE(qlm_3determinant, 1),\
PASS_GROUPSIZE(qlm_coordinates, 1),\
PASS_GROUPSIZE(qlm_coordinates_p, 1),\
PASS_GROUPSIZE(qlm_invariant_coordinates, 1),\
PASS_GROUPSIZE(qlm_killed_twometric, 1),\
PASS_GROUPSIZE(qlm_killing_vector, 1),\
PASS_GROUPSIZE(qlm_newman_penrose, 1),\
PASS_GROUPSIZE(qlm_ricci_scalars, 1),\
PASS_GROUPSIZE(qlm_shapes, 1),\
PASS_GROUPSIZE(qlm_shapes_p, 1),\
PASS_GROUPSIZE(qlm_tetrad_l, 1),\
PASS_GROUPSIZE(qlm_tetrad_m, 1),\
PASS_GROUPSIZE(qlm_tetrad_n, 1),\
PASS_GROUPSIZE(qlm_twometric, 1),\
PASS_GROUPSIZE(qlm_weyl_scalars, 1),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_3determinant),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_coordinates),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_coordinates_p),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_grid_int),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_grid_real),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_grid_real_p),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_invariant_coordinates),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_killed_twometric),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_killing_vector),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_multipole_moments),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_newman_penrose),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_ricci_scalars),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_scalars),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_scalars_p),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_shapes),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_shapes_p),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_state),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_state_p),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_tetrad_l),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_tetrad_m),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_tetrad_n),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_twometric),\
PASS_GROUPLEN(QuasiLocalMeasures, qlm_weyl_scalars),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_3det, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_angular_momentum_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_angular_momentum_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_angular_momentum_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_energy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_momentum_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_momentum_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_adm_momentum_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_area, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_calc_error, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_chi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_coordspinx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_coordspiny, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_coordspinz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_cvspin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_delta_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_delta_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_equatorial_circumference, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_killing_vector, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_killing_vector_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_killing_vector_p_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_valid_data, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_valid_data_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_have_valid_data_p_p, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_i, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_inv_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_irreducible_mass, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_iteration, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_j, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_killing_eigenvalue_im, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_killing_eigenvalue_re, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_l0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_l1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_l2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_l3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_lambda, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_lie_n_theta_l, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_lqpp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_lqtp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_lqtt, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_m0, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_m1, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_m2, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_m3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mass, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mass_guess, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j4, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j5, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j6, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j7, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_j8, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m3, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m4, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m5, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m6, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m7, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_mp_m8, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_n0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_n1, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_n2, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_n3, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_nghostsphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_nghoststheta, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npalpha, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npbeta, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npepsilon, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npgamma, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_nphi, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npkappa, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_nplambda, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npmu, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npnu, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_nppi, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_nprho, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_npsigma, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_npspin, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_nptau, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_ntheta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_x_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_x_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_y_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_y_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_z_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_origin_z_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi00, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi01, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi02, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi10, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi11, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi12, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi20, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi21, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_phi22, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_polar_circumference_0, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_polar_circumference_pi_2, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_psi0, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_psi1, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_psi2, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_psi3, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_psi4, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_qpp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_qtp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_qtt, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_radius_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_radius_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_rsc, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_s, 0)),\
(CCTK_COMPLEX *)(PASS_REFERENCE(qlm_sdiff, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_shape, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_shape_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_shape_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_spin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_spin_guess, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_time, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_time_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_time_p_p, 0)),\
(CCTK_INT *)(PASS_REFERENCE(qlm_timederiv_order, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_angular_momentum_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_angular_momentum_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_angular_momentum_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_energy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_momentum_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_momentum_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_w_momentum_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_wsspin, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_x_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_x_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_xi_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_xi_t, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_y_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_y_p_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_z_p, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(qlm_z_p_p, 0))

#endif /* CCODE */

#ifdef FCODE
#define DECLARE_QUASILOCALMEASURES_PROTECTED_FARGUMENTS \


#define QUASILOCALMEASURES_PROTECTED_FARGUMENTS \


#endif /* FCODE */

#ifdef CCODE
#define DECLARE_QUASILOCALMEASURES_PROTECTED_CARGUMENTS \


#define DECLARE_QUASILOCALMEASURES_PROTECTED_C2F \


#define INITIALISE_QUASILOCALMEASURES_PROTECTED_C2F \


#define QUASILOCALMEASURES_PROTECTED_C2F_PROTO \


#define PASS_QUASILOCALMEASURES_PROTECTED_C2F(GH) \


#endif /* CCODE */

#ifdef FCODE
#define DECLARE_QUASILOCALMEASURES_PUBLIC_FARGUMENTS \
INTEGER X0sf_radius&&\
INTEGER X1sf_radius&&\
INTEGER sf_active_length&&\
INTEGER sf_coordinate_descriptors_length&&\
INTEGER sf_info_length&&\
INTEGER sf_maxreflevel_length&&\
INTEGER sf_minreflevel_length&&\
INTEGER sf_origin_length&&\
INTEGER sf_radius_length&&\
INTEGER sf_shape_descriptors_length&&\
INTEGER sf_valid_length&&\
CCTK_DECLARE(CCTK_REAL,alp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,alp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,betaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,coarse_dx,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dy,)&&\
CCTK_DECLARE(CCTK_REAL,coarse_dz,)&&\
CCTK_DECLARE(CCTK_INT,conformal_state,)&&\
CCTK_DECLARE(CCTK_REAL,dtalp,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtalp_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetax_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetay_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,dtbetaz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,dtlapse_state,)&&\
CCTK_DECLARE(CCTK_INT,dtshift_state,)&&\
CCTK_DECLARE(CCTK_REAL,eTtt,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtt_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtt_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTty,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTty_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTty_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTtz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,eTzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,gzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxx_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kxz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyy_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kyz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,kzz_p_p,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psi,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psix,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixx,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psixz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyy,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiyz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psiz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,psizz,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,r,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_INT,sf_active,(sf_active_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_area,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_centroid_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_delta_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_max_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_maxreflevel,(sf_maxreflevel_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_mean_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_radius,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_x,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_y,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_min_z,(sf_info_length))&&\
CCTK_DECLARE(CCTK_INT,sf_minreflevel,(sf_minreflevel_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghostsphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nghoststheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_nphi,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_INT,sf_ntheta,(sf_shape_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_phi,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_theta,(sf_coordinate_descriptors_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_x,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_y,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_origin_z,(sf_origin_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xx,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_xz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yy,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_yz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_quadrupole_zz,(sf_info_length))&&\
CCTK_DECLARE(CCTK_REAL,sf_radius,(X0sf_radius,X1sf_radius,sf_radius_length))&&\
CCTK_DECLARE(CCTK_INT,sf_valid,(sf_valid_length))&&\
CCTK_DECLARE(CCTK_INT,shift_state,)&&\
CCTK_DECLARE(CCTK_INT,stress_energy_state,)&&\
CCTK_DECLARE(CCTK_REAL,x,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,y,(cctk_ash1,cctk_ash2,cctk_ash3))&&\
CCTK_DECLARE(CCTK_REAL,z,(cctk_ash1,cctk_ash2,cctk_ash3))&&\


#define QUASILOCALMEASURES_PUBLIC_FARGUMENTS \
X0sf_radius,X1sf_radius,sf_active_length,sf_coordinate_descriptors_length,sf_info_length,sf_maxreflevel_length,sf_minreflevel_length,sf_origin_length,sf_radius_length,sf_shape_descriptors_length,sf_valid_length,alp,alp_p,alp_p_p,betax,betax_p,betax_p_p,betay,betay_p,betay_p_p,betaz,betaz_p,betaz_p_p,coarse_dx,coarse_dy,coarse_dz,conformal_state,dtalp,dtalp_p,dtalp_p_p,dtbetax,dtbetax_p,dtbetax_p_p,dtbetay,dtbetay_p,dtbetay_p_p,dtbetaz,dtbetaz_p,dtbetaz_p_p,dtlapse_state,dtshift_state,eTtt,eTtt_p,eTtt_p_p,eTtx,eTtx_p,eTtx_p_p,eTty,eTty_p,eTty_p_p,eTtz,eTtz_p,eTtz_p_p,eTxx,eTxx_p,eTxx_p_p,eTxy,eTxy_p,eTxy_p_p,eTxz,eTxz_p,eTxz_p_p,eTyy,eTyy_p,eTyy_p_p,eTyz,eTyz_p,eTyz_p_p,eTzz,eTzz_p,eTzz_p_p,gxx,gxx_p,gxx_p_p,gxy,gxy_p,gxy_p_p,gxz,gxz_p,gxz_p_p,gyy,gyy_p,gyy_p_p,gyz,gyz_p,gyz_p_p,gzz,gzz_p,gzz_p_p,kxx,kxx_p,kxx_p_p,kxy,kxy_p,kxy_p_p,kxz,kxz_p,kxz_p_p,kyy,kyy_p,kyy_p_p,kyz,kyz_p,kyz_p_p,kzz,kzz_p,kzz_p_p,psi,psix,psixx,psixy,psixz,psiy,psiyy,psiyz,psiz,psizz,r,sf_active,sf_area,sf_centroid_x,sf_centroid_y,sf_centroid_z,sf_delta_phi,sf_delta_theta,sf_max_radius,sf_max_x,sf_max_y,sf_max_z,sf_maxreflevel,sf_mean_radius,sf_min_radius,sf_min_x,sf_min_y,sf_min_z,sf_minreflevel,sf_nghostsphi,sf_nghoststheta,sf_nphi,sf_ntheta,sf_origin_phi,sf_origin_theta,sf_origin_x,sf_origin_y,sf_origin_z,sf_quadrupole_xx,sf_quadrupole_xy,sf_quadrupole_xz,sf_quadrupole_yy,sf_quadrupole_yz,sf_quadrupole_zz,sf_radius,sf_valid,shift_state,stress_energy_state,x,y,z

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_QUASILOCALMEASURES_PUBLIC_CARGUMENTS \
static int cctki_vi_alp = -100; \
if (cctki_vi_alp == -100) cctki_vi_alp = CCTK_VarIndex("ADMBASE::alp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_alp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, alp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_alp)); \
static int cctki_vi_betax = -100; \
if (cctki_vi_betax == -100) cctki_vi_betax = CCTK_VarIndex("ADMBASE::betax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betax)); \
static int cctki_vi_betay = -100; \
if (cctki_vi_betay == -100) cctki_vi_betay = CCTK_VarIndex("ADMBASE::betay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betay)); \
static int cctki_vi_betaz = -100; \
if (cctki_vi_betaz == -100) cctki_vi_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_betaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, betaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_betaz)); \
static int cctki_vi_coarse_dx = -100; \
if (cctki_vi_coarse_dx == -100) cctki_vi_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dx)); \
static int cctki_vi_coarse_dy = -100; \
if (cctki_vi_coarse_dy == -100) cctki_vi_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dy)); \
static int cctki_vi_coarse_dz = -100; \
if (cctki_vi_coarse_dz == -100) cctki_vi_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, coarse_dz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_coarse_dz)); \
static int cctki_vi_conformal_state = -100; \
if (cctki_vi_conformal_state == -100) cctki_vi_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, conformal_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_conformal_state)); \
static int cctki_vi_dtalp = -100; \
if (cctki_vi_dtalp == -100) cctki_vi_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtalp)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtalp_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtalp)); \
static int cctki_vi_dtbetax = -100; \
if (cctki_vi_dtbetax == -100) cctki_vi_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetax)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetax_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetax)); \
static int cctki_vi_dtbetay = -100; \
if (cctki_vi_dtbetay == -100) cctki_vi_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetay)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetay_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetay)); \
static int cctki_vi_dtbetaz = -100; \
if (cctki_vi_dtbetaz == -100) cctki_vi_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_dtbetaz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, dtbetaz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_dtbetaz)); \
static int cctki_vi_dtlapse_state = -100; \
if (cctki_vi_dtlapse_state == -100) cctki_vi_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtlapse_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtlapse_state)); \
static int cctki_vi_dtshift_state = -100; \
if (cctki_vi_dtshift_state == -100) cctki_vi_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, dtshift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_dtshift_state)); \
static int cctki_vi_eTtt = -100; \
if (cctki_vi_eTtt == -100) cctki_vi_eTtt = CCTK_VarIndex("TMUNUBASE::eTtt"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtt, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTtt)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtt_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTtt)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtt_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTtt)); \
static int cctki_vi_eTtx = -100; \
if (cctki_vi_eTtx == -100) cctki_vi_eTtx = CCTK_VarIndex("TMUNUBASE::eTtx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTtx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTtx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTtx)); \
static int cctki_vi_eTty = -100; \
if (cctki_vi_eTty == -100) cctki_vi_eTty = CCTK_VarIndex("TMUNUBASE::eTty"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTty, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTty)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTty_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTty)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTty_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTty)); \
static int cctki_vi_eTtz = -100; \
if (cctki_vi_eTtz == -100) cctki_vi_eTtz = CCTK_VarIndex("TMUNUBASE::eTtz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTtz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTtz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTtz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTtz)); \
static int cctki_vi_eTxx = -100; \
if (cctki_vi_eTxx == -100) cctki_vi_eTxx = CCTK_VarIndex("TMUNUBASE::eTxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTxx)); \
static int cctki_vi_eTxy = -100; \
if (cctki_vi_eTxy == -100) cctki_vi_eTxy = CCTK_VarIndex("TMUNUBASE::eTxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTxy)); \
static int cctki_vi_eTxz = -100; \
if (cctki_vi_eTxz == -100) cctki_vi_eTxz = CCTK_VarIndex("TMUNUBASE::eTxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTxz)); \
static int cctki_vi_eTyy = -100; \
if (cctki_vi_eTyy == -100) cctki_vi_eTyy = CCTK_VarIndex("TMUNUBASE::eTyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTyy)); \
static int cctki_vi_eTyz = -100; \
if (cctki_vi_eTyz == -100) cctki_vi_eTyz = CCTK_VarIndex("TMUNUBASE::eTyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTyz)); \
static int cctki_vi_eTzz = -100; \
if (cctki_vi_eTzz == -100) cctki_vi_eTzz = CCTK_VarIndex("TMUNUBASE::eTzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_eTzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_eTzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, eTzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_eTzz)); \
static int cctki_vi_gxx = -100; \
if (cctki_vi_gxx == -100) cctki_vi_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxx)); \
static int cctki_vi_gxy = -100; \
if (cctki_vi_gxy == -100) cctki_vi_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxy)); \
static int cctki_vi_gxz = -100; \
if (cctki_vi_gxz == -100) cctki_vi_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gxz)); \
static int cctki_vi_gyy = -100; \
if (cctki_vi_gyy == -100) cctki_vi_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyy)); \
static int cctki_vi_gyz = -100; \
if (cctki_vi_gyz == -100) cctki_vi_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gyz)); \
static int cctki_vi_gzz = -100; \
if (cctki_vi_gzz == -100) cctki_vi_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_gzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, gzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_gzz)); \
static int cctki_vi_kxx = -100; \
if (cctki_vi_kxx == -100) cctki_vi_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxx)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxx_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxx)); \
static int cctki_vi_kxy = -100; \
if (cctki_vi_kxy == -100) cctki_vi_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxy)); \
static int cctki_vi_kxz = -100; \
if (cctki_vi_kxz == -100) cctki_vi_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kxz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kxz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kxz)); \
static int cctki_vi_kyy = -100; \
if (cctki_vi_kyy == -100) cctki_vi_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyy)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyy_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyy)); \
static int cctki_vi_kyz = -100; \
if (cctki_vi_kyz == -100) cctki_vi_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kyz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kyz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kyz)); \
static int cctki_vi_kzz = -100; \
if (cctki_vi_kzz == -100) cctki_vi_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 1, cctki_vi_kzz)); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, kzz_p_p, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 2, cctki_vi_kzz)); \
static int cctki_vi_psi = -100; \
if (cctki_vi_psi == -100) cctki_vi_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psi)); \
static int cctki_vi_psix = -100; \
if (cctki_vi_psix == -100) cctki_vi_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psix, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psix)); \
static int cctki_vi_psixx = -100; \
if (cctki_vi_psixx == -100) cctki_vi_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixx)); \
static int cctki_vi_psixy = -100; \
if (cctki_vi_psixy == -100) cctki_vi_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixy)); \
static int cctki_vi_psixz = -100; \
if (cctki_vi_psixz == -100) cctki_vi_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psixz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psixz)); \
static int cctki_vi_psiy = -100; \
if (cctki_vi_psiy == -100) cctki_vi_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiy)); \
static int cctki_vi_psiyy = -100; \
if (cctki_vi_psiyy == -100) cctki_vi_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyy)); \
static int cctki_vi_psiyz = -100; \
if (cctki_vi_psiyz == -100) cctki_vi_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiyz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiyz)); \
static int cctki_vi_psiz = -100; \
if (cctki_vi_psiz == -100) cctki_vi_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psiz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psiz)); \
static int cctki_vi_psizz = -100; \
if (cctki_vi_psizz == -100) cctki_vi_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, psizz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_psizz)); \
static int cctki_vi_r = -100; \
if (cctki_vi_r == -100) cctki_vi_r = CCTK_VarIndex("GRID::r"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, r, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_r)); \
static int cctki_vi_sf_active = -100; \
if (cctki_vi_sf_active == -100) cctki_vi_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_active, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_active)); \
static int cctki_vi_sf_area = -100; \
if (cctki_vi_sf_area == -100) cctki_vi_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_area, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_area)); \
static int cctki_vi_sf_centroid_x = -100; \
if (cctki_vi_sf_centroid_x == -100) cctki_vi_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_x)); \
static int cctki_vi_sf_centroid_y = -100; \
if (cctki_vi_sf_centroid_y == -100) cctki_vi_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_y)); \
static int cctki_vi_sf_centroid_z = -100; \
if (cctki_vi_sf_centroid_z == -100) cctki_vi_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_centroid_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_centroid_z)); \
static int cctki_vi_sf_delta_phi = -100; \
if (cctki_vi_sf_delta_phi == -100) cctki_vi_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_phi)); \
static int cctki_vi_sf_delta_theta = -100; \
if (cctki_vi_sf_delta_theta == -100) cctki_vi_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_delta_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_delta_theta)); \
static int cctki_vi_sf_max_radius = -100; \
if (cctki_vi_sf_max_radius == -100) cctki_vi_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_radius)); \
static int cctki_vi_sf_max_x = -100; \
if (cctki_vi_sf_max_x == -100) cctki_vi_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_x)); \
static int cctki_vi_sf_max_y = -100; \
if (cctki_vi_sf_max_y == -100) cctki_vi_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_y)); \
static int cctki_vi_sf_max_z = -100; \
if (cctki_vi_sf_max_z == -100) cctki_vi_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_max_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_max_z)); \
static int cctki_vi_sf_maxreflevel = -100; \
if (cctki_vi_sf_maxreflevel == -100) cctki_vi_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_maxreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_maxreflevel)); \
static int cctki_vi_sf_mean_radius = -100; \
if (cctki_vi_sf_mean_radius == -100) cctki_vi_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_mean_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_mean_radius)); \
static int cctki_vi_sf_min_radius = -100; \
if (cctki_vi_sf_min_radius == -100) cctki_vi_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_radius)); \
static int cctki_vi_sf_min_x = -100; \
if (cctki_vi_sf_min_x == -100) cctki_vi_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_x)); \
static int cctki_vi_sf_min_y = -100; \
if (cctki_vi_sf_min_y == -100) cctki_vi_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_y)); \
static int cctki_vi_sf_min_z = -100; \
if (cctki_vi_sf_min_z == -100) cctki_vi_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_min_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_min_z)); \
static int cctki_vi_sf_minreflevel = -100; \
if (cctki_vi_sf_minreflevel == -100) cctki_vi_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_minreflevel, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_minreflevel)); \
static int cctki_vi_sf_nghostsphi = -100; \
if (cctki_vi_sf_nghostsphi == -100) cctki_vi_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghostsphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghostsphi)); \
static int cctki_vi_sf_nghoststheta = -100; \
if (cctki_vi_sf_nghoststheta == -100) cctki_vi_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nghoststheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nghoststheta)); \
static int cctki_vi_sf_nphi = -100; \
if (cctki_vi_sf_nphi == -100) cctki_vi_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_nphi, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_nphi)); \
static int cctki_vi_sf_ntheta = -100; \
if (cctki_vi_sf_ntheta == -100) cctki_vi_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_ntheta, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_ntheta)); \
static int cctki_vi_sf_origin_phi = -100; \
if (cctki_vi_sf_origin_phi == -100) cctki_vi_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_phi, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_phi)); \
static int cctki_vi_sf_origin_theta = -100; \
if (cctki_vi_sf_origin_theta == -100) cctki_vi_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_theta, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_theta)); \
static int cctki_vi_sf_origin_x = -100; \
if (cctki_vi_sf_origin_x == -100) cctki_vi_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_x)); \
static int cctki_vi_sf_origin_y = -100; \
if (cctki_vi_sf_origin_y == -100) cctki_vi_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_y)); \
static int cctki_vi_sf_origin_z = -100; \
if (cctki_vi_sf_origin_z == -100) cctki_vi_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_origin_z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_origin_z)); \
static int cctki_vi_sf_quadrupole_xx = -100; \
if (cctki_vi_sf_quadrupole_xx == -100) cctki_vi_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xx, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xx)); \
static int cctki_vi_sf_quadrupole_xy = -100; \
if (cctki_vi_sf_quadrupole_xy == -100) cctki_vi_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xy)); \
static int cctki_vi_sf_quadrupole_xz = -100; \
if (cctki_vi_sf_quadrupole_xz == -100) cctki_vi_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_xz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_xz)); \
static int cctki_vi_sf_quadrupole_yy = -100; \
if (cctki_vi_sf_quadrupole_yy == -100) cctki_vi_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yy, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yy)); \
static int cctki_vi_sf_quadrupole_yz = -100; \
if (cctki_vi_sf_quadrupole_yz == -100) cctki_vi_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_yz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_yz)); \
static int cctki_vi_sf_quadrupole_zz = -100; \
if (cctki_vi_sf_quadrupole_zz == -100) cctki_vi_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_quadrupole_zz, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_quadrupole_zz)); \
static int cctki_vi_sf_radius = -100; \
if (cctki_vi_sf_radius == -100) cctki_vi_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, sf_radius, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_radius)); \
static int cctki_vi_sf_valid = -100; \
if (cctki_vi_sf_valid == -100) cctki_vi_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, sf_valid, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_sf_valid)); \
static int cctki_vi_shift_state = -100; \
if (cctki_vi_shift_state == -100) cctki_vi_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, shift_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_shift_state)); \
static int cctki_vi_stress_energy_state = -100; \
if (cctki_vi_stress_energy_state == -100) cctki_vi_stress_energy_state = CCTK_VarIndex("TMUNUBASE::stress_energy_state"); \
CCTK_DECLARE_INIT (CCTK_INT * restrict const, stress_energy_state, (CCTK_INT *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_stress_energy_state)); \
static int cctki_vi_x = -100; \
if (cctki_vi_x == -100) cctki_vi_x = CCTK_VarIndex("GRID::x"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, x, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_x)); \
static int cctki_vi_y = -100; \
if (cctki_vi_y == -100) cctki_vi_y = CCTK_VarIndex("GRID::y"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, y, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_y)); \
static int cctki_vi_z = -100; \
if (cctki_vi_z == -100) cctki_vi_z = CCTK_VarIndex("GRID::z"); \
CCTK_DECLARE_INIT (CCTK_REAL * restrict const, z, (CCTK_REAL *) CCTKi_VarDataPtrI(cctkGH, 0, cctki_vi_z));

#define DECLARE_QUASILOCALMEASURES_PUBLIC_C2F \
static int CCTKARGNUM_alp = -1; \
static int CCTKGROUPNUM_lapse = -1; \
static int CCTKARGNUM_betax = -1; \
static int CCTKGROUPNUM_shift = -1; \
static int CCTKARGNUM_betay = -1; \
static int CCTKARGNUM_betaz = -1; \
static int CCTKARGNUM_coarse_dx = -1; \
static int CCTKGROUPNUM_gridspacings = -1; \
static int CCTKARGNUM_coarse_dy = -1; \
static int CCTKARGNUM_coarse_dz = -1; \
static int CCTKARGNUM_conformal_state = -1; \
static int CCTKGROUPNUM_conformal_state = -1; \
static int CCTKARGNUM_dtalp = -1; \
static int CCTKGROUPNUM_dtlapse = -1; \
static int CCTKARGNUM_dtbetax = -1; \
static int CCTKGROUPNUM_dtshift = -1; \
static int CCTKARGNUM_dtbetay = -1; \
static int CCTKARGNUM_dtbetaz = -1; \
static int CCTKARGNUM_dtlapse_state = -1; \
static int CCTKGROUPNUM_dtlapse_state = -1; \
static int CCTKARGNUM_dtshift_state = -1; \
static int CCTKGROUPNUM_dtshift_state = -1; \
static int CCTKARGNUM_eTtt = -1; \
static int CCTKGROUPNUM_stress_energy_scalar = -1; \
static int CCTKARGNUM_eTtx = -1; \
static int CCTKGROUPNUM_stress_energy_vector = -1; \
static int CCTKARGNUM_eTty = -1; \
static int CCTKARGNUM_eTtz = -1; \
static int CCTKARGNUM_eTxx = -1; \
static int CCTKGROUPNUM_stress_energy_tensor = -1; \
static int CCTKARGNUM_eTxy = -1; \
static int CCTKARGNUM_eTxz = -1; \
static int CCTKARGNUM_eTyy = -1; \
static int CCTKARGNUM_eTyz = -1; \
static int CCTKARGNUM_eTzz = -1; \
static int CCTKARGNUM_gxx = -1; \
static int CCTKGROUPNUM_metric = -1; \
static int CCTKARGNUM_gxy = -1; \
static int CCTKARGNUM_gxz = -1; \
static int CCTKARGNUM_gyy = -1; \
static int CCTKARGNUM_gyz = -1; \
static int CCTKARGNUM_gzz = -1; \
static int CCTKARGNUM_kxx = -1; \
static int CCTKGROUPNUM_curv = -1; \
static int CCTKARGNUM_kxy = -1; \
static int CCTKARGNUM_kxz = -1; \
static int CCTKARGNUM_kyy = -1; \
static int CCTKARGNUM_kyz = -1; \
static int CCTKARGNUM_kzz = -1; \
static int CCTKARGNUM_psi = -1; \
static int CCTKGROUPNUM_confac = -1; \
static int CCTKARGNUM_psix = -1; \
static int CCTKGROUPNUM_confac_1derivs = -1; \
static int CCTKARGNUM_psixx = -1; \
static int CCTKGROUPNUM_confac_2derivs = -1; \
static int CCTKARGNUM_psixy = -1; \
static int CCTKARGNUM_psixz = -1; \
static int CCTKARGNUM_psiy = -1; \
static int CCTKARGNUM_psiyy = -1; \
static int CCTKARGNUM_psiyz = -1; \
static int CCTKARGNUM_psiz = -1; \
static int CCTKARGNUM_psizz = -1; \
static int CCTKARGNUM_r = -1; \
static int CCTKGROUPNUM_coordinates = -1; \
static int CCTKARGNUM_sf_active = -1; \
static int CCTKGROUPNUM_sf_active = -1; \
static int CCTKARGNUM_sf_area = -1; \
static int CCTKGROUPNUM_sf_info = -1; \
static int CCTKARGNUM_sf_centroid_x = -1; \
static int CCTKARGNUM_sf_centroid_y = -1; \
static int CCTKARGNUM_sf_centroid_z = -1; \
static int CCTKARGNUM_sf_delta_phi = -1; \
static int CCTKGROUPNUM_sf_coordinate_descriptors = -1; \
static int CCTKARGNUM_sf_delta_theta = -1; \
static int CCTKARGNUM_sf_max_radius = -1; \
static int CCTKARGNUM_sf_max_x = -1; \
static int CCTKARGNUM_sf_max_y = -1; \
static int CCTKARGNUM_sf_max_z = -1; \
static int CCTKARGNUM_sf_maxreflevel = -1; \
static int CCTKGROUPNUM_sf_maxreflevel = -1; \
static int CCTKARGNUM_sf_mean_radius = -1; \
static int CCTKARGNUM_sf_min_radius = -1; \
static int CCTKARGNUM_sf_min_x = -1; \
static int CCTKARGNUM_sf_min_y = -1; \
static int CCTKARGNUM_sf_min_z = -1; \
static int CCTKARGNUM_sf_minreflevel = -1; \
static int CCTKGROUPNUM_sf_minreflevel = -1; \
static int CCTKARGNUM_sf_nghostsphi = -1; \
static int CCTKGROUPNUM_sf_shape_descriptors = -1; \
static int CCTKARGNUM_sf_nghoststheta = -1; \
static int CCTKARGNUM_sf_nphi = -1; \
static int CCTKARGNUM_sf_ntheta = -1; \
static int CCTKARGNUM_sf_origin_phi = -1; \
static int CCTKARGNUM_sf_origin_theta = -1; \
static int CCTKARGNUM_sf_origin_x = -1; \
static int CCTKGROUPNUM_sf_origin = -1; \
static int CCTKARGNUM_sf_origin_y = -1; \
static int CCTKARGNUM_sf_origin_z = -1; \
static int CCTKARGNUM_sf_quadrupole_xx = -1; \
static int CCTKARGNUM_sf_quadrupole_xy = -1; \
static int CCTKARGNUM_sf_quadrupole_xz = -1; \
static int CCTKARGNUM_sf_quadrupole_yy = -1; \
static int CCTKARGNUM_sf_quadrupole_yz = -1; \
static int CCTKARGNUM_sf_quadrupole_zz = -1; \
static int CCTKARGNUM_sf_radius = -1; \
static int CCTKGROUPNUM_sf_radius = -1; \
static int CCTKARGNUM_sf_valid = -1; \
static int CCTKGROUPNUM_sf_valid = -1; \
static int CCTKARGNUM_shift_state = -1; \
static int CCTKGROUPNUM_shift_state = -1; \
static int CCTKARGNUM_stress_energy_state = -1; \
static int CCTKGROUPNUM_stress_energy_state = -1; \
static int CCTKARGNUM_x = -1; \
static int CCTKARGNUM_y = -1; \
static int CCTKARGNUM_z = -1;

#define INITIALISE_QUASILOCALMEASURES_PUBLIC_C2F \
if(CCTKARGNUM_alp == -1) CCTKARGNUM_alp = CCTK_VarIndex("ADMBASE::alp"); \
if(CCTKGROUPNUM_lapse == -1) CCTKGROUPNUM_lapse = CCTK_GroupIndex("ADMBASE::lapse"); \
if(CCTKARGNUM_betax == -1) CCTKARGNUM_betax = CCTK_VarIndex("ADMBASE::betax"); \
if(CCTKGROUPNUM_shift == -1) CCTKGROUPNUM_shift = CCTK_GroupIndex("ADMBASE::shift"); \
if(CCTKARGNUM_betay == -1) CCTKARGNUM_betay = CCTK_VarIndex("ADMBASE::betay"); \
if(CCTKARGNUM_betaz == -1) CCTKARGNUM_betaz = CCTK_VarIndex("ADMBASE::betaz"); \
if(CCTKARGNUM_coarse_dx == -1) CCTKARGNUM_coarse_dx = CCTK_VarIndex("GRID::coarse_dx"); \
if(CCTKGROUPNUM_gridspacings == -1) CCTKGROUPNUM_gridspacings = CCTK_GroupIndex("GRID::gridspacings"); \
if(CCTKARGNUM_coarse_dy == -1) CCTKARGNUM_coarse_dy = CCTK_VarIndex("GRID::coarse_dy"); \
if(CCTKARGNUM_coarse_dz == -1) CCTKARGNUM_coarse_dz = CCTK_VarIndex("GRID::coarse_dz"); \
if(CCTKARGNUM_conformal_state == -1) CCTKARGNUM_conformal_state = CCTK_VarIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKGROUPNUM_conformal_state == -1) CCTKGROUPNUM_conformal_state = CCTK_GroupIndex("STATICCONFORMAL::conformal_state"); \
if(CCTKARGNUM_dtalp == -1) CCTKARGNUM_dtalp = CCTK_VarIndex("ADMBASE::dtalp"); \
if(CCTKGROUPNUM_dtlapse == -1) CCTKGROUPNUM_dtlapse = CCTK_GroupIndex("ADMBASE::dtlapse"); \
if(CCTKARGNUM_dtbetax == -1) CCTKARGNUM_dtbetax = CCTK_VarIndex("ADMBASE::dtbetax"); \
if(CCTKGROUPNUM_dtshift == -1) CCTKGROUPNUM_dtshift = CCTK_GroupIndex("ADMBASE::dtshift"); \
if(CCTKARGNUM_dtbetay == -1) CCTKARGNUM_dtbetay = CCTK_VarIndex("ADMBASE::dtbetay"); \
if(CCTKARGNUM_dtbetaz == -1) CCTKARGNUM_dtbetaz = CCTK_VarIndex("ADMBASE::dtbetaz"); \
if(CCTKARGNUM_dtlapse_state == -1) CCTKARGNUM_dtlapse_state = CCTK_VarIndex("ADMBASE::dtlapse_state"); \
if(CCTKGROUPNUM_dtlapse_state == -1) CCTKGROUPNUM_dtlapse_state = CCTK_GroupIndex("ADMBASE::dtlapse_state"); \
if(CCTKARGNUM_dtshift_state == -1) CCTKARGNUM_dtshift_state = CCTK_VarIndex("ADMBASE::dtshift_state"); \
if(CCTKGROUPNUM_dtshift_state == -1) CCTKGROUPNUM_dtshift_state = CCTK_GroupIndex("ADMBASE::dtshift_state"); \
if(CCTKARGNUM_eTtt == -1) CCTKARGNUM_eTtt = CCTK_VarIndex("TMUNUBASE::eTtt"); \
if(CCTKGROUPNUM_stress_energy_scalar == -1) CCTKGROUPNUM_stress_energy_scalar = CCTK_GroupIndex("TMUNUBASE::stress_energy_scalar"); \
if(CCTKARGNUM_eTtx == -1) CCTKARGNUM_eTtx = CCTK_VarIndex("TMUNUBASE::eTtx"); \
if(CCTKGROUPNUM_stress_energy_vector == -1) CCTKGROUPNUM_stress_energy_vector = CCTK_GroupIndex("TMUNUBASE::stress_energy_vector"); \
if(CCTKARGNUM_eTty == -1) CCTKARGNUM_eTty = CCTK_VarIndex("TMUNUBASE::eTty"); \
if(CCTKARGNUM_eTtz == -1) CCTKARGNUM_eTtz = CCTK_VarIndex("TMUNUBASE::eTtz"); \
if(CCTKARGNUM_eTxx == -1) CCTKARGNUM_eTxx = CCTK_VarIndex("TMUNUBASE::eTxx"); \
if(CCTKGROUPNUM_stress_energy_tensor == -1) CCTKGROUPNUM_stress_energy_tensor = CCTK_GroupIndex("TMUNUBASE::stress_energy_tensor"); \
if(CCTKARGNUM_eTxy == -1) CCTKARGNUM_eTxy = CCTK_VarIndex("TMUNUBASE::eTxy"); \
if(CCTKARGNUM_eTxz == -1) CCTKARGNUM_eTxz = CCTK_VarIndex("TMUNUBASE::eTxz"); \
if(CCTKARGNUM_eTyy == -1) CCTKARGNUM_eTyy = CCTK_VarIndex("TMUNUBASE::eTyy"); \
if(CCTKARGNUM_eTyz == -1) CCTKARGNUM_eTyz = CCTK_VarIndex("TMUNUBASE::eTyz"); \
if(CCTKARGNUM_eTzz == -1) CCTKARGNUM_eTzz = CCTK_VarIndex("TMUNUBASE::eTzz"); \
if(CCTKARGNUM_gxx == -1) CCTKARGNUM_gxx = CCTK_VarIndex("ADMBASE::gxx"); \
if(CCTKGROUPNUM_metric == -1) CCTKGROUPNUM_metric = CCTK_GroupIndex("ADMBASE::metric"); \
if(CCTKARGNUM_gxy == -1) CCTKARGNUM_gxy = CCTK_VarIndex("ADMBASE::gxy"); \
if(CCTKARGNUM_gxz == -1) CCTKARGNUM_gxz = CCTK_VarIndex("ADMBASE::gxz"); \
if(CCTKARGNUM_gyy == -1) CCTKARGNUM_gyy = CCTK_VarIndex("ADMBASE::gyy"); \
if(CCTKARGNUM_gyz == -1) CCTKARGNUM_gyz = CCTK_VarIndex("ADMBASE::gyz"); \
if(CCTKARGNUM_gzz == -1) CCTKARGNUM_gzz = CCTK_VarIndex("ADMBASE::gzz"); \
if(CCTKARGNUM_kxx == -1) CCTKARGNUM_kxx = CCTK_VarIndex("ADMBASE::kxx"); \
if(CCTKGROUPNUM_curv == -1) CCTKGROUPNUM_curv = CCTK_GroupIndex("ADMBASE::curv"); \
if(CCTKARGNUM_kxy == -1) CCTKARGNUM_kxy = CCTK_VarIndex("ADMBASE::kxy"); \
if(CCTKARGNUM_kxz == -1) CCTKARGNUM_kxz = CCTK_VarIndex("ADMBASE::kxz"); \
if(CCTKARGNUM_kyy == -1) CCTKARGNUM_kyy = CCTK_VarIndex("ADMBASE::kyy"); \
if(CCTKARGNUM_kyz == -1) CCTKARGNUM_kyz = CCTK_VarIndex("ADMBASE::kyz"); \
if(CCTKARGNUM_kzz == -1) CCTKARGNUM_kzz = CCTK_VarIndex("ADMBASE::kzz"); \
if(CCTKARGNUM_psi == -1) CCTKARGNUM_psi = CCTK_VarIndex("STATICCONFORMAL::psi"); \
if(CCTKGROUPNUM_confac == -1) CCTKGROUPNUM_confac = CCTK_GroupIndex("STATICCONFORMAL::confac"); \
if(CCTKARGNUM_psix == -1) CCTKARGNUM_psix = CCTK_VarIndex("STATICCONFORMAL::psix"); \
if(CCTKGROUPNUM_confac_1derivs == -1) CCTKGROUPNUM_confac_1derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_1derivs"); \
if(CCTKARGNUM_psixx == -1) CCTKARGNUM_psixx = CCTK_VarIndex("STATICCONFORMAL::psixx"); \
if(CCTKGROUPNUM_confac_2derivs == -1) CCTKGROUPNUM_confac_2derivs = CCTK_GroupIndex("STATICCONFORMAL::confac_2derivs"); \
if(CCTKARGNUM_psixy == -1) CCTKARGNUM_psixy = CCTK_VarIndex("STATICCONFORMAL::psixy"); \
if(CCTKARGNUM_psixz == -1) CCTKARGNUM_psixz = CCTK_VarIndex("STATICCONFORMAL::psixz"); \
if(CCTKARGNUM_psiy == -1) CCTKARGNUM_psiy = CCTK_VarIndex("STATICCONFORMAL::psiy"); \
if(CCTKARGNUM_psiyy == -1) CCTKARGNUM_psiyy = CCTK_VarIndex("STATICCONFORMAL::psiyy"); \
if(CCTKARGNUM_psiyz == -1) CCTKARGNUM_psiyz = CCTK_VarIndex("STATICCONFORMAL::psiyz"); \
if(CCTKARGNUM_psiz == -1) CCTKARGNUM_psiz = CCTK_VarIndex("STATICCONFORMAL::psiz"); \
if(CCTKARGNUM_psizz == -1) CCTKARGNUM_psizz = CCTK_VarIndex("STATICCONFORMAL::psizz"); \
if(CCTKARGNUM_r == -1) CCTKARGNUM_r = CCTK_VarIndex("GRID::r"); \
if(CCTKGROUPNUM_coordinates == -1) CCTKGROUPNUM_coordinates = CCTK_GroupIndex("GRID::coordinates"); \
if(CCTKARGNUM_sf_active == -1) CCTKARGNUM_sf_active = CCTK_VarIndex("SPHERICALSURFACE::sf_active[0]"); \
if(CCTKGROUPNUM_sf_active == -1) CCTKGROUPNUM_sf_active = CCTK_GroupIndex("SPHERICALSURFACE::sf_active"); \
if(CCTKARGNUM_sf_area == -1) CCTKARGNUM_sf_area = CCTK_VarIndex("SPHERICALSURFACE::sf_area[0]"); \
if(CCTKGROUPNUM_sf_info == -1) CCTKGROUPNUM_sf_info = CCTK_GroupIndex("SPHERICALSURFACE::sf_info"); \
if(CCTKARGNUM_sf_centroid_x == -1) CCTKARGNUM_sf_centroid_x = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_x[0]"); \
if(CCTKARGNUM_sf_centroid_y == -1) CCTKARGNUM_sf_centroid_y = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_y[0]"); \
if(CCTKARGNUM_sf_centroid_z == -1) CCTKARGNUM_sf_centroid_z = CCTK_VarIndex("SPHERICALSURFACE::sf_centroid_z[0]"); \
if(CCTKARGNUM_sf_delta_phi == -1) CCTKARGNUM_sf_delta_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_phi[0]"); \
if(CCTKGROUPNUM_sf_coordinate_descriptors == -1) CCTKGROUPNUM_sf_coordinate_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_coordinate_descriptors"); \
if(CCTKARGNUM_sf_delta_theta == -1) CCTKARGNUM_sf_delta_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_delta_theta[0]"); \
if(CCTKARGNUM_sf_max_radius == -1) CCTKARGNUM_sf_max_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_max_radius[0]"); \
if(CCTKARGNUM_sf_max_x == -1) CCTKARGNUM_sf_max_x = CCTK_VarIndex("SPHERICALSURFACE::sf_max_x[0]"); \
if(CCTKARGNUM_sf_max_y == -1) CCTKARGNUM_sf_max_y = CCTK_VarIndex("SPHERICALSURFACE::sf_max_y[0]"); \
if(CCTKARGNUM_sf_max_z == -1) CCTKARGNUM_sf_max_z = CCTK_VarIndex("SPHERICALSURFACE::sf_max_z[0]"); \
if(CCTKARGNUM_sf_maxreflevel == -1) CCTKARGNUM_sf_maxreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_maxreflevel[0]"); \
if(CCTKGROUPNUM_sf_maxreflevel == -1) CCTKGROUPNUM_sf_maxreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_maxreflevel"); \
if(CCTKARGNUM_sf_mean_radius == -1) CCTKARGNUM_sf_mean_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_mean_radius[0]"); \
if(CCTKARGNUM_sf_min_radius == -1) CCTKARGNUM_sf_min_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_min_radius[0]"); \
if(CCTKARGNUM_sf_min_x == -1) CCTKARGNUM_sf_min_x = CCTK_VarIndex("SPHERICALSURFACE::sf_min_x[0]"); \
if(CCTKARGNUM_sf_min_y == -1) CCTKARGNUM_sf_min_y = CCTK_VarIndex("SPHERICALSURFACE::sf_min_y[0]"); \
if(CCTKARGNUM_sf_min_z == -1) CCTKARGNUM_sf_min_z = CCTK_VarIndex("SPHERICALSURFACE::sf_min_z[0]"); \
if(CCTKARGNUM_sf_minreflevel == -1) CCTKARGNUM_sf_minreflevel = CCTK_VarIndex("SPHERICALSURFACE::sf_minreflevel[0]"); \
if(CCTKGROUPNUM_sf_minreflevel == -1) CCTKGROUPNUM_sf_minreflevel = CCTK_GroupIndex("SPHERICALSURFACE::sf_minreflevel"); \
if(CCTKARGNUM_sf_nghostsphi == -1) CCTKARGNUM_sf_nghostsphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nghostsphi[0]"); \
if(CCTKGROUPNUM_sf_shape_descriptors == -1) CCTKGROUPNUM_sf_shape_descriptors = CCTK_GroupIndex("SPHERICALSURFACE::sf_shape_descriptors"); \
if(CCTKARGNUM_sf_nghoststheta == -1) CCTKARGNUM_sf_nghoststheta = CCTK_VarIndex("SPHERICALSURFACE::sf_nghoststheta[0]"); \
if(CCTKARGNUM_sf_nphi == -1) CCTKARGNUM_sf_nphi = CCTK_VarIndex("SPHERICALSURFACE::sf_nphi[0]"); \
if(CCTKARGNUM_sf_ntheta == -1) CCTKARGNUM_sf_ntheta = CCTK_VarIndex("SPHERICALSURFACE::sf_ntheta[0]"); \
if(CCTKARGNUM_sf_origin_phi == -1) CCTKARGNUM_sf_origin_phi = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_phi[0]"); \
if(CCTKARGNUM_sf_origin_theta == -1) CCTKARGNUM_sf_origin_theta = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_theta[0]"); \
if(CCTKARGNUM_sf_origin_x == -1) CCTKARGNUM_sf_origin_x = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_x[0]"); \
if(CCTKGROUPNUM_sf_origin == -1) CCTKGROUPNUM_sf_origin = CCTK_GroupIndex("SPHERICALSURFACE::sf_origin"); \
if(CCTKARGNUM_sf_origin_y == -1) CCTKARGNUM_sf_origin_y = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_y[0]"); \
if(CCTKARGNUM_sf_origin_z == -1) CCTKARGNUM_sf_origin_z = CCTK_VarIndex("SPHERICALSURFACE::sf_origin_z[0]"); \
if(CCTKARGNUM_sf_quadrupole_xx == -1) CCTKARGNUM_sf_quadrupole_xx = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xx[0]"); \
if(CCTKARGNUM_sf_quadrupole_xy == -1) CCTKARGNUM_sf_quadrupole_xy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xy[0]"); \
if(CCTKARGNUM_sf_quadrupole_xz == -1) CCTKARGNUM_sf_quadrupole_xz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_xz[0]"); \
if(CCTKARGNUM_sf_quadrupole_yy == -1) CCTKARGNUM_sf_quadrupole_yy = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yy[0]"); \
if(CCTKARGNUM_sf_quadrupole_yz == -1) CCTKARGNUM_sf_quadrupole_yz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_yz[0]"); \
if(CCTKARGNUM_sf_quadrupole_zz == -1) CCTKARGNUM_sf_quadrupole_zz = CCTK_VarIndex("SPHERICALSURFACE::sf_quadrupole_zz[0]"); \
if(CCTKARGNUM_sf_radius == -1) CCTKARGNUM_sf_radius = CCTK_VarIndex("SPHERICALSURFACE::sf_radius[0]"); \
if(CCTKGROUPNUM_sf_radius == -1) CCTKGROUPNUM_sf_radius = CCTK_GroupIndex("SPHERICALSURFACE::sf_radius"); \
if(CCTKARGNUM_sf_valid == -1) CCTKARGNUM_sf_valid = CCTK_VarIndex("SPHERICALSURFACE::sf_valid[0]"); \
if(CCTKGROUPNUM_sf_valid == -1) CCTKGROUPNUM_sf_valid = CCTK_GroupIndex("SPHERICALSURFACE::sf_valid"); \
if(CCTKARGNUM_shift_state == -1) CCTKARGNUM_shift_state = CCTK_VarIndex("ADMBASE::shift_state"); \
if(CCTKGROUPNUM_shift_state == -1) CCTKGROUPNUM_shift_state = CCTK_GroupIndex("ADMBASE::shift_state"); \
if(CCTKARGNUM_stress_energy_state == -1) CCTKARGNUM_stress_energy_state = CCTK_VarIndex("TMUNUBASE::stress_energy_state"); \
if(CCTKGROUPNUM_stress_energy_state == -1) CCTKGROUPNUM_stress_energy_state = CCTK_GroupIndex("TMUNUBASE::stress_energy_state"); \
if(CCTKARGNUM_x == -1) CCTKARGNUM_x = CCTK_VarIndex("GRID::x"); \
if(CCTKARGNUM_y == -1) CCTKARGNUM_y = CCTK_VarIndex("GRID::y"); \
if(CCTKARGNUM_z == -1) CCTKARGNUM_z = CCTK_VarIndex("GRID::z");

#define QUASILOCALMEASURES_PUBLIC_C2F_PROTO \
const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int *,const int

#define PASS_QUASILOCALMEASURES_PUBLIC_C2F(GH) \
PASS_GROUPSIZE(sf_radius, 0),\
PASS_GROUPSIZE(sf_radius, 1),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_active),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_coordinate_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_info),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_maxreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_minreflevel),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_origin),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_radius),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_shape_descriptors),\
PASS_GROUPLEN(SPHERICALSURFACE, sf_valid),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(alp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(betaz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(coarse_dz, 0)),\
(CCTK_INT *)(PASS_REFERENCE(conformal_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtalp, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetax, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetay, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(dtbetaz, 2)),\
(CCTK_INT *)(PASS_REFERENCE(dtlapse_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(dtshift_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtt, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtt, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtt, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTty, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTty, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTty, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTtz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(eTzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(eTzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(eTzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(gzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxx, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kxz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyy, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kyz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 1)),\
(CCTK_REAL *)(PASS_REFERENCE(kzz, 2)),\
(CCTK_REAL *)(PASS_REFERENCE(psi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psix, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psixz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiyz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psiz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(psizz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(r, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_active, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_area, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_centroid_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_delta_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_max_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_maxreflevel, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_mean_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_radius, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_min_z, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_minreflevel, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghostsphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nghoststheta, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_nphi, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_ntheta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_phi, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_theta, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_origin_z, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xx, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_xz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yy, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_yz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_quadrupole_zz, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(sf_radius, 0)),\
(CCTK_INT *)(PASS_REFERENCE(sf_valid, 0)),\
(CCTK_INT *)(PASS_REFERENCE(shift_state, 0)),\
(CCTK_INT *)(PASS_REFERENCE(stress_energy_state, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(x, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(y, 0)),\
(CCTK_REAL *)(PASS_REFERENCE(z, 0))

#endif /* CCODE */

#ifdef FCODE
#define QUASILOCALMEASURES_FARGUMENTS _CCTK_FARGUMENTS, QUASILOCALMEASURES_PRIVATE_FARGUMENTS, QUASILOCALMEASURES_PUBLIC_FARGUMENTS

#define DECLARE_QUASILOCALMEASURES_FARGUMENTS _DECLARE_CCTK_FARGUMENTS DECLARE_QUASILOCALMEASURES_PRIVATE_FARGUMENTS DECLARE_QUASILOCALMEASURES_PUBLIC_FARGUMENTS

#endif /* FCODE */

#ifdef CCODE
#define DECLARE_QUASILOCALMEASURES_CARGUMENTS _DECLARE_CCTK_CARGUMENTS DECLARE_QUASILOCALMEASURES_PRIVATE_CARGUMENTS DECLARE_QUASILOCALMEASURES_PUBLIC_CARGUMENTS

#define QUASILOCALMEASURES_C2F_PROTO _CCTK_C2F_PROTO, QUASILOCALMEASURES_PRIVATE_C2F_PROTO, QUASILOCALMEASURES_PUBLIC_C2F_PROTO

#define PASS_QUASILOCALMEASURES_C2F(GH) _PASS_CCTK_C2F(GH), PASS_QUASILOCALMEASURES_PRIVATE_C2F(GH), PASS_QUASILOCALMEASURES_PUBLIC_C2F(GH)

#define DECLARE_QUASILOCALMEASURES_C2F _DECLARE_CCTK_C2F DECLARE_QUASILOCALMEASURES_PRIVATE_C2F DECLARE_QUASILOCALMEASURES_PUBLIC_C2F

#define INITIALISE_QUASILOCALMEASURES_C2F _INITIALISE_CCTK_C2F INITIALISE_QUASILOCALMEASURES_PRIVATE_C2F INITIALISE_QUASILOCALMEASURES_PUBLIC_C2F

#define QUASILOCALMEASURES_CARGUMENTS cGH *cctkGH

#endif /* CCODE */
